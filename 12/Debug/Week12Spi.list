
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800b038  0800b038  0001b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b668  0800b668  0002046c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b670  0800b670  0002046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b674  0800b674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000046c  20000000  0800b678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000470  0800bae4  00020470  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800bae4  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e0  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002642  00000000  00000000  00032a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019039  00000000  00000000  000370e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cda  00000000  00000000  00050121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d879  00000000  00000000  00061dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a34  00000000  00000000  000ff6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000470 	.word	0x20000470
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b01c 	.word	0x0800b01c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000474 	.word	0x20000474
 80001dc:	0800b01c 	.word	0x0800b01c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b96e 	b.w	80011a8 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9d08      	ldr	r5, [sp, #32]
 8000eea:	4604      	mov	r4, r0
 8000eec:	468c      	mov	ip, r1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8083 	bne.w	8000ffa <__udivmoddi4+0x116>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4617      	mov	r7, r2
 8000ef8:	d947      	bls.n	8000f8a <__udivmoddi4+0xa6>
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b142      	cbz	r2, 8000f12 <__udivmoddi4+0x2e>
 8000f00:	f1c2 0020 	rsb	r0, r2, #32
 8000f04:	fa24 f000 	lsr.w	r0, r4, r0
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	4097      	lsls	r7, r2
 8000f0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000f10:	4094      	lsls	r4, r2
 8000f12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f16:	0c23      	lsrs	r3, r4, #16
 8000f18:	fbbc f6f8 	udiv	r6, ip, r8
 8000f1c:	fa1f fe87 	uxth.w	lr, r7
 8000f20:	fb08 c116 	mls	r1, r8, r6, ip
 8000f24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f28:	fb06 f10e 	mul.w	r1, r6, lr
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d909      	bls.n	8000f44 <__udivmoddi4+0x60>
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f36:	f080 8119 	bcs.w	800116c <__udivmoddi4+0x288>
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	f240 8116 	bls.w	800116c <__udivmoddi4+0x288>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	443b      	add	r3, r7
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d909      	bls.n	8000f70 <__udivmoddi4+0x8c>
 8000f5c:	193c      	adds	r4, r7, r4
 8000f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f62:	f080 8105 	bcs.w	8001170 <__udivmoddi4+0x28c>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f240 8102 	bls.w	8001170 <__udivmoddi4+0x28c>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	443c      	add	r4, r7
 8000f70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	2600      	movs	r6, #0
 8000f7a:	b11d      	cbz	r5, 8000f84 <__udivmoddi4+0xa0>
 8000f7c:	40d4      	lsrs	r4, r2
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e9c5 4300 	strd	r4, r3, [r5]
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	b902      	cbnz	r2, 8000f8e <__udivmoddi4+0xaa>
 8000f8c:	deff      	udf	#255	; 0xff
 8000f8e:	fab2 f282 	clz	r2, r2
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d150      	bne.n	8001038 <__udivmoddi4+0x154>
 8000f96:	1bcb      	subs	r3, r1, r7
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	fa1f f887 	uxth.w	r8, r7
 8000fa0:	2601      	movs	r6, #1
 8000fa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fa6:	0c21      	lsrs	r1, r4, #16
 8000fa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0xe4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fbe:	d202      	bcs.n	8000fc6 <__udivmoddi4+0xe2>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	f200 80e9 	bhi.w	8001198 <__udivmoddi4+0x2b4>
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	1ac9      	subs	r1, r1, r3
 8000fca:	b2a3      	uxth	r3, r4
 8000fcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fd8:	fb08 f800 	mul.w	r8, r8, r0
 8000fdc:	45a0      	cmp	r8, r4
 8000fde:	d907      	bls.n	8000ff0 <__udivmoddi4+0x10c>
 8000fe0:	193c      	adds	r4, r7, r4
 8000fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x10a>
 8000fe8:	45a0      	cmp	r8, r4
 8000fea:	f200 80d9 	bhi.w	80011a0 <__udivmoddi4+0x2bc>
 8000fee:	4618      	mov	r0, r3
 8000ff0:	eba4 0408 	sub.w	r4, r4, r8
 8000ff4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ff8:	e7bf      	b.n	8000f7a <__udivmoddi4+0x96>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d909      	bls.n	8001012 <__udivmoddi4+0x12e>
 8000ffe:	2d00      	cmp	r5, #0
 8001000:	f000 80b1 	beq.w	8001166 <__udivmoddi4+0x282>
 8001004:	2600      	movs	r6, #0
 8001006:	e9c5 0100 	strd	r0, r1, [r5]
 800100a:	4630      	mov	r0, r6
 800100c:	4631      	mov	r1, r6
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	fab3 f683 	clz	r6, r3
 8001016:	2e00      	cmp	r6, #0
 8001018:	d14a      	bne.n	80010b0 <__udivmoddi4+0x1cc>
 800101a:	428b      	cmp	r3, r1
 800101c:	d302      	bcc.n	8001024 <__udivmoddi4+0x140>
 800101e:	4282      	cmp	r2, r0
 8001020:	f200 80b8 	bhi.w	8001194 <__udivmoddi4+0x2b0>
 8001024:	1a84      	subs	r4, r0, r2
 8001026:	eb61 0103 	sbc.w	r1, r1, r3
 800102a:	2001      	movs	r0, #1
 800102c:	468c      	mov	ip, r1
 800102e:	2d00      	cmp	r5, #0
 8001030:	d0a8      	beq.n	8000f84 <__udivmoddi4+0xa0>
 8001032:	e9c5 4c00 	strd	r4, ip, [r5]
 8001036:	e7a5      	b.n	8000f84 <__udivmoddi4+0xa0>
 8001038:	f1c2 0320 	rsb	r3, r2, #32
 800103c:	fa20 f603 	lsr.w	r6, r0, r3
 8001040:	4097      	lsls	r7, r2
 8001042:	fa01 f002 	lsl.w	r0, r1, r2
 8001046:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800104a:	40d9      	lsrs	r1, r3
 800104c:	4330      	orrs	r0, r6
 800104e:	0c03      	lsrs	r3, r0, #16
 8001050:	fbb1 f6fe 	udiv	r6, r1, lr
 8001054:	fa1f f887 	uxth.w	r8, r7
 8001058:	fb0e 1116 	mls	r1, lr, r6, r1
 800105c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001060:	fb06 f108 	mul.w	r1, r6, r8
 8001064:	4299      	cmp	r1, r3
 8001066:	fa04 f402 	lsl.w	r4, r4, r2
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x19c>
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	f106 3cff 	add.w	ip, r6, #4294967295
 8001072:	f080 808d 	bcs.w	8001190 <__udivmoddi4+0x2ac>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 808a 	bls.w	8001190 <__udivmoddi4+0x2ac>
 800107c:	3e02      	subs	r6, #2
 800107e:	443b      	add	r3, r7
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b281      	uxth	r1, r0
 8001084:	fbb3 f0fe 	udiv	r0, r3, lr
 8001088:	fb0e 3310 	mls	r3, lr, r0, r3
 800108c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001090:	fb00 f308 	mul.w	r3, r0, r8
 8001094:	428b      	cmp	r3, r1
 8001096:	d907      	bls.n	80010a8 <__udivmoddi4+0x1c4>
 8001098:	1879      	adds	r1, r7, r1
 800109a:	f100 3cff 	add.w	ip, r0, #4294967295
 800109e:	d273      	bcs.n	8001188 <__udivmoddi4+0x2a4>
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d971      	bls.n	8001188 <__udivmoddi4+0x2a4>
 80010a4:	3802      	subs	r0, #2
 80010a6:	4439      	add	r1, r7
 80010a8:	1acb      	subs	r3, r1, r3
 80010aa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80010ae:	e778      	b.n	8000fa2 <__udivmoddi4+0xbe>
 80010b0:	f1c6 0c20 	rsb	ip, r6, #32
 80010b4:	fa03 f406 	lsl.w	r4, r3, r6
 80010b8:	fa22 f30c 	lsr.w	r3, r2, ip
 80010bc:	431c      	orrs	r4, r3
 80010be:	fa20 f70c 	lsr.w	r7, r0, ip
 80010c2:	fa01 f306 	lsl.w	r3, r1, r6
 80010c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80010ca:	fa21 f10c 	lsr.w	r1, r1, ip
 80010ce:	431f      	orrs	r7, r3
 80010d0:	0c3b      	lsrs	r3, r7, #16
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fa1f f884 	uxth.w	r8, r4
 80010da:	fb0e 1119 	mls	r1, lr, r9, r1
 80010de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010e2:	fb09 fa08 	mul.w	sl, r9, r8
 80010e6:	458a      	cmp	sl, r1
 80010e8:	fa02 f206 	lsl.w	r2, r2, r6
 80010ec:	fa00 f306 	lsl.w	r3, r0, r6
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x220>
 80010f2:	1861      	adds	r1, r4, r1
 80010f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80010f8:	d248      	bcs.n	800118c <__udivmoddi4+0x2a8>
 80010fa:	458a      	cmp	sl, r1
 80010fc:	d946      	bls.n	800118c <__udivmoddi4+0x2a8>
 80010fe:	f1a9 0902 	sub.w	r9, r9, #2
 8001102:	4421      	add	r1, r4
 8001104:	eba1 010a 	sub.w	r1, r1, sl
 8001108:	b2bf      	uxth	r7, r7
 800110a:	fbb1 f0fe 	udiv	r0, r1, lr
 800110e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001112:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001116:	fb00 f808 	mul.w	r8, r0, r8
 800111a:	45b8      	cmp	r8, r7
 800111c:	d907      	bls.n	800112e <__udivmoddi4+0x24a>
 800111e:	19e7      	adds	r7, r4, r7
 8001120:	f100 31ff 	add.w	r1, r0, #4294967295
 8001124:	d22e      	bcs.n	8001184 <__udivmoddi4+0x2a0>
 8001126:	45b8      	cmp	r8, r7
 8001128:	d92c      	bls.n	8001184 <__udivmoddi4+0x2a0>
 800112a:	3802      	subs	r0, #2
 800112c:	4427      	add	r7, r4
 800112e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001132:	eba7 0708 	sub.w	r7, r7, r8
 8001136:	fba0 8902 	umull	r8, r9, r0, r2
 800113a:	454f      	cmp	r7, r9
 800113c:	46c6      	mov	lr, r8
 800113e:	4649      	mov	r1, r9
 8001140:	d31a      	bcc.n	8001178 <__udivmoddi4+0x294>
 8001142:	d017      	beq.n	8001174 <__udivmoddi4+0x290>
 8001144:	b15d      	cbz	r5, 800115e <__udivmoddi4+0x27a>
 8001146:	ebb3 020e 	subs.w	r2, r3, lr
 800114a:	eb67 0701 	sbc.w	r7, r7, r1
 800114e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001152:	40f2      	lsrs	r2, r6
 8001154:	ea4c 0202 	orr.w	r2, ip, r2
 8001158:	40f7      	lsrs	r7, r6
 800115a:	e9c5 2700 	strd	r2, r7, [r5]
 800115e:	2600      	movs	r6, #0
 8001160:	4631      	mov	r1, r6
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	462e      	mov	r6, r5
 8001168:	4628      	mov	r0, r5
 800116a:	e70b      	b.n	8000f84 <__udivmoddi4+0xa0>
 800116c:	4606      	mov	r6, r0
 800116e:	e6e9      	b.n	8000f44 <__udivmoddi4+0x60>
 8001170:	4618      	mov	r0, r3
 8001172:	e6fd      	b.n	8000f70 <__udivmoddi4+0x8c>
 8001174:	4543      	cmp	r3, r8
 8001176:	d2e5      	bcs.n	8001144 <__udivmoddi4+0x260>
 8001178:	ebb8 0e02 	subs.w	lr, r8, r2
 800117c:	eb69 0104 	sbc.w	r1, r9, r4
 8001180:	3801      	subs	r0, #1
 8001182:	e7df      	b.n	8001144 <__udivmoddi4+0x260>
 8001184:	4608      	mov	r0, r1
 8001186:	e7d2      	b.n	800112e <__udivmoddi4+0x24a>
 8001188:	4660      	mov	r0, ip
 800118a:	e78d      	b.n	80010a8 <__udivmoddi4+0x1c4>
 800118c:	4681      	mov	r9, r0
 800118e:	e7b9      	b.n	8001104 <__udivmoddi4+0x220>
 8001190:	4666      	mov	r6, ip
 8001192:	e775      	b.n	8001080 <__udivmoddi4+0x19c>
 8001194:	4630      	mov	r0, r6
 8001196:	e74a      	b.n	800102e <__udivmoddi4+0x14a>
 8001198:	f1ac 0c02 	sub.w	ip, ip, #2
 800119c:	4439      	add	r1, r7
 800119e:	e713      	b.n	8000fc8 <__udivmoddi4+0xe4>
 80011a0:	3802      	subs	r0, #2
 80011a2:	443c      	add	r4, r7
 80011a4:	e724      	b.n	8000ff0 <__udivmoddi4+0x10c>
 80011a6:	bf00      	nop

080011a8 <__aeabi_idiv0>:
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b4:	b09a      	sub	sp, #104	; 0x68
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f002 f878 	bl	80032ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f001 fa76 	bl	80026ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f001 fc48 	bl	8002a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c4:	f001 fc26 	bl	8002a14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c8:	f001 fbfa 	bl	80029c0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011cc:	f001 fb28 	bl	8002820 <MX_SPI3_Init>
  MX_ADC1_Init();
 80011d0:	f001 fad4 	bl	800277c <MX_ADC1_Init>
  MX_TIM3_Init();
 80011d4:	f001 fba8 	bl	8002928 <MX_TIM3_Init>
  MX_TIM2_Init();
 80011d8:	f001 fb5a 	bl	8002890 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80011dc:	48be      	ldr	r0, [pc, #760]	; (80014d8 <main+0x328>)
 80011de:	f004 fd5f 	bl	8005ca0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80011e2:	48be      	ldr	r0, [pc, #760]	; (80014dc <main+0x32c>)
 80011e4:	f004 fdb6 	bl	8005d54 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	49bd      	ldr	r1, [pc, #756]	; (80014e0 <main+0x330>)
 80011ec:	48bd      	ldr	r0, [pc, #756]	; (80014e4 <main+0x334>)
 80011ee:	f002 fa53 	bl	8003698 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f8:	48bb      	ldr	r0, [pc, #748]	; (80014e8 <main+0x338>)
 80011fa:	f003 fccf 	bl	8004b9c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 10);
 80011fe:	220a      	movs	r2, #10
 8001200:	49ba      	ldr	r1, [pc, #744]	; (80014ec <main+0x33c>)
 8001202:	48bb      	ldr	r0, [pc, #748]	; (80014f0 <main+0x340>)
 8001204:	f005 fa77 	bl	80066f6 <HAL_UART_Receive_IT>
		inputchar = UARTRecieveIT();
 8001208:	f001 fd38 	bl	8002c7c <UARTRecieveIT>
 800120c:	4603      	mov	r3, r0
 800120e:	4ab9      	ldr	r2, [pc, #740]	; (80014f4 <main+0x344>)
 8001210:	8013      	strh	r3, [r2, #0]
		switch (state)
 8001212:	4bb9      	ldr	r3, [pc, #740]	; (80014f8 <main+0x348>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	2b1e      	cmp	r3, #30
 8001218:	f300 808e 	bgt.w	8001338 <main+0x188>
 800121c:	2b00      	cmp	r3, #0
 800121e:	da47      	bge.n	80012b0 <main+0x100>
 8001220:	f000 bee6 	b.w	8001ff0 <main+0xe40>
 8001224:	3b28      	subs	r3, #40	; 0x28
 8001226:	2b1e      	cmp	r3, #30
 8001228:	f200 86e2 	bhi.w	8001ff0 <main+0xe40>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <main+0x84>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001b61 	.word	0x08001b61
 8001238:	08001ff1 	.word	0x08001ff1
 800123c:	08001ff1 	.word	0x08001ff1
 8001240:	08001ff1 	.word	0x08001ff1
 8001244:	08001ff1 	.word	0x08001ff1
 8001248:	08001ff1 	.word	0x08001ff1
 800124c:	08001ff1 	.word	0x08001ff1
 8001250:	08001ff1 	.word	0x08001ff1
 8001254:	08001ff1 	.word	0x08001ff1
 8001258:	08001ff1 	.word	0x08001ff1
 800125c:	080013d1 	.word	0x080013d1
 8001260:	08001ff1 	.word	0x08001ff1
 8001264:	08001ff1 	.word	0x08001ff1
 8001268:	08001ff1 	.word	0x08001ff1
 800126c:	08001ff1 	.word	0x08001ff1
 8001270:	08001ff1 	.word	0x08001ff1
 8001274:	08001ff1 	.word	0x08001ff1
 8001278:	08001ff1 	.word	0x08001ff1
 800127c:	08001ff1 	.word	0x08001ff1
 8001280:	08001ff1 	.word	0x08001ff1
 8001284:	08001801 	.word	0x08001801
 8001288:	08001ff1 	.word	0x08001ff1
 800128c:	08001ff1 	.word	0x08001ff1
 8001290:	08001ff1 	.word	0x08001ff1
 8001294:	08001ff1 	.word	0x08001ff1
 8001298:	08001ff1 	.word	0x08001ff1
 800129c:	08001ff1 	.word	0x08001ff1
 80012a0:	08001ff1 	.word	0x08001ff1
 80012a4:	08001ff1 	.word	0x08001ff1
 80012a8:	08001ff1 	.word	0x08001ff1
 80012ac:	08001b7d 	.word	0x08001b7d
 80012b0:	2b1e      	cmp	r3, #30
 80012b2:	f200 869d 	bhi.w	8001ff0 <main+0xe40>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <main+0x10c>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	08001349 	.word	0x08001349
 80012c0:	08001ff1 	.word	0x08001ff1
 80012c4:	08001ff1 	.word	0x08001ff1
 80012c8:	08001ff1 	.word	0x08001ff1
 80012cc:	08001ff1 	.word	0x08001ff1
 80012d0:	08001ff1 	.word	0x08001ff1
 80012d4:	08001ff1 	.word	0x08001ff1
 80012d8:	08001ff1 	.word	0x08001ff1
 80012dc:	08001ff1 	.word	0x08001ff1
 80012e0:	08001ff1 	.word	0x08001ff1
 80012e4:	0800136d 	.word	0x0800136d
 80012e8:	08001ff1 	.word	0x08001ff1
 80012ec:	08001ff1 	.word	0x08001ff1
 80012f0:	08001ff1 	.word	0x08001ff1
 80012f4:	08001ff1 	.word	0x08001ff1
 80012f8:	08001ff1 	.word	0x08001ff1
 80012fc:	08001ff1 	.word	0x08001ff1
 8001300:	08001ff1 	.word	0x08001ff1
 8001304:	08001ff1 	.word	0x08001ff1
 8001308:	08001ff1 	.word	0x08001ff1
 800130c:	080013b3 	.word	0x080013b3
 8001310:	08001ff1 	.word	0x08001ff1
 8001314:	08001ff1 	.word	0x08001ff1
 8001318:	08001ff1 	.word	0x08001ff1
 800131c:	08001ff1 	.word	0x08001ff1
 8001320:	08001ff1 	.word	0x08001ff1
 8001324:	08001ff1 	.word	0x08001ff1
 8001328:	08001ff1 	.word	0x08001ff1
 800132c:	08001ff1 	.word	0x08001ff1
 8001330:	08001ff1 	.word	0x08001ff1
 8001334:	08001795 	.word	0x08001795
 8001338:	2b46      	cmp	r3, #70	; 0x46
 800133a:	f300 8659 	bgt.w	8001ff0 <main+0xe40>
 800133e:	2b28      	cmp	r3, #40	; 0x28
 8001340:	f6bf af70 	bge.w	8001224 <main+0x74>
 8001344:	f000 be54 	b.w	8001ff0 <main+0xe40>
		{
			case state_start:
				wave = 0;
 8001348:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <main+0x34c>)
 800134a:	2300      	movs	r3, #0
 800134c:	6013      	str	r3, [r2, #0]
//				char Menu[]="press 1 : Sawtooth wave\r\n"
//						    "press 2 : Sine wave\r\n"
//						    "press 3 : Square wave\r\n\r\n ";
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),10);
 800134e:	486c      	ldr	r0, [pc, #432]	; (8001500 <main+0x350>)
 8001350:	f7fe ff46 	bl	80001e0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	230a      	movs	r3, #10
 800135a:	4969      	ldr	r1, [pc, #420]	; (8001500 <main+0x350>)
 800135c:	4864      	ldr	r0, [pc, #400]	; (80014f0 <main+0x340>)
 800135e:	f005 f938 	bl	80065d2 <HAL_UART_Transmit>
				state = state_Menu;
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <main+0x348>)
 8001364:	230a      	movs	r3, #10
 8001366:	8013      	strh	r3, [r2, #0]
				break;
 8001368:	f000 be42 	b.w	8001ff0 <main+0xe40>
			case state_Menu:
				if (inputchar == '1')
 800136c:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <main+0x344>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	2b31      	cmp	r3, #49	; 0x31
 8001374:	d104      	bne.n	8001380 <main+0x1d0>
				{
					state = state_Sawtooth;
 8001376:	4a60      	ldr	r2, [pc, #384]	; (80014f8 <main+0x348>)
 8001378:	2314      	movs	r3, #20
 800137a:	8013      	strh	r3, [r2, #0]
				}
				else
				{
					state = state_Menu;
				}
				break;
 800137c:	f000 be38 	b.w	8001ff0 <main+0xe40>
				else if (inputchar == '2')
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <main+0x344>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	2b32      	cmp	r3, #50	; 0x32
 8001388:	d104      	bne.n	8001394 <main+0x1e4>
					state = state_Sine;
 800138a:	4a5b      	ldr	r2, [pc, #364]	; (80014f8 <main+0x348>)
 800138c:	231e      	movs	r3, #30
 800138e:	8013      	strh	r3, [r2, #0]
				break;
 8001390:	f000 be2e 	b.w	8001ff0 <main+0xe40>
				else if (inputchar == '3')
 8001394:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <main+0x344>)
 8001396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139a:	2b33      	cmp	r3, #51	; 0x33
 800139c:	d104      	bne.n	80013a8 <main+0x1f8>
					state = state_Square;
 800139e:	4a56      	ldr	r2, [pc, #344]	; (80014f8 <main+0x348>)
 80013a0:	2328      	movs	r3, #40	; 0x28
 80013a2:	8013      	strh	r3, [r2, #0]
				break;
 80013a4:	f000 be24 	b.w	8001ff0 <main+0xe40>
					state = state_Menu;
 80013a8:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <main+0x348>)
 80013aa:	230a      	movs	r3, #10
 80013ac:	8013      	strh	r3, [r2, #0]
				break;
 80013ae:	f000 be1f 	b.w	8001ff0 <main+0xe40>
//									"press e: +V low \r\n "
//									"press r: -V low\r\n "
//									"press d: slop Up\r\n "
//									"press f: slope down\r\n "
//									"press x: back\r\n\r\n ";
				HAL_UART_Transmit(&huart2, (uint8_t*)SawtoothMenu, strlen(SawtoothMenu),100);
 80013b2:	4854      	ldr	r0, [pc, #336]	; (8001504 <main+0x354>)
 80013b4:	f7fe ff14 	bl	80001e0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	4951      	ldr	r1, [pc, #324]	; (8001504 <main+0x354>)
 80013c0:	484b      	ldr	r0, [pc, #300]	; (80014f0 <main+0x340>)
 80013c2:	f005 f906 	bl	80065d2 <HAL_UART_Transmit>
				state = state_functionSawtooth;
 80013c6:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <main+0x348>)
 80013c8:	2332      	movs	r3, #50	; 0x32
 80013ca:	8013      	strh	r3, [r2, #0]
				break;
 80013cc:	f000 be10 	b.w	8001ff0 <main+0xe40>
			case state_functionSawtooth:
				wave = 1;
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <main+0x34c>)
 80013d2:	2301      	movs	r3, #1
 80013d4:	6013      	str	r3, [r2, #0]
				if (inputchar == 'a') //เพิ่มความถี่
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <main+0x344>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	2b61      	cmp	r3, #97	; 0x61
 80013de:	d139      	bne.n	8001454 <main+0x2a4>
				{
					f += 0.1;
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <main+0x358>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8b7 	bl	8000558 <__aeabi_f2d>
 80013ea:	a339      	add	r3, pc, #228	; (adr r3, 80014d0 <main+0x320>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe ff54 	bl	800029c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbfc 	bl	8000bf8 <__aeabi_d2f>
 8001400:	4602      	mov	r2, r0
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <main+0x358>)
 8001404:	601a      	str	r2, [r3, #0]
					if(f>10)
 8001406:	4b40      	ldr	r3, [pc, #256]	; (8001508 <main+0x358>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd02      	ble.n	8001420 <main+0x270>
					{
						f = 10;
 800141a:	4a3b      	ldr	r2, [pc, #236]	; (8001508 <main+0x358>)
 800141c:	4b3b      	ldr	r3, [pc, #236]	; (800150c <main+0x35c>)
 800141e:	6013      	str	r3, [r2, #0]
					}
					sprintf(showf,"f = %f Hz\r\n",f);
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <main+0x358>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f897 	bl	8000558 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4938      	ldr	r1, [pc, #224]	; (8001510 <main+0x360>)
 8001430:	4838      	ldr	r0, [pc, #224]	; (8001514 <main+0x364>)
 8001432:	f006 fb8f 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 8001436:	4837      	ldr	r0, [pc, #220]	; (8001514 <main+0x364>)
 8001438:	f7fe fed2 	bl	80001e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	230a      	movs	r3, #10
 8001442:	4934      	ldr	r1, [pc, #208]	; (8001514 <main+0x364>)
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <main+0x340>)
 8001446:	f005 f8c4 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <main+0x348>)
 800144c:	2332      	movs	r3, #50	; 0x32
 800144e:	8013      	strh	r3, [r2, #0]
				}
				else
				{
					state = state_functionSawtooth;
				}
				break;
 8001450:	f000 bdce 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 's')  //ลดความถี่
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <main+0x344>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	2b73      	cmp	r3, #115	; 0x73
 800145c:	d15c      	bne.n	8001518 <main+0x368>
					f -= 0.1;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <main+0x358>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f878 	bl	8000558 <__aeabi_f2d>
 8001468:	a319      	add	r3, pc, #100	; (adr r3, 80014d0 <main+0x320>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe ff13 	bl	8000298 <__aeabi_dsub>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbbd 	bl	8000bf8 <__aeabi_d2f>
 800147e:	4602      	mov	r2, r0
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <main+0x358>)
 8001482:	601a      	str	r2, [r3, #0]
					if(f<=0)
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <main+0x358>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d803      	bhi.n	800149c <main+0x2ec>
						f = 0;
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <main+0x358>)
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	6013      	str	r3, [r2, #0]
					sprintf(showf,"f = %f Hz\r\n",f);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <main+0x358>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f859 	bl	8000558 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4919      	ldr	r1, [pc, #100]	; (8001510 <main+0x360>)
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <main+0x364>)
 80014ae:	f006 fb51 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <main+0x364>)
 80014b4:	f7fe fe94 	bl	80001e0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	230a      	movs	r3, #10
 80014be:	4915      	ldr	r1, [pc, #84]	; (8001514 <main+0x364>)
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <main+0x340>)
 80014c2:	f005 f886 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <main+0x348>)
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	8013      	strh	r3, [r2, #0]
				break;
 80014cc:	f000 bd90 	b.w	8001ff0 <main+0xe40>
 80014d0:	9999999a 	.word	0x9999999a
 80014d4:	3fb99999 	.word	0x3fb99999
 80014d8:	20000568 	.word	0x20000568
 80014dc:	200006b0 	.word	0x200006b0
 80014e0:	200004e8 	.word	0x200004e8
 80014e4:	20000608 	.word	0x20000608
 80014e8:	40020000 	.word	0x40020000
 80014ec:	2000048c 	.word	0x2000048c
 80014f0:	200006f8 	.word	0x200006f8
 80014f4:	200004ac 	.word	0x200004ac
 80014f8:	200004ae 	.word	0x200004ae
 80014fc:	200004c0 	.word	0x200004c0
 8001500:	20000010 	.word	0x20000010
 8001504:	20000058 	.word	0x20000058
 8001508:	20000000 	.word	0x20000000
 800150c:	41200000 	.word	0x41200000
 8001510:	0800b038 	.word	0x0800b038
 8001514:	200004fc 	.word	0x200004fc
				else if(inputchar == 'q')  //เพิ่ม V high
 8001518:	4bab      	ldr	r3, [pc, #684]	; (80017c8 <main+0x618>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	2b71      	cmp	r3, #113	; 0x71
 8001520:	d13c      	bne.n	800159c <main+0x3ec>
					Vhigh = Vhigh + 0.1 ;
 8001522:	4baa      	ldr	r3, [pc, #680]	; (80017cc <main+0x61c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f816 	bl	8000558 <__aeabi_f2d>
 800152c:	a3a2      	add	r3, pc, #648	; (adr r3, 80017b8 <main+0x608>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7fe feb3 	bl	800029c <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb5b 	bl	8000bf8 <__aeabi_d2f>
 8001542:	4602      	mov	r2, r0
 8001544:	4ba1      	ldr	r3, [pc, #644]	; (80017cc <main+0x61c>)
 8001546:	601a      	str	r2, [r3, #0]
					if(Vhigh>3.3)
 8001548:	4ba0      	ldr	r3, [pc, #640]	; (80017cc <main+0x61c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	a39b      	add	r3, pc, #620	; (adr r3, 80017c0 <main+0x610>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff fae6 	bl	8000b28 <__aeabi_dcmpgt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <main+0x3b8>
						Vhigh = 3.3;
 8001562:	4a9a      	ldr	r2, [pc, #616]	; (80017cc <main+0x61c>)
 8001564:	4b9a      	ldr	r3, [pc, #616]	; (80017d0 <main+0x620>)
 8001566:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 8001568:	4b98      	ldr	r3, [pc, #608]	; (80017cc <main+0x61c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fff3 	bl	8000558 <__aeabi_f2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4997      	ldr	r1, [pc, #604]	; (80017d4 <main+0x624>)
 8001578:	4897      	ldr	r0, [pc, #604]	; (80017d8 <main+0x628>)
 800157a:	f006 faeb 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 800157e:	4896      	ldr	r0, [pc, #600]	; (80017d8 <main+0x628>)
 8001580:	f7fe fe2e 	bl	80001e0 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	b29a      	uxth	r2, r3
 8001588:	230a      	movs	r3, #10
 800158a:	4993      	ldr	r1, [pc, #588]	; (80017d8 <main+0x628>)
 800158c:	4893      	ldr	r0, [pc, #588]	; (80017dc <main+0x62c>)
 800158e:	f005 f820 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 8001592:	4a93      	ldr	r2, [pc, #588]	; (80017e0 <main+0x630>)
 8001594:	2332      	movs	r3, #50	; 0x32
 8001596:	8013      	strh	r3, [r2, #0]
				break;
 8001598:	f000 bd2a 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'w')  //ลด V high
 800159c:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <main+0x618>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	2b77      	cmp	r3, #119	; 0x77
 80015a4:	d138      	bne.n	8001618 <main+0x468>
					Vhigh = Vhigh - 0.1 ;
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <main+0x61c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffd4 	bl	8000558 <__aeabi_f2d>
 80015b0:	a381      	add	r3, pc, #516	; (adr r3, 80017b8 <main+0x608>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe6f 	bl	8000298 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fb19 	bl	8000bf8 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b80      	ldr	r3, [pc, #512]	; (80017cc <main+0x61c>)
 80015ca:	601a      	str	r2, [r3, #0]
					if(Vhigh<0)
 80015cc:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <main+0x61c>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d503      	bpl.n	80015e4 <main+0x434>
						Vhigh = 0;
 80015dc:	4a7b      	ldr	r2, [pc, #492]	; (80017cc <main+0x61c>)
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <main+0x61c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4978      	ldr	r1, [pc, #480]	; (80017d4 <main+0x624>)
 80015f4:	4878      	ldr	r0, [pc, #480]	; (80017d8 <main+0x628>)
 80015f6:	f006 faad 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 80015fa:	4877      	ldr	r0, [pc, #476]	; (80017d8 <main+0x628>)
 80015fc:	f7fe fdf0 	bl	80001e0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	230a      	movs	r3, #10
 8001606:	4974      	ldr	r1, [pc, #464]	; (80017d8 <main+0x628>)
 8001608:	4874      	ldr	r0, [pc, #464]	; (80017dc <main+0x62c>)
 800160a:	f004 ffe2 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 800160e:	4a74      	ldr	r2, [pc, #464]	; (80017e0 <main+0x630>)
 8001610:	2332      	movs	r3, #50	; 0x32
 8001612:	8013      	strh	r3, [r2, #0]
				break;
 8001614:	f000 bcec 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'e')  //เพิ่ม V low
 8001618:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <main+0x618>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	2b65      	cmp	r3, #101	; 0x65
 8001620:	d13c      	bne.n	800169c <main+0x4ec>
					Vlow = Vlow + 0.1 ;
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <main+0x634>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff96 	bl	8000558 <__aeabi_f2d>
 800162c:	a362      	add	r3, pc, #392	; (adr r3, 80017b8 <main+0x608>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe fe33 	bl	800029c <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fadb 	bl	8000bf8 <__aeabi_d2f>
 8001642:	4602      	mov	r2, r0
 8001644:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <main+0x634>)
 8001646:	601a      	str	r2, [r3, #0]
					if(Vlow>3.3)
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <main+0x634>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	a35b      	add	r3, pc, #364	; (adr r3, 80017c0 <main+0x610>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7ff fa66 	bl	8000b28 <__aeabi_dcmpgt>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <main+0x4b8>
						Vlow = 3.3;
 8001662:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <main+0x634>)
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <main+0x620>)
 8001666:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <main+0x634>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff73 	bl	8000558 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	495c      	ldr	r1, [pc, #368]	; (80017e8 <main+0x638>)
 8001678:	485c      	ldr	r0, [pc, #368]	; (80017ec <main+0x63c>)
 800167a:	f006 fa6b 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 800167e:	485b      	ldr	r0, [pc, #364]	; (80017ec <main+0x63c>)
 8001680:	f7fe fdae 	bl	80001e0 <strlen>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	230a      	movs	r3, #10
 800168a:	4958      	ldr	r1, [pc, #352]	; (80017ec <main+0x63c>)
 800168c:	4853      	ldr	r0, [pc, #332]	; (80017dc <main+0x62c>)
 800168e:	f004 ffa0 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 8001692:	4a53      	ldr	r2, [pc, #332]	; (80017e0 <main+0x630>)
 8001694:	2332      	movs	r3, #50	; 0x32
 8001696:	8013      	strh	r3, [r2, #0]
				break;
 8001698:	f000 bcaa 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'r')  //ลด V low
 800169c:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <main+0x618>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	2b72      	cmp	r3, #114	; 0x72
 80016a4:	d138      	bne.n	8001718 <main+0x568>
					Vlow = Vlow - 0.1 ;
 80016a6:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <main+0x634>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff54 	bl	8000558 <__aeabi_f2d>
 80016b0:	a341      	add	r3, pc, #260	; (adr r3, 80017b8 <main+0x608>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fdef 	bl	8000298 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa99 	bl	8000bf8 <__aeabi_d2f>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <main+0x634>)
 80016ca:	601a      	str	r2, [r3, #0]
					if(Vlow<0)
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <main+0x634>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d503      	bpl.n	80016e4 <main+0x534>
						Vlow = 0;
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <main+0x634>)
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <main+0x634>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	493d      	ldr	r1, [pc, #244]	; (80017e8 <main+0x638>)
 80016f4:	483d      	ldr	r0, [pc, #244]	; (80017ec <main+0x63c>)
 80016f6:	f006 fa2d 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 80016fa:	483c      	ldr	r0, [pc, #240]	; (80017ec <main+0x63c>)
 80016fc:	f7fe fd70 	bl	80001e0 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	230a      	movs	r3, #10
 8001706:	4939      	ldr	r1, [pc, #228]	; (80017ec <main+0x63c>)
 8001708:	4834      	ldr	r0, [pc, #208]	; (80017dc <main+0x62c>)
 800170a:	f004 ff62 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 800170e:	4a34      	ldr	r2, [pc, #208]	; (80017e0 <main+0x630>)
 8001710:	2332      	movs	r3, #50	; 0x32
 8001712:	8013      	strh	r3, [r2, #0]
				break;
 8001714:	f000 bc6c 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'd')  //slope up
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <main+0x618>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d111      	bne.n	8001746 <main+0x596>
					slope = 1;
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <main+0x640>)
 8001724:	2301      	movs	r3, #1
 8001726:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)SlopeUp, strlen(SlopeUp), 10);
 8001728:	4832      	ldr	r0, [pc, #200]	; (80017f4 <main+0x644>)
 800172a:	f7fe fd59 	bl	80001e0 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	230a      	movs	r3, #10
 8001734:	492f      	ldr	r1, [pc, #188]	; (80017f4 <main+0x644>)
 8001736:	4829      	ldr	r0, [pc, #164]	; (80017dc <main+0x62c>)
 8001738:	f004 ff4b 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <main+0x630>)
 800173e:	2332      	movs	r3, #50	; 0x32
 8001740:	8013      	strh	r3, [r2, #0]
				break;
 8001742:	f000 bc55 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'f')  //slope down
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <main+0x618>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	2b66      	cmp	r3, #102	; 0x66
 800174e:	d112      	bne.n	8001776 <main+0x5c6>
					slope = -1;
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <main+0x640>)
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)SlopeDown, strlen(SlopeDown), 10);
 8001758:	4827      	ldr	r0, [pc, #156]	; (80017f8 <main+0x648>)
 800175a:	f7fe fd41 	bl	80001e0 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	230a      	movs	r3, #10
 8001764:	4924      	ldr	r1, [pc, #144]	; (80017f8 <main+0x648>)
 8001766:	481d      	ldr	r0, [pc, #116]	; (80017dc <main+0x62c>)
 8001768:	f004 ff33 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSawtooth;
 800176c:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <main+0x630>)
 800176e:	2332      	movs	r3, #50	; 0x32
 8001770:	8013      	strh	r3, [r2, #0]
				break;
 8001772:	f000 bc3d 	b.w	8001ff0 <main+0xe40>
				else if(inputchar == 'x')
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <main+0x618>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	2b78      	cmp	r3, #120	; 0x78
 800177e:	d104      	bne.n	800178a <main+0x5da>
					state = state_start;
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <main+0x630>)
 8001782:	2300      	movs	r3, #0
 8001784:	8013      	strh	r3, [r2, #0]
				break;
 8001786:	f000 bc33 	b.w	8001ff0 <main+0xe40>
					state = state_functionSawtooth;
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <main+0x630>)
 800178c:	2332      	movs	r3, #50	; 0x32
 800178e:	8013      	strh	r3, [r2, #0]
				break;
 8001790:	f000 bc2e 	b.w	8001ff0 <main+0xe40>
//								"press q: +V high\r\n "
//								"press w: -V high\r\n "
//								"press e: +V low \r\n "
//								"press r: -V low\r\n "
//								"press x: back\r\n\r\n ";
				HAL_UART_Transmit(&huart2, (uint8_t*)SineMenu, strlen(SineMenu),100);
 8001794:	4819      	ldr	r0, [pc, #100]	; (80017fc <main+0x64c>)
 8001796:	f7fe fd23 	bl	80001e0 <strlen>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <main+0x64c>)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <main+0x62c>)
 80017a4:	f004 ff15 	bl	80065d2 <HAL_UART_Transmit>
				state = state_functionSine;
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <main+0x630>)
 80017aa:	233c      	movs	r3, #60	; 0x3c
 80017ac:	8013      	strh	r3, [r2, #0]
				break;
 80017ae:	f000 bc1f 	b.w	8001ff0 <main+0xe40>
 80017b2:	bf00      	nop
 80017b4:	f3af 8000 	nop.w
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fb99999 	.word	0x3fb99999
 80017c0:	66666666 	.word	0x66666666
 80017c4:	400a6666 	.word	0x400a6666
 80017c8:	200004ac 	.word	0x200004ac
 80017cc:	20000004 	.word	0x20000004
 80017d0:	40533333 	.word	0x40533333
 80017d4:	0800b044 	.word	0x0800b044
 80017d8:	20000508 	.word	0x20000508
 80017dc:	200006f8 	.word	0x200006f8
 80017e0:	200004ae 	.word	0x200004ae
 80017e4:	200004b4 	.word	0x200004b4
 80017e8:	0800b058 	.word	0x0800b058
 80017ec:	2000051c 	.word	0x2000051c
 80017f0:	200004b8 	.word	0x200004b8
 80017f4:	20000278 	.word	0x20000278
 80017f8:	20000284 	.word	0x20000284
 80017fc:	2000011c 	.word	0x2000011c
			case state_functionSine:
				wave = 2;
 8001800:	4aa3      	ldr	r2, [pc, #652]	; (8001a90 <main+0x8e0>)
 8001802:	2302      	movs	r3, #2
 8001804:	6013      	str	r3, [r2, #0]
				if (inputchar == 'a') //เพิ่มความถี่
 8001806:	4ba3      	ldr	r3, [pc, #652]	; (8001a94 <main+0x8e4>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	2b61      	cmp	r3, #97	; 0x61
 800180e:	d138      	bne.n	8001882 <main+0x6d2>
				{
					f = f + 0.1;
 8001810:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <main+0x8e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe9f 	bl	8000558 <__aeabi_f2d>
 800181a:	a399      	add	r3, pc, #612	; (adr r3, 8001a80 <main+0x8d0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fd3c 	bl	800029c <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f9e4 	bl	8000bf8 <__aeabi_d2f>
 8001830:	4602      	mov	r2, r0
 8001832:	4b99      	ldr	r3, [pc, #612]	; (8001a98 <main+0x8e8>)
 8001834:	601a      	str	r2, [r3, #0]
					if(f>10)
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <main+0x8e8>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001848:	dd02      	ble.n	8001850 <main+0x6a0>
					{
						f = 10;
 800184a:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <main+0x8e8>)
 800184c:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <main+0x8ec>)
 800184e:	6013      	str	r3, [r2, #0]
					}
					sprintf(showf,"f = %f Hz\r\n",f);
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <main+0x8e8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe7f 	bl	8000558 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4990      	ldr	r1, [pc, #576]	; (8001aa0 <main+0x8f0>)
 8001860:	4890      	ldr	r0, [pc, #576]	; (8001aa4 <main+0x8f4>)
 8001862:	f006 f977 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 8001866:	488f      	ldr	r0, [pc, #572]	; (8001aa4 <main+0x8f4>)
 8001868:	f7fe fcba 	bl	80001e0 <strlen>
 800186c:	4603      	mov	r3, r0
 800186e:	b29a      	uxth	r2, r3
 8001870:	230a      	movs	r3, #10
 8001872:	498c      	ldr	r1, [pc, #560]	; (8001aa4 <main+0x8f4>)
 8001874:	488c      	ldr	r0, [pc, #560]	; (8001aa8 <main+0x8f8>)
 8001876:	f004 feac 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 800187a:	4a8c      	ldr	r2, [pc, #560]	; (8001aac <main+0x8fc>)
 800187c:	233c      	movs	r3, #60	; 0x3c
 800187e:	8013      	strh	r3, [r2, #0]
				}
				else
				{
					state =state_functionSine;
				}
				break;
 8001880:	e3b6      	b.n	8001ff0 <main+0xe40>
				else if(inputchar == 's')  //ลดความถี่
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <main+0x8e4>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	2b73      	cmp	r3, #115	; 0x73
 800188a:	d137      	bne.n	80018fc <main+0x74c>
					f = f - 0.1;
 800188c:	4b82      	ldr	r3, [pc, #520]	; (8001a98 <main+0x8e8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe61 	bl	8000558 <__aeabi_f2d>
 8001896:	a37a      	add	r3, pc, #488	; (adr r3, 8001a80 <main+0x8d0>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fcfc 	bl	8000298 <__aeabi_dsub>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f9a6 	bl	8000bf8 <__aeabi_d2f>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <main+0x8e8>)
 80018b0:	601a      	str	r2, [r3, #0]
					if(f<0)
 80018b2:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <main+0x8e8>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d503      	bpl.n	80018ca <main+0x71a>
						f = 0;
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <main+0x8e8>)
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	6013      	str	r3, [r2, #0]
					sprintf(showf,"f = %f Hz\r\n",f);
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <main+0x8e8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe42 	bl	8000558 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4971      	ldr	r1, [pc, #452]	; (8001aa0 <main+0x8f0>)
 80018da:	4872      	ldr	r0, [pc, #456]	; (8001aa4 <main+0x8f4>)
 80018dc:	f006 f93a 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 80018e0:	4870      	ldr	r0, [pc, #448]	; (8001aa4 <main+0x8f4>)
 80018e2:	f7fe fc7d 	bl	80001e0 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	230a      	movs	r3, #10
 80018ec:	496d      	ldr	r1, [pc, #436]	; (8001aa4 <main+0x8f4>)
 80018ee:	486e      	ldr	r0, [pc, #440]	; (8001aa8 <main+0x8f8>)
 80018f0:	f004 fe6f 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 80018f4:	4a6d      	ldr	r2, [pc, #436]	; (8001aac <main+0x8fc>)
 80018f6:	233c      	movs	r3, #60	; 0x3c
 80018f8:	8013      	strh	r3, [r2, #0]
				break;
 80018fa:	e379      	b.n	8001ff0 <main+0xe40>
				else if(inputchar == 'q')  //เพิ่ม V high
 80018fc:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <main+0x8e4>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	2b71      	cmp	r3, #113	; 0x71
 8001904:	d13b      	bne.n	800197e <main+0x7ce>
					Vhigh = Vhigh + 0.1 ;
 8001906:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <main+0x900>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe24 	bl	8000558 <__aeabi_f2d>
 8001910:	a35b      	add	r3, pc, #364	; (adr r3, 8001a80 <main+0x8d0>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fcc1 	bl	800029c <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f969 	bl	8000bf8 <__aeabi_d2f>
 8001926:	4602      	mov	r2, r0
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <main+0x900>)
 800192a:	601a      	str	r2, [r3, #0]
					if(Vhigh>3.3)
 800192c:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <main+0x900>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe11 	bl	8000558 <__aeabi_f2d>
 8001936:	a354      	add	r3, pc, #336	; (adr r3, 8001a88 <main+0x8d8>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7ff f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <main+0x79c>
						Vhigh = 3.3;
 8001946:	4a5a      	ldr	r2, [pc, #360]	; (8001ab0 <main+0x900>)
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <main+0x904>)
 800194a:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 800194c:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <main+0x900>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe01 	bl	8000558 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4957      	ldr	r1, [pc, #348]	; (8001ab8 <main+0x908>)
 800195c:	4857      	ldr	r0, [pc, #348]	; (8001abc <main+0x90c>)
 800195e:	f006 f8f9 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 8001962:	4856      	ldr	r0, [pc, #344]	; (8001abc <main+0x90c>)
 8001964:	f7fe fc3c 	bl	80001e0 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	230a      	movs	r3, #10
 800196e:	4953      	ldr	r1, [pc, #332]	; (8001abc <main+0x90c>)
 8001970:	484d      	ldr	r0, [pc, #308]	; (8001aa8 <main+0x8f8>)
 8001972:	f004 fe2e 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <main+0x8fc>)
 8001978:	233c      	movs	r3, #60	; 0x3c
 800197a:	8013      	strh	r3, [r2, #0]
				break;
 800197c:	e338      	b.n	8001ff0 <main+0xe40>
				else if(inputchar == 'w')  //ลด V high
 800197e:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <main+0x8e4>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	2b77      	cmp	r3, #119	; 0x77
 8001986:	d137      	bne.n	80019f8 <main+0x848>
					Vhigh = Vhigh - 0.1 ;
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <main+0x900>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	a33b      	add	r3, pc, #236	; (adr r3, 8001a80 <main+0x8d0>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fc7e 	bl	8000298 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f928 	bl	8000bf8 <__aeabi_d2f>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <main+0x900>)
 80019ac:	601a      	str	r2, [r3, #0]
					if(Vhigh<0)
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <main+0x900>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d503      	bpl.n	80019c6 <main+0x816>
						Vhigh = 0;
 80019be:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <main+0x900>)
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <main+0x900>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdc4 	bl	8000558 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4938      	ldr	r1, [pc, #224]	; (8001ab8 <main+0x908>)
 80019d6:	4839      	ldr	r0, [pc, #228]	; (8001abc <main+0x90c>)
 80019d8:	f006 f8bc 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 80019dc:	4837      	ldr	r0, [pc, #220]	; (8001abc <main+0x90c>)
 80019de:	f7fe fbff 	bl	80001e0 <strlen>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	230a      	movs	r3, #10
 80019e8:	4934      	ldr	r1, [pc, #208]	; (8001abc <main+0x90c>)
 80019ea:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <main+0x8f8>)
 80019ec:	f004 fdf1 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 80019f0:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <main+0x8fc>)
 80019f2:	233c      	movs	r3, #60	; 0x3c
 80019f4:	8013      	strh	r3, [r2, #0]
				break;
 80019f6:	e2fb      	b.n	8001ff0 <main+0xe40>
				else if(inputchar == 'e')  //เพิ่ม V low
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <main+0x8e4>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	2b65      	cmp	r3, #101	; 0x65
 8001a00:	d164      	bne.n	8001acc <main+0x91c>
					Vlow = Vlow + 0.1 ;
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <main+0x910>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	a31c      	add	r3, pc, #112	; (adr r3, 8001a80 <main+0x8d0>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fc43 	bl	800029c <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8eb 	bl	8000bf8 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <main+0x910>)
 8001a26:	601a      	str	r2, [r3, #0]
					if(Vlow>3.3)
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <main+0x910>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd93 	bl	8000558 <__aeabi_f2d>
 8001a32:	a315      	add	r3, pc, #84	; (adr r3, 8001a88 <main+0x8d8>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7ff f876 	bl	8000b28 <__aeabi_dcmpgt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <main+0x898>
						Vlow = 3.3;
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <main+0x910>)
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <main+0x904>)
 8001a46:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <main+0x910>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd83 	bl	8000558 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <main+0x914>)
 8001a58:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <main+0x918>)
 8001a5a:	f006 f87b 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 8001a5e:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <main+0x918>)
 8001a60:	f7fe fbbe 	bl	80001e0 <strlen>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	230a      	movs	r3, #10
 8001a6a:	4917      	ldr	r1, [pc, #92]	; (8001ac8 <main+0x918>)
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <main+0x8f8>)
 8001a6e:	f004 fdb0 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <main+0x8fc>)
 8001a74:	233c      	movs	r3, #60	; 0x3c
 8001a76:	8013      	strh	r3, [r2, #0]
				break;
 8001a78:	e2ba      	b.n	8001ff0 <main+0xe40>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fb99999 	.word	0x3fb99999
 8001a88:	66666666 	.word	0x66666666
 8001a8c:	400a6666 	.word	0x400a6666
 8001a90:	200004c0 	.word	0x200004c0
 8001a94:	200004ac 	.word	0x200004ac
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	41200000 	.word	0x41200000
 8001aa0:	0800b038 	.word	0x0800b038
 8001aa4:	200004fc 	.word	0x200004fc
 8001aa8:	200006f8 	.word	0x200006f8
 8001aac:	200004ae 	.word	0x200004ae
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	40533333 	.word	0x40533333
 8001ab8:	0800b044 	.word	0x0800b044
 8001abc:	20000508 	.word	0x20000508
 8001ac0:	200004b4 	.word	0x200004b4
 8001ac4:	0800b058 	.word	0x0800b058
 8001ac8:	2000051c 	.word	0x2000051c
				else if(inputchar == 'r')  //ลด V low
 8001acc:	4bae      	ldr	r3, [pc, #696]	; (8001d88 <main+0xbd8>)
 8001ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad2:	2b72      	cmp	r3, #114	; 0x72
 8001ad4:	d137      	bne.n	8001b46 <main+0x996>
					Vlow = Vlow - 0.1 ;
 8001ad6:	4bad      	ldr	r3, [pc, #692]	; (8001d8c <main+0xbdc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3c 	bl	8000558 <__aeabi_f2d>
 8001ae0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001d78 <main+0xbc8>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f7fe fbd7 	bl	8000298 <__aeabi_dsub>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f881 	bl	8000bf8 <__aeabi_d2f>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4ba4      	ldr	r3, [pc, #656]	; (8001d8c <main+0xbdc>)
 8001afa:	601a      	str	r2, [r3, #0]
					if(Vlow<0)
 8001afc:	4ba3      	ldr	r3, [pc, #652]	; (8001d8c <main+0xbdc>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d503      	bpl.n	8001b14 <main+0x964>
						Vlow = 0;
 8001b0c:	4a9f      	ldr	r2, [pc, #636]	; (8001d8c <main+0xbdc>)
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 8001b14:	4b9d      	ldr	r3, [pc, #628]	; (8001d8c <main+0xbdc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd1d 	bl	8000558 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	499b      	ldr	r1, [pc, #620]	; (8001d90 <main+0xbe0>)
 8001b24:	489b      	ldr	r0, [pc, #620]	; (8001d94 <main+0xbe4>)
 8001b26:	f006 f815 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 8001b2a:	489a      	ldr	r0, [pc, #616]	; (8001d94 <main+0xbe4>)
 8001b2c:	f7fe fb58 	bl	80001e0 <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	230a      	movs	r3, #10
 8001b36:	4997      	ldr	r1, [pc, #604]	; (8001d94 <main+0xbe4>)
 8001b38:	4897      	ldr	r0, [pc, #604]	; (8001d98 <main+0xbe8>)
 8001b3a:	f004 fd4a 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSine;
 8001b3e:	4a97      	ldr	r2, [pc, #604]	; (8001d9c <main+0xbec>)
 8001b40:	233c      	movs	r3, #60	; 0x3c
 8001b42:	8013      	strh	r3, [r2, #0]
				break;
 8001b44:	e254      	b.n	8001ff0 <main+0xe40>
				else if(inputchar == 'x')  //ย้อน�?ลับไป menu
 8001b46:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <main+0xbd8>)
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	2b78      	cmp	r3, #120	; 0x78
 8001b4e:	d103      	bne.n	8001b58 <main+0x9a8>
					state = state_start;
 8001b50:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <main+0xbec>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	8013      	strh	r3, [r2, #0]
				break;
 8001b56:	e24b      	b.n	8001ff0 <main+0xe40>
					state =state_functionSine;
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <main+0xbec>)
 8001b5a:	233c      	movs	r3, #60	; 0x3c
 8001b5c:	8013      	strh	r3, [r2, #0]
				break;
 8001b5e:	e247      	b.n	8001ff0 <main+0xe40>
//								  "press e: +V low \r\n "
//								  "press r: -V low\r\n "
//								  "press d: +Duty_cyccle\r\n "
//								  "press f: -Duty_cyccle\r\n "
//								  "press x: back\r\n ";
				HAL_UART_Transmit(&huart2, (uint8_t*)SquareMenu, strlen(SquareMenu),100);
 8001b60:	488f      	ldr	r0, [pc, #572]	; (8001da0 <main+0xbf0>)
 8001b62:	f7fe fb3d 	bl	80001e0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	498c      	ldr	r1, [pc, #560]	; (8001da0 <main+0xbf0>)
 8001b6e:	488a      	ldr	r0, [pc, #552]	; (8001d98 <main+0xbe8>)
 8001b70:	f004 fd2f 	bl	80065d2 <HAL_UART_Transmit>
				state = state_functionSquare;
 8001b74:	4a89      	ldr	r2, [pc, #548]	; (8001d9c <main+0xbec>)
 8001b76:	2346      	movs	r3, #70	; 0x46
 8001b78:	8013      	strh	r3, [r2, #0]
				break;
 8001b7a:	e239      	b.n	8001ff0 <main+0xe40>
			case state_functionSquare:
				wave = 3;
 8001b7c:	4a89      	ldr	r2, [pc, #548]	; (8001da4 <main+0xbf4>)
 8001b7e:	2303      	movs	r3, #3
 8001b80:	6013      	str	r3, [r2, #0]
				if (inputchar == 'a')  //เพิ่มความถี่
 8001b82:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <main+0xbd8>)
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	2b61      	cmp	r3, #97	; 0x61
 8001b8a:	d138      	bne.n	8001bfe <main+0xa4e>
				{
					f = f + 0.1;
 8001b8c:	4b86      	ldr	r3, [pc, #536]	; (8001da8 <main+0xbf8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fce1 	bl	8000558 <__aeabi_f2d>
 8001b96:	a378      	add	r3, pc, #480	; (adr r3, 8001d78 <main+0xbc8>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fb7e 	bl	800029c <__adddf3>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff f826 	bl	8000bf8 <__aeabi_d2f>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b7e      	ldr	r3, [pc, #504]	; (8001da8 <main+0xbf8>)
 8001bb0:	601a      	str	r2, [r3, #0]
					if(f>10)
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <main+0xbf8>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	dd02      	ble.n	8001bcc <main+0xa1c>
					{
						f = 10;
 8001bc6:	4a78      	ldr	r2, [pc, #480]	; (8001da8 <main+0xbf8>)
 8001bc8:	4b78      	ldr	r3, [pc, #480]	; (8001dac <main+0xbfc>)
 8001bca:	6013      	str	r3, [r2, #0]
					}
					sprintf(showf,"f = %f Hz\r\n",f);
 8001bcc:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <main+0xbf8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc1 	bl	8000558 <__aeabi_f2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4975      	ldr	r1, [pc, #468]	; (8001db0 <main+0xc00>)
 8001bdc:	4875      	ldr	r0, [pc, #468]	; (8001db4 <main+0xc04>)
 8001bde:	f005 ffb9 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 8001be2:	4874      	ldr	r0, [pc, #464]	; (8001db4 <main+0xc04>)
 8001be4:	f7fe fafc 	bl	80001e0 <strlen>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	230a      	movs	r3, #10
 8001bee:	4971      	ldr	r1, [pc, #452]	; (8001db4 <main+0xc04>)
 8001bf0:	4869      	ldr	r0, [pc, #420]	; (8001d98 <main+0xbe8>)
 8001bf2:	f004 fcee 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001bf6:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <main+0xbec>)
 8001bf8:	2346      	movs	r3, #70	; 0x46
 8001bfa:	8013      	strh	r3, [r2, #0]
				}
				else
				{
					state = state_functionSquare;
				}
				break;
 8001bfc:	e1f7      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 's')  //ลดความถี่
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <main+0xbd8>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	2b73      	cmp	r3, #115	; 0x73
 8001c06:	d137      	bne.n	8001c78 <main+0xac8>
					f = f - 0.1;
 8001c08:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <main+0xbf8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fca3 	bl	8000558 <__aeabi_f2d>
 8001c12:	a359      	add	r3, pc, #356	; (adr r3, 8001d78 <main+0xbc8>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fb3e 	bl	8000298 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ffe8 	bl	8000bf8 <__aeabi_d2f>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <main+0xbf8>)
 8001c2c:	601a      	str	r2, [r3, #0]
					if(f<0)
 8001c2e:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <main+0xbf8>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d503      	bpl.n	8001c46 <main+0xa96>
						f = 0;
 8001c3e:	4a5a      	ldr	r2, [pc, #360]	; (8001da8 <main+0xbf8>)
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	6013      	str	r3, [r2, #0]
					sprintf(showf,"f = %f Hz\r\n",f);
 8001c46:	4b58      	ldr	r3, [pc, #352]	; (8001da8 <main+0xbf8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4956      	ldr	r1, [pc, #344]	; (8001db0 <main+0xc00>)
 8001c56:	4857      	ldr	r0, [pc, #348]	; (8001db4 <main+0xc04>)
 8001c58:	f005 ff7c 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showf, strlen(showf), 10);
 8001c5c:	4855      	ldr	r0, [pc, #340]	; (8001db4 <main+0xc04>)
 8001c5e:	f7fe fabf 	bl	80001e0 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	230a      	movs	r3, #10
 8001c68:	4952      	ldr	r1, [pc, #328]	; (8001db4 <main+0xc04>)
 8001c6a:	484b      	ldr	r0, [pc, #300]	; (8001d98 <main+0xbe8>)
 8001c6c:	f004 fcb1 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <main+0xbec>)
 8001c72:	2346      	movs	r3, #70	; 0x46
 8001c74:	8013      	strh	r3, [r2, #0]
				break;
 8001c76:	e1ba      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'q')  //เพิ่ม V high
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <main+0xbd8>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	2b71      	cmp	r3, #113	; 0x71
 8001c80:	d13b      	bne.n	8001cfa <main+0xb4a>
					Vhigh = Vhigh + 0.1 ;
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <main+0xc08>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc66 	bl	8000558 <__aeabi_f2d>
 8001c8c:	a33a      	add	r3, pc, #232	; (adr r3, 8001d78 <main+0xbc8>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fb03 	bl	800029c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ffab 	bl	8000bf8 <__aeabi_d2f>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <main+0xc08>)
 8001ca6:	601a      	str	r2, [r3, #0]
					if(Vhigh>3.3)
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <main+0xc08>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc53 	bl	8000558 <__aeabi_f2d>
 8001cb2:	a333      	add	r3, pc, #204	; (adr r3, 8001d80 <main+0xbd0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <main+0xb18>
						Vhigh = 3.3;
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <main+0xc08>)
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <main+0xc0c>)
 8001cc6:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <main+0xc08>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	493a      	ldr	r1, [pc, #232]	; (8001dc0 <main+0xc10>)
 8001cd8:	483a      	ldr	r0, [pc, #232]	; (8001dc4 <main+0xc14>)
 8001cda:	f005 ff3b 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 8001cde:	4839      	ldr	r0, [pc, #228]	; (8001dc4 <main+0xc14>)
 8001ce0:	f7fe fa7e 	bl	80001e0 <strlen>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	230a      	movs	r3, #10
 8001cea:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <main+0xc14>)
 8001cec:	482a      	ldr	r0, [pc, #168]	; (8001d98 <main+0xbe8>)
 8001cee:	f004 fc70 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <main+0xbec>)
 8001cf4:	2346      	movs	r3, #70	; 0x46
 8001cf6:	8013      	strh	r3, [r2, #0]
				break;
 8001cf8:	e179      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'w')  //ลด V high
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <main+0xbd8>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	2b77      	cmp	r3, #119	; 0x77
 8001d02:	d161      	bne.n	8001dc8 <main+0xc18>
					Vhigh = Vhigh - 0.1 ;
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <main+0xc08>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc25 	bl	8000558 <__aeabi_f2d>
 8001d0e:	a31a      	add	r3, pc, #104	; (adr r3, 8001d78 <main+0xbc8>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fac0 	bl	8000298 <__aeabi_dsub>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff6a 	bl	8000bf8 <__aeabi_d2f>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <main+0xc08>)
 8001d28:	601a      	str	r2, [r3, #0]
					if(Vhigh<0)
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <main+0xc08>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d503      	bpl.n	8001d42 <main+0xb92>
						Vhigh = 0;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <main+0xc08>)
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	6013      	str	r3, [r2, #0]
					sprintf(showVH,"Vhigh = %f Volt\r\n",Vhigh);
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <main+0xc08>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc06 	bl	8000558 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <main+0xc10>)
 8001d52:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <main+0xc14>)
 8001d54:	f005 fefe 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVH, strlen(showVH), 10);
 8001d58:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <main+0xc14>)
 8001d5a:	f7fe fa41 	bl	80001e0 <strlen>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	230a      	movs	r3, #10
 8001d64:	4917      	ldr	r1, [pc, #92]	; (8001dc4 <main+0xc14>)
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <main+0xbe8>)
 8001d68:	f004 fc33 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <main+0xbec>)
 8001d6e:	2346      	movs	r3, #70	; 0x46
 8001d70:	8013      	strh	r3, [r2, #0]
				break;
 8001d72:	e13c      	b.n	8001fee <main+0xe3e>
 8001d74:	f3af 8000 	nop.w
 8001d78:	9999999a 	.word	0x9999999a
 8001d7c:	3fb99999 	.word	0x3fb99999
 8001d80:	66666666 	.word	0x66666666
 8001d84:	400a6666 	.word	0x400a6666
 8001d88:	200004ac 	.word	0x200004ac
 8001d8c:	200004b4 	.word	0x200004b4
 8001d90:	0800b058 	.word	0x0800b058
 8001d94:	2000051c 	.word	0x2000051c
 8001d98:	200006f8 	.word	0x200006f8
 8001d9c:	200004ae 	.word	0x200004ae
 8001da0:	200001b0 	.word	0x200001b0
 8001da4:	200004c0 	.word	0x200004c0
 8001da8:	20000000 	.word	0x20000000
 8001dac:	41200000 	.word	0x41200000
 8001db0:	0800b038 	.word	0x0800b038
 8001db4:	200004fc 	.word	0x200004fc
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	40533333 	.word	0x40533333
 8001dc0:	0800b044 	.word	0x0800b044
 8001dc4:	20000508 	.word	0x20000508
				else if(inputchar == 'e')  //เพิ่ม V low
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <main+0xe08>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	2b65      	cmp	r3, #101	; 0x65
 8001dd0:	d13b      	bne.n	8001e4a <main+0xc9a>
					Vlow = Vlow + 0.1 ;
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <main+0xe0c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbbe 	bl	8000558 <__aeabi_f2d>
 8001ddc:	a372      	add	r3, pc, #456	; (adr r3, 8001fa8 <main+0xdf8>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fa5b 	bl	800029c <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe ff03 	bl	8000bf8 <__aeabi_d2f>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <main+0xe0c>)
 8001df6:	601a      	str	r2, [r3, #0]
					if(Vlow>3.3)
 8001df8:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <main+0xe0c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fbab 	bl	8000558 <__aeabi_f2d>
 8001e02:	a36b      	add	r3, pc, #428	; (adr r3, 8001fb0 <main+0xe00>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fe8e 	bl	8000b28 <__aeabi_dcmpgt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <main+0xc68>
						Vlow = 3.3;
 8001e12:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <main+0xe0c>)
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <main+0xe10>)
 8001e16:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <main+0xe0c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb9b 	bl	8000558 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4967      	ldr	r1, [pc, #412]	; (8001fc4 <main+0xe14>)
 8001e28:	4867      	ldr	r0, [pc, #412]	; (8001fc8 <main+0xe18>)
 8001e2a:	f005 fe93 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 8001e2e:	4866      	ldr	r0, [pc, #408]	; (8001fc8 <main+0xe18>)
 8001e30:	f7fe f9d6 	bl	80001e0 <strlen>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	230a      	movs	r3, #10
 8001e3a:	4963      	ldr	r1, [pc, #396]	; (8001fc8 <main+0xe18>)
 8001e3c:	4863      	ldr	r0, [pc, #396]	; (8001fcc <main+0xe1c>)
 8001e3e:	f004 fbc8 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001e42:	4a63      	ldr	r2, [pc, #396]	; (8001fd0 <main+0xe20>)
 8001e44:	2346      	movs	r3, #70	; 0x46
 8001e46:	8013      	strh	r3, [r2, #0]
				break;
 8001e48:	e0d1      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'r')  //ลด V low
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <main+0xe08>)
 8001e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e50:	2b72      	cmp	r3, #114	; 0x72
 8001e52:	d137      	bne.n	8001ec4 <main+0xd14>
					Vlow = Vlow - 0.1 ;
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <main+0xe0c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb7d 	bl	8000558 <__aeabi_f2d>
 8001e5e:	a352      	add	r3, pc, #328	; (adr r3, 8001fa8 <main+0xdf8>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fa18 	bl	8000298 <__aeabi_dsub>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fec2 	bl	8000bf8 <__aeabi_d2f>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <main+0xe0c>)
 8001e78:	601a      	str	r2, [r3, #0]
					if(Vlow<0)
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <main+0xe0c>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d503      	bpl.n	8001e92 <main+0xce2>
						Vlow = 0;
 8001e8a:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <main+0xe0c>)
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	6013      	str	r3, [r2, #0]
					sprintf(showVL,"VLow = %f Volt\r\n",Vlow);
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <main+0xe0c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb5e 	bl	8000558 <__aeabi_f2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4948      	ldr	r1, [pc, #288]	; (8001fc4 <main+0xe14>)
 8001ea2:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <main+0xe18>)
 8001ea4:	f005 fe56 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showVL, strlen(showVL), 10);
 8001ea8:	4847      	ldr	r0, [pc, #284]	; (8001fc8 <main+0xe18>)
 8001eaa:	f7fe f999 	bl	80001e0 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	4944      	ldr	r1, [pc, #272]	; (8001fc8 <main+0xe18>)
 8001eb6:	4845      	ldr	r0, [pc, #276]	; (8001fcc <main+0xe1c>)
 8001eb8:	f004 fb8b 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001ebc:	4a44      	ldr	r2, [pc, #272]	; (8001fd0 <main+0xe20>)
 8001ebe:	2346      	movs	r3, #70	; 0x46
 8001ec0:	8013      	strh	r3, [r2, #0]
				break;
 8001ec2:	e094      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'd')  //เพิ่ม Duty cycle
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <main+0xe08>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d12f      	bne.n	8001f2e <main+0xd7e>
					Duty_cycle = Duty_cycle + 10;
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <main+0xe24>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001edc:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <main+0xe24>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
					if(Duty_cycle > 100)
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <main+0xe24>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001fd8 <main+0xe28>
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd02      	ble.n	8001efc <main+0xd4c>
						Duty_cycle = 100;
 8001ef6:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <main+0xe24>)
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <main+0xe2c>)
 8001efa:	6013      	str	r3, [r2, #0]
					sprintf(showDutyCycle,"DutyCycle = %f Percent\r\n",Duty_cycle);
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <main+0xe24>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb29 	bl	8000558 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <main+0xe30>)
 8001f0c:	4835      	ldr	r0, [pc, #212]	; (8001fe4 <main+0xe34>)
 8001f0e:	f005 fe21 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showDutyCycle, strlen(showDutyCycle), 10);
 8001f12:	4834      	ldr	r0, [pc, #208]	; (8001fe4 <main+0xe34>)
 8001f14:	f7fe f964 	bl	80001e0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	4931      	ldr	r1, [pc, #196]	; (8001fe4 <main+0xe34>)
 8001f20:	482a      	ldr	r0, [pc, #168]	; (8001fcc <main+0xe1c>)
 8001f22:	f004 fb56 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001f26:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <main+0xe20>)
 8001f28:	2346      	movs	r3, #70	; 0x46
 8001f2a:	8013      	strh	r3, [r2, #0]
				break;
 8001f2c:	e05f      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'f')  //ลด Duty cycle
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <main+0xe08>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	2b66      	cmp	r3, #102	; 0x66
 8001f36:	d12e      	bne.n	8001f96 <main+0xde6>
					Duty_cycle = Duty_cycle - 10;
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <main+0xe24>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <main+0xe24>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
					if(Duty_cycle < 0)
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <main+0xe24>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5a:	d503      	bpl.n	8001f64 <main+0xdb4>
						Duty_cycle = 0;
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <main+0xe24>)
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	6013      	str	r3, [r2, #0]
					sprintf(showDutyCycle,"DutyCycle = %f Percent\r\n",Duty_cycle);
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <main+0xe24>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe faf5 	bl	8000558 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <main+0xe30>)
 8001f74:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <main+0xe34>)
 8001f76:	f005 fded 	bl	8007b54 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)showDutyCycle, strlen(showDutyCycle), 10);
 8001f7a:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <main+0xe34>)
 8001f7c:	f7fe f930 	bl	80001e0 <strlen>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	230a      	movs	r3, #10
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <main+0xe34>)
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <main+0xe1c>)
 8001f8a:	f004 fb22 	bl	80065d2 <HAL_UART_Transmit>
					state = state_functionSquare;
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <main+0xe20>)
 8001f90:	2346      	movs	r3, #70	; 0x46
 8001f92:	8013      	strh	r3, [r2, #0]
				break;
 8001f94:	e02b      	b.n	8001fee <main+0xe3e>
				else if(inputchar == 'x')  //�?ลับไปที่ menu
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <main+0xe08>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	2b78      	cmp	r3, #120	; 0x78
 8001f9e:	d123      	bne.n	8001fe8 <main+0xe38>
					state = state_start;
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <main+0xe20>)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	8013      	strh	r3, [r2, #0]
				break;
 8001fa6:	e022      	b.n	8001fee <main+0xe3e>
 8001fa8:	9999999a 	.word	0x9999999a
 8001fac:	3fb99999 	.word	0x3fb99999
 8001fb0:	66666666 	.word	0x66666666
 8001fb4:	400a6666 	.word	0x400a6666
 8001fb8:	200004ac 	.word	0x200004ac
 8001fbc:	200004b4 	.word	0x200004b4
 8001fc0:	40533333 	.word	0x40533333
 8001fc4:	0800b058 	.word	0x0800b058
 8001fc8:	2000051c 	.word	0x2000051c
 8001fcc:	200006f8 	.word	0x200006f8
 8001fd0:	200004ae 	.word	0x200004ae
 8001fd4:	200004bc 	.word	0x200004bc
 8001fd8:	42c80000 	.word	0x42c80000
 8001fdc:	42c80000 	.word	0x42c80000
 8001fe0:	0800b06c 	.word	0x0800b06c
 8001fe4:	20000530 	.word	0x20000530
					state = state_functionSquare;
 8001fe8:	4aad      	ldr	r2, [pc, #692]	; (80022a0 <main+0x10f0>)
 8001fea:	2346      	movs	r3, #70	; 0x46
 8001fec:	8013      	strh	r3, [r2, #0]
				break;
 8001fee:	bf00      	nop
		}
		if (micros() - timestamp > 100) //10k Hz
 8001ff0:	f000 fe2a 	bl	8002c48 <micros>
 8001ff4:	4bab      	ldr	r3, [pc, #684]	; (80022a4 <main+0x10f4>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	ebb0 0a02 	subs.w	sl, r0, r2
 8001ffe:	eb61 0b03 	sbc.w	fp, r1, r3
 8002002:	f1bb 0f00 	cmp.w	fp, #0
 8002006:	bf08      	it	eq
 8002008:	f1ba 0f65 	cmpeq.w	sl, #101	; 0x65
 800200c:	f4ff a8f7 	bcc.w	80011fe <main+0x4e>
		{
			timestamp = micros();
 8002010:	f000 fe1a 	bl	8002c48 <micros>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	49a2      	ldr	r1, [pc, #648]	; (80022a4 <main+0x10f4>)
 800201a:	e9c1 2300 	strd	r2, r3, [r1]
			if(wave == 1) //sawtooth
 800201e:	4ba2      	ldr	r3, [pc, #648]	; (80022a8 <main+0x10f8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 815a 	bne.w	80022dc <main+0x112c>
			{
				if(slope == 1)  //slope up
 8002028:	4ba0      	ldr	r3, [pc, #640]	; (80022ac <main+0x10fc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 809b 	bne.w	8002168 <main+0xfb8>
				{
					T = 1/f;
 8002032:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <main+0x1100>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <main+0x1104>)
 8002042:	edc3 7a00 	vstr	s15, [r3]
					if(micros() - wavetime <= (1000000*T))  //เปลี่ยนหน่วยเป็น microsec
 8002046:	f000 fdff 	bl	8002c48 <micros>
 800204a:	4b9b      	ldr	r3, [pc, #620]	; (80022b8 <main+0x1108>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	1a84      	subs	r4, r0, r2
 8002052:	663c      	str	r4, [r7, #96]	; 0x60
 8002054:	eb61 0303 	sbc.w	r3, r1, r3
 8002058:	667b      	str	r3, [r7, #100]	; 0x64
 800205a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800205e:	f7fe fee3 	bl	8000e28 <__aeabi_ul2f>
 8002062:	ee06 0a90 	vmov	s13, r0
 8002066:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <main+0x1104>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80022bc <main+0x110c>
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	d84f      	bhi.n	800211e <main+0xf6e>
					{
						deltaVfinal = Vhigh - Vlow;
 800207e:	4b90      	ldr	r3, [pc, #576]	; (80022c0 <main+0x1110>)
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	4b8f      	ldr	r3, [pc, #572]	; (80022c4 <main+0x1114>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208e:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <main+0x1118>)
 8002090:	edc3 7a00 	vstr	s15, [r3]
						delta_t = micros() - wavetime;
 8002094:	f000 fdd8 	bl	8002c48 <micros>
 8002098:	4b87      	ldr	r3, [pc, #540]	; (80022b8 <main+0x1108>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	1a84      	subs	r4, r0, r2
 80020a0:	65bc      	str	r4, [r7, #88]	; 0x58
 80020a2:	eb61 0303 	sbc.w	r3, r1, r3
 80020a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020ac:	f7fe febc 	bl	8000e28 <__aeabi_ul2f>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b86      	ldr	r3, [pc, #536]	; (80022cc <main+0x111c>)
 80020b4:	601a      	str	r2, [r3, #0]
						deltaV = Vlow + (deltaVfinal)*(delta_t/(1000000*T));
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <main+0x111c>)
 80020b8:	edd3 6a00 	vldr	s13, [r3]
 80020bc:	4b7d      	ldr	r3, [pc, #500]	; (80022b4 <main+0x1104>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80022bc <main+0x110c>
 80020c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <main+0x1118>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <main+0x1114>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <main+0x1120>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
						dataOut = deltaV*4096/3.3;
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <main+0x1120>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80022d4 <main+0x1124>
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	ee17 0a90 	vmov	r0, s15
 80020fa:	f7fe fa2d 	bl	8000558 <__aeabi_f2d>
 80020fe:	a366      	add	r3, pc, #408	; (adr r3, 8002298 <main+0x10e8>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fbaa 	bl	800085c <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd52 	bl	8000bb8 <__aeabi_d2uiz>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	4a6f      	ldr	r2, [pc, #444]	; (80022d8 <main+0x1128>)
 800211a:	8013      	strh	r3, [r2, #0]
 800211c:	e297      	b.n	800264e <main+0x149e>
					}
					else if(micros() - wavetime > (1000000*T))
 800211e:	f000 fd93 	bl	8002c48 <micros>
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <main+0x1108>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	1a84      	subs	r4, r0, r2
 800212a:	653c      	str	r4, [r7, #80]	; 0x50
 800212c:	eb61 0303 	sbc.w	r3, r1, r3
 8002130:	657b      	str	r3, [r7, #84]	; 0x54
 8002132:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002136:	f7fe fe77 	bl	8000e28 <__aeabi_ul2f>
 800213a:	ee06 0a90 	vmov	s13, r0
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <main+0x1104>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80022bc <main+0x110c>
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	f340 827b 	ble.w	800264e <main+0x149e>
					{
						wavetime = micros();
 8002158:	f000 fd76 	bl	8002c48 <micros>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4955      	ldr	r1, [pc, #340]	; (80022b8 <main+0x1108>)
 8002162:	e9c1 2300 	strd	r2, r3, [r1]
 8002166:	e272      	b.n	800264e <main+0x149e>
					}
				}
				else if(slope == -1) //slope down
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <main+0x10fc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	f040 826d 	bne.w	800264e <main+0x149e>
				{
					if(micros() - wavetime <= (1000000*T))
 8002174:	f000 fd68 	bl	8002c48 <micros>
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <main+0x1108>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	1a84      	subs	r4, r0, r2
 8002180:	64bc      	str	r4, [r7, #72]	; 0x48
 8002182:	eb61 0303 	sbc.w	r3, r1, r3
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002188:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800218c:	f7fe fe4c 	bl	8000e28 <__aeabi_ul2f>
 8002190:	ee06 0a90 	vmov	s13, r0
 8002194:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <main+0x1104>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80022bc <main+0x110c>
 800219e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d84f      	bhi.n	800224c <main+0x109c>
					{
						deltaVfinal = Vhigh - Vlow;
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <main+0x1110>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <main+0x1114>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <main+0x1118>)
 80021be:	edc3 7a00 	vstr	s15, [r3]
						delta_t = micros() - wavetime;
 80021c2:	f000 fd41 	bl	8002c48 <micros>
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <main+0x1108>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	1a84      	subs	r4, r0, r2
 80021ce:	643c      	str	r4, [r7, #64]	; 0x40
 80021d0:	eb61 0303 	sbc.w	r3, r1, r3
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
 80021d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021da:	f7fe fe25 	bl	8000e28 <__aeabi_ul2f>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <main+0x111c>)
 80021e2:	601a      	str	r2, [r3, #0]
						deltaV = Vhigh - (deltaVfinal)*(delta_t/(1000000*T));
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <main+0x1110>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <main+0x111c>)
 80021ec:	ed93 6a00 	vldr	s12, [r3]
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <main+0x1104>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eddf 6a31 	vldr	s13, [pc, #196]	; 80022bc <main+0x110c>
 80021fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021fe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <main+0x1118>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <main+0x1120>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
						dataOut = deltaV*4096/3.3;
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <main+0x1120>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80022d4 <main+0x1124>
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	ee17 0a90 	vmov	r0, s15
 8002228:	f7fe f996 	bl	8000558 <__aeabi_f2d>
 800222c:	a31a      	add	r3, pc, #104	; (adr r3, 8002298 <main+0x10e8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fb13 	bl	800085c <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fcbb 	bl	8000bb8 <__aeabi_d2uiz>
 8002242:	4603      	mov	r3, r0
 8002244:	b29b      	uxth	r3, r3
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <main+0x1128>)
 8002248:	8013      	strh	r3, [r2, #0]
 800224a:	e200      	b.n	800264e <main+0x149e>
					}
					else if(micros() - wavetime > (1000000*T))
 800224c:	f000 fcfc 	bl	8002c48 <micros>
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <main+0x1108>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	1a84      	subs	r4, r0, r2
 8002258:	63bc      	str	r4, [r7, #56]	; 0x38
 800225a:	eb61 0303 	sbc.w	r3, r1, r3
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002260:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002264:	f7fe fde0 	bl	8000e28 <__aeabi_ul2f>
 8002268:	ee06 0a90 	vmov	s13, r0
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <main+0x1104>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022bc <main+0x110c>
 8002276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	f340 81e4 	ble.w	800264e <main+0x149e>
					{
						wavetime = micros();
 8002286:	f000 fcdf 	bl	8002c48 <micros>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <main+0x1108>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
 8002294:	e1db      	b.n	800264e <main+0x149e>
 8002296:	bf00      	nop
 8002298:	66666666 	.word	0x66666666
 800229c:	400a6666 	.word	0x400a6666
 80022a0:	200004ae 	.word	0x200004ae
 80022a4:	200004d8 	.word	0x200004d8
 80022a8:	200004c0 	.word	0x200004c0
 80022ac:	200004b8 	.word	0x200004b8
 80022b0:	20000000 	.word	0x20000000
 80022b4:	200004b0 	.word	0x200004b0
 80022b8:	200004e0 	.word	0x200004e0
 80022bc:	49742400 	.word	0x49742400
 80022c0:	20000004 	.word	0x20000004
 80022c4:	200004b4 	.word	0x200004b4
 80022c8:	200004d0 	.word	0x200004d0
 80022cc:	200004cc 	.word	0x200004cc
 80022d0:	200004c8 	.word	0x200004c8
 80022d4:	45800000 	.word	0x45800000
 80022d8:	200004f8 	.word	0x200004f8
					}
				}
			}
			else if(wave == 2)  // sine wave
 80022dc:	4bba      	ldr	r3, [pc, #744]	; (80025c8 <main+0x1418>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	f040 80d2 	bne.w	800248a <main+0x12da>
			{
				T = 1/f;
 80022e6:	4bb9      	ldr	r3, [pc, #740]	; (80025cc <main+0x141c>)
 80022e8:	ed93 7a00 	vldr	s14, [r3]
 80022ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f4:	4bb6      	ldr	r3, [pc, #728]	; (80025d0 <main+0x1420>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
				if(micros() - wavetime <= (1000000*T))
 80022fa:	f000 fca5 	bl	8002c48 <micros>
 80022fe:	4bb5      	ldr	r3, [pc, #724]	; (80025d4 <main+0x1424>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	1a84      	subs	r4, r0, r2
 8002306:	633c      	str	r4, [r7, #48]	; 0x30
 8002308:	eb61 0303 	sbc.w	r3, r1, r3
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
 800230e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002312:	f7fe fd89 	bl	8000e28 <__aeabi_ul2f>
 8002316:	ee06 0a90 	vmov	s13, r0
 800231a:	4bad      	ldr	r3, [pc, #692]	; (80025d0 <main+0x1420>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80025d8 <main+0x1428>
 8002324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002328:	eef4 6ae7 	vcmpe.f32	s13, s15
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	f200 8086 	bhi.w	8002440 <main+0x1290>
				{
					deltaVfinal = Vhigh - Vlow;
 8002334:	4ba9      	ldr	r3, [pc, #676]	; (80025dc <main+0x142c>)
 8002336:	ed93 7a00 	vldr	s14, [r3]
 800233a:	4ba9      	ldr	r3, [pc, #676]	; (80025e0 <main+0x1430>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	4ba7      	ldr	r3, [pc, #668]	; (80025e4 <main+0x1434>)
 8002346:	edc3 7a00 	vstr	s15, [r3]
					delta_t = micros() - wavetime;
 800234a:	f000 fc7d 	bl	8002c48 <micros>
 800234e:	4ba1      	ldr	r3, [pc, #644]	; (80025d4 <main+0x1424>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	1a84      	subs	r4, r0, r2
 8002356:	62bc      	str	r4, [r7, #40]	; 0x28
 8002358:	eb61 0303 	sbc.w	r3, r1, r3
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002362:	f7fe fd61 	bl	8000e28 <__aeabi_ul2f>
 8002366:	4602      	mov	r2, r0
 8002368:	4b9f      	ldr	r3, [pc, #636]	; (80025e8 <main+0x1438>)
 800236a:	601a      	str	r2, [r3, #0]
					VOut = Vlow + ((sin((delta_t/(1000000*T))*2*pi)+1)*(deltaVfinal/2));
 800236c:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <main+0x1430>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8f1 	bl	8000558 <__aeabi_f2d>
 8002376:	4680      	mov	r8, r0
 8002378:	4689      	mov	r9, r1
 800237a:	4b9b      	ldr	r3, [pc, #620]	; (80025e8 <main+0x1438>)
 800237c:	edd3 6a00 	vldr	s13, [r3]
 8002380:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <main+0x1420>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80025d8 <main+0x1428>
 800238a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800238e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002392:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002396:	4b95      	ldr	r3, [pc, #596]	; (80025ec <main+0x143c>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	ee17 0a90 	vmov	r0, s15
 80023a4:	f7fe f8d8 	bl	8000558 <__aeabi_f2d>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	ec43 2b10 	vmov	d0, r2, r3
 80023b0:	f007 fdfe 	bl	8009fb0 <sin>
 80023b4:	ec51 0b10 	vmov	r0, r1, d0
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <main+0x1440>)
 80023be:	f7fd ff6d 	bl	800029c <__adddf3>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4614      	mov	r4, r2
 80023c8:	461d      	mov	r5, r3
 80023ca:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <main+0x1434>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80023d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023d8:	ee16 0a90 	vmov	r0, s13
 80023dc:	f7fe f8bc 	bl	8000558 <__aeabi_f2d>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fe f90e 	bl	8000608 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4640      	mov	r0, r8
 80023f2:	4649      	mov	r1, r9
 80023f4:	f7fd ff52 	bl	800029c <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbfa 	bl	8000bf8 <__aeabi_d2f>
 8002404:	4602      	mov	r2, r0
 8002406:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <main+0x1444>)
 8002408:	601a      	str	r2, [r3, #0]
					dataOut = VOut*4096/3.3;
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <main+0x1444>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80025f8 <main+0x1448>
 8002414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002418:	ee17 0a90 	vmov	r0, s15
 800241c:	f7fe f89c 	bl	8000558 <__aeabi_f2d>
 8002420:	a367      	add	r3, pc, #412	; (adr r3, 80025c0 <main+0x1410>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe fa19 	bl	800085c <__aeabi_ddiv>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fbc1 	bl	8000bb8 <__aeabi_d2uiz>
 8002436:	4603      	mov	r3, r0
 8002438:	b29b      	uxth	r3, r3
 800243a:	4a70      	ldr	r2, [pc, #448]	; (80025fc <main+0x144c>)
 800243c:	8013      	strh	r3, [r2, #0]
 800243e:	e106      	b.n	800264e <main+0x149e>
				}
				else if(micros() - wavetime > (1000000*T))
 8002440:	f000 fc02 	bl	8002c48 <micros>
 8002444:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <main+0x1424>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	1a84      	subs	r4, r0, r2
 800244c:	623c      	str	r4, [r7, #32]
 800244e:	eb61 0303 	sbc.w	r3, r1, r3
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002458:	f7fe fce6 	bl	8000e28 <__aeabi_ul2f>
 800245c:	ee06 0a90 	vmov	s13, r0
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <main+0x1420>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80025d8 <main+0x1428>
 800246a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	f340 80ea 	ble.w	800264e <main+0x149e>
				{
					wavetime = micros();
 800247a:	f000 fbe5 	bl	8002c48 <micros>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4954      	ldr	r1, [pc, #336]	; (80025d4 <main+0x1424>)
 8002484:	e9c1 2300 	strd	r2, r3, [r1]
 8002488:	e0e1      	b.n	800264e <main+0x149e>
				}
			}
			else if(wave == 3)  //square wave
 800248a:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <main+0x1418>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b03      	cmp	r3, #3
 8002490:	f040 80dd 	bne.w	800264e <main+0x149e>
			{
				T = 1/f;
 8002494:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <main+0x141c>)
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <main+0x1420>)
 80024a4:	edc3 7a00 	vstr	s15, [r3]
				if(micros() - wavetime <= (1000000*T))
 80024a8:	f000 fbce 	bl	8002c48 <micros>
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <main+0x1424>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	1a84      	subs	r4, r0, r2
 80024b4:	61bc      	str	r4, [r7, #24]
 80024b6:	eb61 0303 	sbc.w	r3, r1, r3
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c0:	f7fe fcb2 	bl	8000e28 <__aeabi_ul2f>
 80024c4:	ee06 0a90 	vmov	s13, r0
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <main+0x1420>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80025d8 <main+0x1428>
 80024d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	f200 8093 	bhi.w	8002608 <main+0x1458>
				{
					if(micros() - wavetime <= (1000000*T)*(Duty_cycle/100))
 80024e2:	f000 fbb1 	bl	8002c48 <micros>
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <main+0x1424>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	1a84      	subs	r4, r0, r2
 80024ee:	613c      	str	r4, [r7, #16]
 80024f0:	eb61 0303 	sbc.w	r3, r1, r3
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024fa:	f7fe fc95 	bl	8000e28 <__aeabi_ul2f>
 80024fe:	ee05 0a90 	vmov	s11, r0
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <main+0x1420>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80025d8 <main+0x1428>
 800250c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002510:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <main+0x1450>)
 8002512:	edd3 6a00 	vldr	s13, [r3]
 8002516:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8002604 <main+0x1454>
 800251a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	eef4 5ae7 	vcmpe.f32	s11, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d804      	bhi.n	8002536 <main+0x1386>
					{
						VOut = Vhigh;
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <main+0x142c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <main+0x1444>)
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e028      	b.n	8002588 <main+0x13d8>
					}
					else if(micros() - wavetime > (1000000*T)*(Duty_cycle/100))
 8002536:	f000 fb87 	bl	8002c48 <micros>
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <main+0x1424>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	1a84      	subs	r4, r0, r2
 8002542:	60bc      	str	r4, [r7, #8]
 8002544:	eb61 0303 	sbc.w	r3, r1, r3
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800254e:	f7fe fc6b 	bl	8000e28 <__aeabi_ul2f>
 8002552:	ee05 0a90 	vmov	s11, r0
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <main+0x1420>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80025d8 <main+0x1428>
 8002560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <main+0x1450>)
 8002566:	edd3 6a00 	vldr	s13, [r3]
 800256a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8002604 <main+0x1454>
 800256e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	eef4 5ae7 	vcmpe.f32	s11, s15
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	dd03      	ble.n	8002588 <main+0x13d8>
					{
						VOut = Vlow;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <main+0x1430>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <main+0x1444>)
 8002586:	601a      	str	r2, [r3, #0]
					}
					dataOut = VOut*4096/3.3;
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <main+0x1444>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025f8 <main+0x1448>
 8002592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002596:	ee17 0a90 	vmov	r0, s15
 800259a:	f7fd ffdd 	bl	8000558 <__aeabi_f2d>
 800259e:	a308      	add	r3, pc, #32	; (adr r3, 80025c0 <main+0x1410>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f95a 	bl	800085c <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb02 	bl	8000bb8 <__aeabi_d2uiz>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <main+0x144c>)
 80025ba:	8013      	strh	r3, [r2, #0]
 80025bc:	e047      	b.n	800264e <main+0x149e>
 80025be:	bf00      	nop
 80025c0:	66666666 	.word	0x66666666
 80025c4:	400a6666 	.word	0x400a6666
 80025c8:	200004c0 	.word	0x200004c0
 80025cc:	20000000 	.word	0x20000000
 80025d0:	200004b0 	.word	0x200004b0
 80025d4:	200004e0 	.word	0x200004e0
 80025d8:	49742400 	.word	0x49742400
 80025dc:	20000004 	.word	0x20000004
 80025e0:	200004b4 	.word	0x200004b4
 80025e4:	200004d0 	.word	0x200004d0
 80025e8:	200004cc 	.word	0x200004cc
 80025ec:	20000008 	.word	0x20000008
 80025f0:	3ff00000 	.word	0x3ff00000
 80025f4:	200004c4 	.word	0x200004c4
 80025f8:	45800000 	.word	0x45800000
 80025fc:	200004f8 	.word	0x200004f8
 8002600:	200004bc 	.word	0x200004bc
 8002604:	42c80000 	.word	0x42c80000
				}
				else if(micros() - wavetime > (1000000*T))
 8002608:	f000 fb1e 	bl	8002c48 <micros>
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <main+0x14dc>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	1a84      	subs	r4, r0, r2
 8002614:	603c      	str	r4, [r7, #0]
 8002616:	eb61 0303 	sbc.w	r3, r1, r3
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002620:	f7fe fc02 	bl	8000e28 <__aeabi_ul2f>
 8002624:	ee06 0a90 	vmov	s13, r0
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <main+0x14e0>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002694 <main+0x14e4>
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	eef4 6ae7 	vcmpe.f32	s13, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	dd06      	ble.n	800264e <main+0x149e>
				{
					wavetime = micros();
 8002640:	f000 fb02 	bl	8002c48 <micros>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4910      	ldr	r1, [pc, #64]	; (800268c <main+0x14dc>)
 800264a:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <main+0x14e8>)
 8002650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10f      	bne.n	800267a <main+0x14ca>
 800265a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265e:	480f      	ldr	r0, [pc, #60]	; (800269c <main+0x14ec>)
 8002660:	f002 fa84 	bl	8004b6c <HAL_GPIO_ReadPin>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <main+0x14ca>
			{
				MCP4922SetOutput(DACConfig, dataOut);  //DACConfigคือ โหลดที่ให้ทำงาน  dataOutคือข้อมูลที่ส่ง 12bit
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <main+0x14f0>)
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <main+0x14f4>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 fa8d 	bl	8002b94 <MCP4922SetOutput>
			}
			timestamp = micros();
 800267a:	f000 fae5 	bl	8002c48 <micros>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4909      	ldr	r1, [pc, #36]	; (80026a8 <main+0x14f8>)
 8002684:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 10);
 8002688:	f7fe bdb9 	b.w	80011fe <main+0x4e>
 800268c:	200004e0 	.word	0x200004e0
 8002690:	200004b0 	.word	0x200004b0
 8002694:	49742400 	.word	0x49742400
 8002698:	200005b0 	.word	0x200005b0
 800269c:	40020400 	.word	0x40020400
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	200004f8 	.word	0x200004f8
 80026a8:	200004d8 	.word	0x200004d8

080026ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b094      	sub	sp, #80	; 0x50
 80026b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b2:	f107 0320 	add.w	r3, r7, #32
 80026b6:	2230      	movs	r2, #48	; 0x30
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fdd8 	bl	8007270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <SystemClock_Config+0xc8>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a26      	ldr	r2, [pc, #152]	; (8002774 <SystemClock_Config+0xc8>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <SystemClock_Config+0xc8>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ec:	2300      	movs	r3, #0
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <SystemClock_Config+0xcc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <SystemClock_Config+0xcc>)
 80026f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <SystemClock_Config+0xcc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002708:	2302      	movs	r3, #2
 800270a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800270c:	2301      	movs	r3, #1
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002710:	2310      	movs	r3, #16
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002714:	2302      	movs	r3, #2
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002718:	2300      	movs	r3, #0
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800271c:	2308      	movs	r3, #8
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002720:	2364      	movs	r3, #100	; 0x64
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002724:	2302      	movs	r3, #2
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002728:	2304      	movs	r3, #4
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fa4d 	bl	8004bd0 <HAL_RCC_OscConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800273c:	f000 face 	bl	8002cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002740:	230f      	movs	r3, #15
 8002742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002744:	2302      	movs	r3, #2
 8002746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2103      	movs	r1, #3
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fcaf 	bl	80050c0 <HAL_RCC_ClockConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002768:	f000 fab8 	bl	8002cdc <Error_Handler>
  }
}
 800276c:	bf00      	nop
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000

0800277c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002782:	463b      	mov	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <MX_ADC1_Init+0x9c>)
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <MX_ADC1_Init+0xa0>)
 8002792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_ADC1_Init+0x9c>)
 8002796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800279a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <MX_ADC1_Init+0x9c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <MX_ADC1_Init+0x9c>)
 80027e2:	f000 fdd5 	bl	8003390 <HAL_ADC_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80027ec:	f000 fa76 	bl	8002cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_ADC1_Init+0x9c>)
 8002802:	f001 f861 	bl	80038c8 <HAL_ADC_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800280c:	f000 fa66 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000608 	.word	0x20000608
 800281c:	40012000 	.word	0x40012000

08002820 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <MX_SPI3_Init+0x68>)
 8002826:	4a19      	ldr	r2, [pc, #100]	; (800288c <MX_SPI3_Init+0x6c>)
 8002828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <MX_SPI3_Init+0x68>)
 800282c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <MX_SPI3_Init+0x68>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_SPI3_Init+0x68>)
 800283a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_SPI3_Init+0x68>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_SPI3_Init+0x68>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_SPI3_Init+0x68>)
 800284e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002852:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_SPI3_Init+0x68>)
 8002856:	2220      	movs	r2, #32
 8002858:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_SPI3_Init+0x68>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_SPI3_Init+0x68>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_SPI3_Init+0x68>)
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_SPI3_Init+0x68>)
 800286e:	220a      	movs	r2, #10
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_SPI3_Init+0x68>)
 8002874:	f002 fe20 	bl	80054b8 <HAL_SPI_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800287e:	f000 fa2d 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200005b0 	.word	0x200005b0
 800288c:	40003c00 	.word	0x40003c00

08002890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a4:	463b      	mov	r3, r7
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM2_Init+0x94>)
 80028ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <MX_TIM2_Init+0x94>)
 80028b6:	2263      	movs	r2, #99	; 0x63
 80028b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_TIM2_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <MX_TIM2_Init+0x94>)
 80028c2:	f04f 32ff 	mov.w	r2, #4294967295
 80028c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <MX_TIM2_Init+0x94>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MX_TIM2_Init+0x94>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028d4:	4813      	ldr	r0, [pc, #76]	; (8002924 <MX_TIM2_Init+0x94>)
 80028d6:	f003 f993 	bl	8005c00 <HAL_TIM_Base_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028e0:	f000 f9fc 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_TIM2_Init+0x94>)
 80028f2:	f003 fb99 	bl	8006028 <HAL_TIM_ConfigClockSource>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028fc:	f000 f9ee 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_TIM2_Init+0x94>)
 800290e:	f003 fd91 	bl	8006434 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002918:	f000 f9e0 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200006b0 	.word	0x200006b0

08002928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <MX_TIM3_Init+0x90>)
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <MX_TIM3_Init+0x94>)
 8002948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_TIM3_Init+0x90>)
 800294c:	2263      	movs	r2, #99	; 0x63
 800294e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <MX_TIM3_Init+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_TIM3_Init+0x90>)
 8002958:	2264      	movs	r2, #100	; 0x64
 800295a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_TIM3_Init+0x90>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_TIM3_Init+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002968:	4813      	ldr	r0, [pc, #76]	; (80029b8 <MX_TIM3_Init+0x90>)
 800296a:	f003 f949 	bl	8005c00 <HAL_TIM_Base_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002974:	f000 f9b2 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	4619      	mov	r1, r3
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <MX_TIM3_Init+0x90>)
 8002986:	f003 fb4f 	bl	8006028 <HAL_TIM_ConfigClockSource>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002990:	f000 f9a4 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002994:	2320      	movs	r3, #32
 8002996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800299c:	463b      	mov	r3, r7
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_TIM3_Init+0x90>)
 80029a2:	f003 fd47 	bl	8006434 <HAL_TIMEx_MasterConfigSynchronization>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80029ac:	f000 f996 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000568 	.word	0x20000568
 80029bc:	40000400 	.word	0x40000400

080029c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_USART2_UART_Init+0x50>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029f8:	f003 fd9e 	bl	8006538 <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a02:	f000 f96b 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200006f8 	.word	0x200006f8
 8002a10:	40004400 	.word	0x40004400

08002a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_DMA_Init+0x3c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <MX_DMA_Init+0x3c>)
 8002a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_DMA_Init+0x3c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2038      	movs	r0, #56	; 0x38
 8002a3c:	f001 fad9 	bl	8003ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a40:	2038      	movs	r0, #56	; 0x38
 8002a42:	f001 faf2 	bl	800402a <HAL_NVIC_EnableIRQ>

}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a35      	ldr	r2, [pc, #212]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <MX_GPIO_Init+0x12c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2120      	movs	r1, #32
 8002ade:	4829      	ldr	r0, [pc, #164]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002ae0:	f002 f85c 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aea:	4827      	ldr	r0, [pc, #156]	; (8002b88 <MX_GPIO_Init+0x134>)
 8002aec:	f002 f856 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002af0:	2201      	movs	r2, #1
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	4825      	ldr	r0, [pc, #148]	; (8002b8c <MX_GPIO_Init+0x138>)
 8002af6:	f002 f851 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002afa:	2201      	movs	r2, #1
 8002afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b00:	4820      	ldr	r0, [pc, #128]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002b02:	f002 f84b 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <MX_GPIO_Init+0x13c>)
 8002b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481c      	ldr	r0, [pc, #112]	; (8002b8c <MX_GPIO_Init+0x138>)
 8002b1c:	f001 fea2 	bl	8004864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002b20:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4812      	ldr	r0, [pc, #72]	; (8002b84 <MX_GPIO_Init+0x130>)
 8002b3a:	f001 fe93 	bl	8004864 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <MX_GPIO_Init+0x134>)
 8002b58:	f001 fe84 	bl	8004864 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	4806      	ldr	r0, [pc, #24]	; (8002b8c <MX_GPIO_Init+0x138>)
 8002b74:	f001 fe76 	bl	8004864 <HAL_GPIO_Init>

}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	10210000 	.word	0x10210000

08002b94 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);  //DACOutputคือ ข้อมูล12bit Configคือ โหมด4bit
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);  //เปลี่ยน SS ให้เป็น low เพื่อให้เริ่มส่งข้อมูล
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bba:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <MCP4922SetOutput+0x44>)
 8002bbc:	f001 ffee 	bl	8004b9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);  //ส่งข้อมูล
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4804      	ldr	r0, [pc, #16]	; (8002bdc <MCP4922SetOutput+0x48>)
 8002bca:	f002 fcff 	bl	80055cc <HAL_SPI_Transmit_IT>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	200005b0 	.word	0x200005b0

08002be0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)  //เมื่อส่งข้อมูลครบ 16bit
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_SPI_TxCpltCallback+0x24>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d105      	bne.n	8002bfc <HAL_SPI_TxCpltCallback+0x1c>
		{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);  //เปลี่ยน SS ให้เป็น high คือสิ้นสุดการส่งข้อมูล
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <HAL_SPI_TxCpltCallback+0x28>)
 8002bf8:	f001 ffd0 	bl	8004b9c <HAL_GPIO_WritePin>
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200005b0 	.word	0x200005b0
 8002c08:	40020400 	.word	0x40020400

08002c0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b4b0      	push	{r4, r5, r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10c      	bne.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	1814      	adds	r4, r2, r0
 8002c2c:	eb43 0501 	adc.w	r5, r3, r1
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002c32:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bcb0      	pop	{r4, r5, r7}
 8002c3e:	4770      	bx	lr
 8002c40:	200006b0 	.word	0x200006b0
 8002c44:	200004f0 	.word	0x200004f0

08002c48 <micros>:

inline uint64_t micros()
{
 8002c48:	b4b0      	push	{r4, r5, r7}
 8002c4a:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT + _micro;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <micros+0x2c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <micros+0x30>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	1884      	adds	r4, r0, r2
 8002c60:	eb41 0503 	adc.w	r5, r1, r3
 8002c64:	4622      	mov	r2, r4
 8002c66:	462b      	mov	r3, r5
}
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bcb0      	pop	{r4, r5, r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200006b0 	.word	0x200006b0
 8002c78:	200004f0 	.word	0x200004f0

08002c7c <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8002c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c86:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <UARTRecieveIT+0x54>)
 8002c8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <UARTRecieveIT+0x54>)
 8002c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <UARTRecieveIT+0x58>)
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d010      	beq.n	8002cc0 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <UARTRecieveIT+0x58>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <UARTRecieveIT+0x5c>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <UARTRecieveIT+0x58>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <UARTRecieveIT+0x54>)
 8002cb0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cb6:	fb02 f201 	mul.w	r2, r2, r1
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <UARTRecieveIT+0x58>)
 8002cbe:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	200006f8 	.word	0x200006f8
 8002cd4:	20000558 	.word	0x20000558
 8002cd8:	2000048c 	.word	0x2000048c

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <Error_Handler+0x8>
	...

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d26:	2007      	movs	r0, #7
 8002d28:	f001 f958 	bl	8003fdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_ADC_MspInit+0xec>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d15f      	bne.n	8002e1a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_ADC_MspInit+0xf0>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d92:	2301      	movs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d96:	2303      	movs	r3, #3
 8002d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4821      	ldr	r0, [pc, #132]	; (8002e2c <HAL_ADC_MspInit+0xf4>)
 8002da6:	f001 fd5d 	bl	8004864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_ADC_MspInit+0xfc>)
 8002dae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dee:	4810      	ldr	r0, [pc, #64]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002df0:	f001 f936 	bl	8004060 <HAL_DMA_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002dfa:	f7ff ff6f 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_ADC_MspInit+0xf8>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2012      	movs	r0, #18
 8002e10:	f001 f8ef 	bl	8003ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e14:	2012      	movs	r0, #18
 8002e16:	f001 f908 	bl	800402a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40012000 	.word	0x40012000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	20000650 	.word	0x20000650
 8002e34:	40026410 	.word	0x40026410

08002e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_SPI_MspInit+0x94>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d133      	bne.n	8002ec2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_SPI_MspInit+0x98>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e92:	2338      	movs	r3, #56	; 0x38
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4809      	ldr	r0, [pc, #36]	; (8002ed4 <HAL_SPI_MspInit+0x9c>)
 8002eae:	f001 fcd9 	bl	8004864 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2033      	movs	r0, #51	; 0x33
 8002eb8:	f001 f89b 	bl	8003ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002ebc:	2033      	movs	r0, #51	; 0x33
 8002ebe:	f001 f8b4 	bl	800402a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40003c00 	.word	0x40003c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020400 	.word	0x40020400

08002ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d116      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	201c      	movs	r0, #28
 8002f0c:	f001 f871 	bl	8003ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f10:	201c      	movs	r0, #28
 8002f12:	f001 f88a 	bl	800402a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f16:	e012      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <HAL_TIM_Base_MspInit+0x74>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_TIM_Base_MspInit+0x70>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40000400 	.word	0x40000400

08002f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_UART_MspInit+0x94>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d133      	bne.n	8002fda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_UART_MspInit+0x98>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002faa:	230c      	movs	r3, #12
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <HAL_UART_MspInit+0x9c>)
 8002fc6:	f001 fc4d 	bl	8004864 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2026      	movs	r0, #38	; 0x26
 8002fd0:	f001 f80f 	bl	8003ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fd4:	2026      	movs	r0, #38	; 0x26
 8002fd6:	f001 f828 	bl	800402a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <MemManage_Handler+0x4>

08003002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <UsageFault_Handler+0x4>

0800300e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303c:	f000 f988 	bl	8003350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <ADC_IRQHandler+0x10>)
 800304a:	f000 f9e4 	bl	8003416 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000608 	.word	0x20000608

08003058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <TIM2_IRQHandler+0x10>)
 800305e:	f002 fedb 	bl	8005e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200006b0 	.word	0x200006b0

0800306c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <USART2_IRQHandler+0x10>)
 8003072:	f003 fb71 	bl	8006758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200006f8 	.word	0x200006f8

08003080 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <SPI3_IRQHandler+0x10>)
 8003086:	f002 fb2b 	bl	80056e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200005b0 	.word	0x200005b0

08003094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <DMA2_Stream0_IRQHandler+0x10>)
 800309a:	f001 f979 	bl	8004390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000650 	.word	0x20000650

080030a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
	return 1;
 80030ac:	2301      	movs	r3, #1
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <_kill>:

int _kill(int pid, int sig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030c2:	f004 f8ab 	bl	800721c <__errno>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2216      	movs	r2, #22
 80030ca:	601a      	str	r2, [r3, #0]
	return -1;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_exit>:

void _exit (int status)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ffe7 	bl	80030b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030ea:	e7fe      	b.n	80030ea <_exit+0x12>

080030ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e00a      	b.n	8003114 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030fe:	f3af 8000 	nop.w
 8003102:	4601      	mov	r1, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	b2ca      	uxtb	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3301      	adds	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	dbf0      	blt.n	80030fe <_read+0x12>
	}

return len;
 800311c:	687b      	ldr	r3, [r7, #4]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e009      	b.n	800314c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	60ba      	str	r2, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	dbf1      	blt.n	8003138 <_write+0x12>
	}
	return len;
 8003154:	687b      	ldr	r3, [r7, #4]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_close>:

int _close(int file)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
	return -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003186:	605a      	str	r2, [r3, #4]
	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <_isatty>:

int _isatty(int file)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
	return 1;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <_sbrk+0x5c>)
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <_sbrk+0x60>)
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <_sbrk+0x64>)
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <_sbrk+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f8:	f004 f810 	bl	800721c <__errno>
 80031fc:	4603      	mov	r3, r0
 80031fe:	220c      	movs	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e009      	b.n	800321c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	4a05      	ldr	r2, [pc, #20]	; (800322c <_sbrk+0x64>)
 8003218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20020000 	.word	0x20020000
 8003228:	00000400 	.word	0x00000400
 800322c:	2000055c 	.word	0x2000055c
 8003230:	20000750 	.word	0x20000750

08003234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <SystemInit+0x20>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <SystemInit+0x20>)
 8003240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325e:	490e      	ldr	r1, [pc, #56]	; (8003298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003260:	4a0e      	ldr	r2, [pc, #56]	; (800329c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003264:	e002      	b.n	800326c <LoopCopyDataInit>

08003266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326a:	3304      	adds	r3, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800326c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003270:	d3f9      	bcc.n	8003266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003274:	4c0b      	ldr	r4, [pc, #44]	; (80032a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003278:	e001      	b.n	800327e <LoopFillZerobss>

0800327a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800327c:	3204      	adds	r2, #4

0800327e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003280:	d3fb      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003282:	f7ff ffd7 	bl	8003234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003286:	f003 ffcf 	bl	8007228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328a:	f7fd ff91 	bl	80011b0 <main>
  bx  lr    
 800328e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003298:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 800329c:	0800b678 	.word	0x0800b678
  ldr r2, =_sbss
 80032a0:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80032a4:	20000750 	.word	0x20000750

080032a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <DMA1_Stream0_IRQHandler>
	...

080032ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_Init+0x40>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <HAL_Init+0x40>)
 80032c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_Init+0x40>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f000 fe81 	bl	8003fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f808 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e0:	f7ff fd02 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x54>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x58>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fe99 	bl	8004046 <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00e      	b.n	800333c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d80a      	bhi.n	800333a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f000 fe61 	bl	8003ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <HAL_InitTick+0x5c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000290 	.word	0x20000290
 8003348:	20000298 	.word	0x20000298
 800334c:	20000294 	.word	0x20000294

08003350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_IncTick+0x20>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_IncTick+0x24>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_IncTick+0x24>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000298 	.word	0x20000298
 8003374:	2000073c 	.word	0x2000073c

08003378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return uwTick;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_GetTick+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000073c 	.word	0x2000073c

08003390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e033      	b.n	800340e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fcc2 	bl	8002d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033d6:	f023 0302 	bic.w	r3, r3, #2
 80033da:	f043 0202 	orr.w	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fba2 	bl	8003b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
 80033fe:	e001      	b.n	8003404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d049      	beq.n	80034ec <HAL_ADC_IRQHandler+0xd6>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d046      	beq.n	80034ec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d12b      	bne.n	80034dc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003488:	2b00      	cmp	r3, #0
 800348a:	d127      	bne.n	80034dc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d119      	bne.n	80034dc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0220 	bic.w	r2, r2, #32
 80034b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f9cb 	bl	8003878 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0212 	mvn.w	r2, #18
 80034ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d057      	beq.n	80035ce <HAL_ADC_IRQHandler+0x1b8>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d054      	beq.n	80035ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d139      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003562:	2b00      	cmp	r3, #0
 8003564:	d12b      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003570:	2b00      	cmp	r3, #0
 8003572:	d124      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11d      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fc32 	bl	8003e28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 020c 	mvn.w	r2, #12
 80035cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <HAL_ADC_IRQHandler+0x21a>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10d      	bne.n	8003630 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f93d 	bl	80038a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0201 	mvn.w	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b20      	cmp	r3, #32
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_ADC_IRQHandler+0x27a>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0220 	mvn.w	r2, #32
 800367e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f917 	bl	80038b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f06f 0220 	mvn.w	r2, #32
 800368e:	601a      	str	r2, [r3, #0]
  }
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_Start_DMA+0x1e>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0ce      	b.n	8003854 <HAL_ADC_Start_DMA+0x1bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d018      	beq.n	80036fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_ADC_Start_DMA+0x1c4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5f      	ldr	r2, [pc, #380]	; (8003860 <HAL_ADC_Start_DMA+0x1c8>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0c9a      	lsrs	r2, r3, #18
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036f0:	e002      	b.n	80036f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f9      	bne.n	80036f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370c:	d107      	bne.n	800371e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 8086 	bne.w	800383a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003758:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d106      	bne.n	800377c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f023 0206 	bic.w	r2, r3, #6
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
 800377a:	e002      	b.n	8003782 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800378a:	4b36      	ldr	r3, [pc, #216]	; (8003864 <HAL_ADC_Start_DMA+0x1cc>)
 800378c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4a35      	ldr	r2, [pc, #212]	; (8003868 <HAL_ADC_Start_DMA+0x1d0>)
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4a34      	ldr	r2, [pc, #208]	; (800386c <HAL_ADC_Start_DMA+0x1d4>)
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4a33      	ldr	r2, [pc, #204]	; (8003870 <HAL_ADC_Start_DMA+0x1d8>)
 80037a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	334c      	adds	r3, #76	; 0x4c
 80037da:	4619      	mov	r1, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f000 fcec 	bl	80041bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d129      	bne.n	8003852 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	e020      	b.n	8003852 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_ADC_Start_DMA+0x1dc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d11b      	bne.n	8003852 <HAL_ADC_Start_DMA+0x1ba>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d114      	bne.n	8003852 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e00b      	b.n	8003852 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0210 	orr.w	r2, r3, #16
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000290 	.word	0x20000290
 8003860:	431bde83 	.word	0x431bde83
 8003864:	40012300 	.word	0x40012300
 8003868:	08003d25 	.word	0x08003d25
 800386c:	08003ddf 	.word	0x08003ddf
 8003870:	08003dfb 	.word	0x08003dfb
 8003874:	40012000 	.word	0x40012000

08003878 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e113      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x244>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b09      	cmp	r3, #9
 80038f2:	d925      	bls.n	8003940 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	3b1e      	subs	r3, #30
 800390a:	2207      	movs	r2, #7
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43da      	mvns	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	400a      	ands	r2, r1
 8003918:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	4618      	mov	r0, r3
 800392c:	4603      	mov	r3, r0
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4403      	add	r3, r0
 8003932:	3b1e      	subs	r3, #30
 8003934:	409a      	lsls	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e022      	b.n	8003986 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6919      	ldr	r1, [r3, #16]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	2207      	movs	r2, #7
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	400a      	ands	r2, r1
 8003962:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6919      	ldr	r1, [r3, #16]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	4603      	mov	r3, r0
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4403      	add	r3, r0
 800397c:	409a      	lsls	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d824      	bhi.n	80039d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	3b05      	subs	r3, #5
 80039a0:	221f      	movs	r2, #31
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4618      	mov	r0, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	3b05      	subs	r3, #5
 80039ca:	fa00 f203 	lsl.w	r2, r0, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
 80039d6:	e04c      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d824      	bhi.n	8003a2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	3b23      	subs	r3, #35	; 0x23
 80039f2:	221f      	movs	r2, #31
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43da      	mvns	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	400a      	ands	r2, r1
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	3b23      	subs	r3, #35	; 0x23
 8003a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	e023      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	3b41      	subs	r3, #65	; 0x41
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	400a      	ands	r2, r1
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	3b41      	subs	r3, #65	; 0x41
 8003a66:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_ADC_ConfigChannel+0x250>)
 8003a74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_ADC_ConfigChannel+0x254>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d8>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d10b      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_ADC_ConfigChannel+0x254>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d12b      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x23a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_ADC_ConfigChannel+0x258>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <HAL_ADC_ConfigChannel+0x1f4>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b11      	cmp	r3, #17
 8003aba:	d122      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_ADC_ConfigChannel+0x258>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d111      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_ADC_ConfigChannel+0x25c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_ADC_ConfigChannel+0x260>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	0c9a      	lsrs	r2, r3, #18
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003af4:	e002      	b.n	8003afc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f9      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012300 	.word	0x40012300
 8003b1c:	40012000 	.word	0x40012000
 8003b20:	10000012 	.word	0x10000012
 8003b24:	20000290 	.word	0x20000290
 8003b28:	431bde83 	.word	0x431bde83

08003b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b34:	4b79      	ldr	r3, [pc, #484]	; (8003d1c <ADC_Init+0x1f0>)
 8003b36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <ADC_Init+0x1f4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e00f      	b.n	8003c2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0202 	bic.w	r2, r2, #2
 8003c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6899      	ldr	r1, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7e1b      	ldrb	r3, [r3, #24]
 8003c44:	005a      	lsls	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	3b01      	subs	r3, #1
 8003c84:	035a      	lsls	r2, r3, #13
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	e007      	b.n	8003ca0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	051a      	lsls	r2, r3, #20
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ce2:	025a      	lsls	r2, r3, #9
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6899      	ldr	r1, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	029a      	lsls	r2, r3, #10
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40012300 	.word	0x40012300
 8003d20:	0f000001 	.word	0x0f000001

08003d24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d13c      	bne.n	8003db8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d12b      	bne.n	8003db0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d127      	bne.n	8003db0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d119      	bne.n	8003db0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0220 	bic.w	r2, r2, #32
 8003d8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fd61 	bl	8003878 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003db6:	e00e      	b.n	8003dd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fd75 	bl	80038b4 <HAL_ADC_ErrorCallback>
}
 8003dca:	e004      	b.n	8003dd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fd4d 	bl	800388c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fd4a 	bl	80038b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <__NVIC_SetPriorityGrouping+0x44>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6e:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <__NVIC_SetPriorityGrouping+0x44>)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	60d3      	str	r3, [r2, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <__NVIC_GetPriorityGrouping+0x18>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	f003 0307 	and.w	r3, r3, #7
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	db0b      	blt.n	8003eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	f003 021f 	and.w	r2, r3, #31
 8003eb8:	4907      	ldr	r1, [pc, #28]	; (8003ed8 <__NVIC_EnableIRQ+0x38>)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	e000e100 	.word	0xe000e100

08003edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	db0a      	blt.n	8003f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	490c      	ldr	r1, [pc, #48]	; (8003f28 <__NVIC_SetPriority+0x4c>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	0112      	lsls	r2, r2, #4
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	440b      	add	r3, r1
 8003f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f04:	e00a      	b.n	8003f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4908      	ldr	r1, [pc, #32]	; (8003f2c <__NVIC_SetPriority+0x50>)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	3b04      	subs	r3, #4
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	440b      	add	r3, r1
 8003f1a:	761a      	strb	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	e000e100 	.word	0xe000e100
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f1c3 0307 	rsb	r3, r3, #7
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf28      	it	cs
 8003f4e:	2304      	movcs	r3, #4
 8003f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d902      	bls.n	8003f60 <NVIC_EncodePriority+0x30>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3b03      	subs	r3, #3
 8003f5e:	e000      	b.n	8003f62 <NVIC_EncodePriority+0x32>
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	401a      	ands	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f78:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43d9      	mvns	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f88:	4313      	orrs	r3, r2
         );
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	; 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fa8:	d301      	bcc.n	8003fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003faa:	2301      	movs	r3, #1
 8003fac:	e00f      	b.n	8003fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <SysTick_Config+0x40>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fb6:	210f      	movs	r1, #15
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	f7ff ff8e 	bl	8003edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <SysTick_Config+0x40>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <SysTick_Config+0x40>)
 8003fc8:	2207      	movs	r2, #7
 8003fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	e000e010 	.word	0xe000e010

08003fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ff29 	bl	8003e3c <__NVIC_SetPriorityGrouping>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004004:	f7ff ff3e 	bl	8003e84 <__NVIC_GetPriorityGrouping>
 8004008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff ff8e 	bl	8003f30 <NVIC_EncodePriority>
 8004014:	4602      	mov	r2, r0
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff5d 	bl	8003edc <__NVIC_SetPriority>
}
 8004022:	bf00      	nop
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff31 	bl	8003ea0 <__NVIC_EnableIRQ>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ffa2 	bl	8003f98 <SysTick_Config>
 8004054:	4603      	mov	r3, r0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff f984 	bl	8003378 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e099      	b.n	80041b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800409c:	e00f      	b.n	80040be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800409e:	f7ff f96b 	bl	8003378 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d908      	bls.n	80040be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2203      	movs	r2, #3
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e078      	b.n	80041b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e8      	bne.n	800409e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_DMA_Init+0x158>)
 80040d8:	4013      	ands	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b04      	cmp	r3, #4
 8004116:	d107      	bne.n	8004128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4313      	orrs	r3, r2
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b04      	cmp	r3, #4
 8004150:	d117      	bne.n	8004182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb01 	bl	800476c <DMA_CheckFifoParam>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800417e:	2301      	movs	r3, #1
 8004180:	e016      	b.n	80041b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fab8 	bl	8004700 <DMA_CalcBaseAndBitshift>
 8004190:	4603      	mov	r3, r0
 8004192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	223f      	movs	r2, #63	; 0x3f
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	f010803f 	.word	0xf010803f

080041bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_DMA_Start_IT+0x26>
 80041de:	2302      	movs	r3, #2
 80041e0:	e040      	b.n	8004264 <HAL_DMA_Start_IT+0xa8>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d12f      	bne.n	8004256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fa4a 	bl	80046a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	223f      	movs	r2, #63	; 0x3f
 8004216:	409a      	lsls	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0216 	orr.w	r2, r2, #22
 800422a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0208 	orr.w	r2, r2, #8
 8004242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e005      	b.n	8004262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800425e:	2302      	movs	r3, #2
 8004260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800427a:	f7ff f87d 	bl	8003378 <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d008      	beq.n	800429e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e052      	b.n	8004344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0216 	bic.w	r2, r2, #22
 80042ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_DMA_Abort+0x62>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0208 	bic.w	r2, r2, #8
 80042dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ee:	e013      	b.n	8004318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042f0:	f7ff f842 	bl	8003378 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d90c      	bls.n	8004318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e015      	b.n	8004344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e4      	bne.n	80042f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	223f      	movs	r2, #63	; 0x3f
 800432c:	409a      	lsls	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d004      	beq.n	800436a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e00c      	b.n	8004384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2205      	movs	r2, #5
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <HAL_DMA_IRQHandler+0x258>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a92      	ldr	r2, [pc, #584]	; (80045ec <HAL_DMA_IRQHandler+0x25c>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0a9b      	lsrs	r3, r3, #10
 80043a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	2208      	movs	r2, #8
 80043bc:	409a      	lsls	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01a      	beq.n	80043fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0204 	bic.w	r2, r2, #4
 80043e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	2208      	movs	r2, #8
 80043ea:	409a      	lsls	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	2201      	movs	r2, #1
 8004402:	409a      	lsls	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2201      	movs	r2, #1
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 0202 	orr.w	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	2204      	movs	r2, #4
 8004438:	409a      	lsls	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d012      	beq.n	8004468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	2204      	movs	r2, #4
 8004456:	409a      	lsls	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	2210      	movs	r2, #16
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d043      	beq.n	8004500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d03c      	beq.n	8004500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	2210      	movs	r2, #16
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d024      	beq.n	8004500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
 80044be:	e01f      	b.n	8004500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
 80044d0:	e016      	b.n	8004500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0208 	bic.w	r2, r2, #8
 80044ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	2220      	movs	r2, #32
 8004506:	409a      	lsls	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 808e 	beq.w	800462e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8086 	beq.w	800462e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	2220      	movs	r2, #32
 8004528:	409a      	lsls	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b05      	cmp	r3, #5
 8004538:	d136      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0216 	bic.w	r2, r2, #22
 8004548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_DMA_IRQHandler+0x1da>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0208 	bic.w	r2, r2, #8
 8004578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	223f      	movs	r2, #63	; 0x3f
 8004580:	409a      	lsls	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d07d      	beq.n	800469a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
        }
        return;
 80045a6:	e078      	b.n	800469a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d030      	beq.n	800462e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e02b      	b.n	800462e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d027      	beq.n	800462e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
 80045e6:	e022      	b.n	800462e <HAL_DMA_IRQHandler+0x29e>
 80045e8:	20000290 	.word	0x20000290
 80045ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0210 	bic.w	r2, r2, #16
 800460c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	2b00      	cmp	r3, #0
 8004634:	d032      	beq.n	800469c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d022      	beq.n	8004688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2205      	movs	r2, #5
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3301      	adds	r3, #1
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	429a      	cmp	r2, r3
 8004664:	d307      	bcc.n	8004676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f2      	bne.n	800465a <HAL_DMA_IRQHandler+0x2ca>
 8004674:	e000      	b.n	8004678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	e000      	b.n	800469c <HAL_DMA_IRQHandler+0x30c>
        return;
 800469a:	bf00      	nop
    }
  }
}
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop

080046a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d108      	bne.n	80046e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046e2:	e007      	b.n	80046f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3b10      	subs	r3, #16
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <DMA_CalcBaseAndBitshift+0x64>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <DMA_CalcBaseAndBitshift+0x68>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d909      	bls.n	8004742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	659a      	str	r2, [r3, #88]	; 0x58
 8004740:	e007      	b.n	8004752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	aaaaaaab 	.word	0xaaaaaaab
 8004768:	0800b0a0 	.word	0x0800b0a0

0800476c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11f      	bne.n	80047c6 <DMA_CheckFifoParam+0x5a>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d856      	bhi.n	800483a <DMA_CheckFifoParam+0xce>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <DMA_CheckFifoParam+0x28>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047a5 	.word	0x080047a5
 8004798:	080047b7 	.word	0x080047b7
 800479c:	080047a5 	.word	0x080047a5
 80047a0:	0800483b 	.word	0x0800483b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d046      	beq.n	800483e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b4:	e043      	b.n	800483e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047be:	d140      	bne.n	8004842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c4:	e03d      	b.n	8004842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	d121      	bne.n	8004814 <DMA_CheckFifoParam+0xa8>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d837      	bhi.n	8004846 <DMA_CheckFifoParam+0xda>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <DMA_CheckFifoParam+0x70>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047f3 	.word	0x080047f3
 80047e4:	080047ed 	.word	0x080047ed
 80047e8:	08004805 	.word	0x08004805
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e030      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d025      	beq.n	800484a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004802:	e022      	b.n	800484a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800480c:	d11f      	bne.n	800484e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004812:	e01c      	b.n	800484e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d903      	bls.n	8004822 <DMA_CheckFifoParam+0xb6>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d003      	beq.n	8004828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004820:	e018      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      break;
 8004826:	e015      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e00b      	b.n	8004852 <DMA_CheckFifoParam+0xe6>
      break;
 800483a:	bf00      	nop
 800483c:	e00a      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 800483e:	bf00      	nop
 8004840:	e008      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004842:	bf00      	nop
 8004844:	e006      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004846:	bf00      	nop
 8004848:	e004      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;   
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004852:	bf00      	nop
    }
  } 
  
  return status; 
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e159      	b.n	8004b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004880:	2201      	movs	r2, #1
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	f040 8148 	bne.w	8004b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d005      	beq.n	80048b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d130      	bne.n	8004918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ec:	2201      	movs	r2, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 0201 	and.w	r2, r3, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b03      	cmp	r3, #3
 8004922:	d017      	beq.n	8004954 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2203      	movs	r2, #3
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d123      	bne.n	80049a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	08da      	lsrs	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3208      	adds	r2, #8
 8004968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	220f      	movs	r2, #15
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	08da      	lsrs	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3208      	adds	r2, #8
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0203 	and.w	r2, r3, #3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80a2 	beq.w	8004b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <HAL_GPIO_Init+0x2e8>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	4a56      	ldr	r2, [pc, #344]	; (8004b4c <HAL_GPIO_Init+0x2e8>)
 80049f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f8:	6453      	str	r3, [r2, #68]	; 0x44
 80049fa:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <HAL_GPIO_Init+0x2e8>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a06:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_GPIO_Init+0x2ec>)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_GPIO_Init+0x2f0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d019      	beq.n	8004a66 <HAL_GPIO_Init+0x202>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a48      	ldr	r2, [pc, #288]	; (8004b58 <HAL_GPIO_Init+0x2f4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_GPIO_Init+0x1fe>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a47      	ldr	r2, [pc, #284]	; (8004b5c <HAL_GPIO_Init+0x2f8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00d      	beq.n	8004a5e <HAL_GPIO_Init+0x1fa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a46      	ldr	r2, [pc, #280]	; (8004b60 <HAL_GPIO_Init+0x2fc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <HAL_GPIO_Init+0x1f6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a45      	ldr	r2, [pc, #276]	; (8004b64 <HAL_GPIO_Init+0x300>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_GPIO_Init+0x1f2>
 8004a52:	2304      	movs	r3, #4
 8004a54:	e008      	b.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a56:	2307      	movs	r3, #7
 8004a58:	e006      	b.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e004      	b.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e002      	b.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a66:	2300      	movs	r3, #0
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	f002 0203 	and.w	r2, r2, #3
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	4093      	lsls	r3, r2
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a78:	4935      	ldr	r1, [pc, #212]	; (8004b50 <HAL_GPIO_Init+0x2ec>)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ad4:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b04:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b28:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3301      	adds	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	f67f aea2 	bls.w	8004880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40013800 	.word	0x40013800
 8004b54:	40020000 	.word	0x40020000
 8004b58:	40020400 	.word	0x40020400
 8004b5c:	40020800 	.word	0x40020800
 8004b60:	40020c00 	.word	0x40020c00
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40013c00 	.word	0x40013c00

08004b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	e001      	b.n	8004b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bac:	787b      	ldrb	r3, [r7, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bb8:	e003      	b.n	8004bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	041a      	lsls	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	619a      	str	r2, [r3, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e264      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d075      	beq.n	8004cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bee:	4ba3      	ldr	r3, [pc, #652]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d00c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfa:	4ba0      	ldr	r3, [pc, #640]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d112      	bne.n	8004c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c06:	4b9d      	ldr	r3, [pc, #628]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	4b99      	ldr	r3, [pc, #612]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05b      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x108>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d157      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e23f      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d106      	bne.n	8004c44 <HAL_RCC_OscConfig+0x74>
 8004c36:	4b91      	ldr	r3, [pc, #580]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a90      	ldr	r2, [pc, #576]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e01d      	b.n	8004c80 <HAL_RCC_OscConfig+0xb0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x98>
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a8a      	ldr	r2, [pc, #552]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a87      	ldr	r2, [pc, #540]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e00b      	b.n	8004c80 <HAL_RCC_OscConfig+0xb0>
 8004c68:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a83      	ldr	r2, [pc, #524]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	4b81      	ldr	r3, [pc, #516]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a80      	ldr	r2, [pc, #512]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fe fb76 	bl	8003378 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c90:	f7fe fb72 	bl	8003378 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	; 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e204      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0xc0>
 8004cae:	e014      	b.n	8004cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fe fb62 	bl	8003378 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fe fb5e 	bl	8003378 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1f0      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	4b6c      	ldr	r3, [pc, #432]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0xe8>
 8004cd6:	e000      	b.n	8004cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d063      	beq.n	8004dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf2:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d11c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cfe:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d116      	bne.n	8004d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_RCC_OscConfig+0x152>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e1c4      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d22:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4952      	ldr	r1, [pc, #328]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d36:	e03a      	b.n	8004dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d40:	4b4f      	ldr	r3, [pc, #316]	; (8004e80 <HAL_RCC_OscConfig+0x2b0>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fe fb17 	bl	8003378 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fb13 	bl	8003378 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e1a5      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6c:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4940      	ldr	r1, [pc, #256]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	600b      	str	r3, [r1, #0]
 8004d80:	e015      	b.n	8004dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <HAL_RCC_OscConfig+0x2b0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe faf6 	bl	8003378 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d90:	f7fe faf2 	bl	8003378 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e184      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d030      	beq.n	8004e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc2:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <HAL_RCC_OscConfig+0x2b4>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fe fad6 	bl	8003378 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fe fad2 	bl	8003378 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e164      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x200>
 8004dee:	e015      	b.n	8004e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_RCC_OscConfig+0x2b4>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fe fabf 	bl	8003378 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dfe:	f7fe fabb 	bl	8003378 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e14d      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80a0 	beq.w	8004f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_OscConfig+0x2b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d121      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <HAL_RCC_OscConfig+0x2b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_RCC_OscConfig+0x2b8>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fe fa81 	bl	8003378 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e011      	b.n	8004e9e <HAL_RCC_OscConfig+0x2ce>
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	42470000 	.word	0x42470000
 8004e84:	42470e80 	.word	0x42470e80
 8004e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8c:	f7fe fa74 	bl	8003378 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e106      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCC_OscConfig+0x4e4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x2f0>
 8004eb2:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a80      	ldr	r2, [pc, #512]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebe:	e01c      	b.n	8004efa <HAL_RCC_OscConfig+0x32a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	d10c      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x312>
 8004ec8:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a7a      	ldr	r2, [pc, #488]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed4:	4b78      	ldr	r3, [pc, #480]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a77      	ldr	r2, [pc, #476]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	e00b      	b.n	8004efa <HAL_RCC_OscConfig+0x32a>
 8004ee2:	4b75      	ldr	r3, [pc, #468]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	4a74      	ldr	r2, [pc, #464]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
 8004eee:	4b72      	ldr	r3, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a71      	ldr	r2, [pc, #452]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d015      	beq.n	8004f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7fe fa39 	bl	8003378 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fe fa35 	bl	8003378 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0c5      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ee      	beq.n	8004f0a <HAL_RCC_OscConfig+0x33a>
 8004f2c:	e014      	b.n	8004f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2e:	f7fe fa23 	bl	8003378 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fe fa1f 	bl	8003378 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0af      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4c:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ee      	bne.n	8004f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5e:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a55      	ldr	r2, [pc, #340]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 809b 	beq.w	80050aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f74:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d05c      	beq.n	800503a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d141      	bne.n	800500c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f88:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <HAL_RCC_OscConfig+0x4ec>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8e:	f7fe f9f3 	bl	8003378 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fe f9ef 	bl	8003378 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e081      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa8:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	019b      	lsls	r3, r3, #6
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	4937      	ldr	r1, [pc, #220]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fde:	4b37      	ldr	r3, [pc, #220]	; (80050bc <HAL_RCC_OscConfig+0x4ec>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f9c8 	bl	8003378 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe f9c4 	bl	8003378 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e056      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x41c>
 800500a:	e04e      	b.n	80050aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCC_OscConfig+0x4ec>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe f9b1 	bl	8003378 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fe f9ad 	bl	8003378 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e03f      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x44a>
 8005038:	e037      	b.n	80050aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e032      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_RCC_OscConfig+0x4e8>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d028      	beq.n	80050a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d121      	bne.n	80050a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d11a      	bne.n	80050a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005076:	4013      	ands	r3, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800507c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800507e:	4293      	cmp	r3, r2
 8005080:	d111      	bne.n	80050a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40007000 	.word	0x40007000
 80050b8:	40023800 	.word	0x40023800
 80050bc:	42470060 	.word	0x42470060

080050c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0cc      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d4:	4b68      	ldr	r3, [pc, #416]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d90c      	bls.n	80050fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b65      	ldr	r3, [pc, #404]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0b8      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005114:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800511e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800512c:	4b53      	ldr	r3, [pc, #332]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a52      	ldr	r2, [pc, #328]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	494d      	ldr	r1, [pc, #308]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d044      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d119      	bne.n	800519e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e07f      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d003      	beq.n	800517e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517a:	2b03      	cmp	r3, #3
 800517c:	d107      	bne.n	800518e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517e:	4b3f      	ldr	r3, [pc, #252]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e06f      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518e:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e067      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 0203 	bic.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4934      	ldr	r1, [pc, #208]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b0:	f7fe f8e2 	bl	8003378 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b8:	f7fe f8de 	bl	8003378 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e04f      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	4b2b      	ldr	r3, [pc, #172]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 020c 	and.w	r2, r3, #12
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1eb      	bne.n	80051b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e0:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d20c      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e032      	b.n	800526e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4916      	ldr	r1, [pc, #88]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	490e      	ldr	r1, [pc, #56]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005246:	f000 f821 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800524a:	4602      	mov	r2, r0
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	490a      	ldr	r1, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	5ccb      	ldrb	r3, [r1, r3]
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe f842 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40023c00 	.word	0x40023c00
 800527c:	40023800 	.word	0x40023800
 8005280:	0800b088 	.word	0x0800b088
 8005284:	20000290 	.word	0x20000290
 8005288:	20000294 	.word	0x20000294

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	2300      	movs	r3, #0
 800529e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a4:	4b67      	ldr	r3, [pc, #412]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d00d      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x40>
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	f200 80bd 	bhi.w	8005430 <HAL_RCC_GetSysClockFreq+0x1a4>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x34>
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d003      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80052be:	e0b7      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4b61      	ldr	r3, [pc, #388]	; (8005448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052c2:	60bb      	str	r3, [r7, #8]
       break;
 80052c4:	e0b7      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c6:	4b61      	ldr	r3, [pc, #388]	; (800544c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80052c8:	60bb      	str	r3, [r7, #8]
      break;
 80052ca:	e0b4      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052cc:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04d      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e2:	4b58      	ldr	r3, [pc, #352]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	ea02 0800 	and.w	r8, r2, r0
 80052fa:	ea03 0901 	and.w	r9, r3, r1
 80052fe:	4640      	mov	r0, r8
 8005300:	4649      	mov	r1, r9
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	014b      	lsls	r3, r1, #5
 800530c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005310:	0142      	lsls	r2, r0, #5
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	ebb0 0008 	subs.w	r0, r0, r8
 800531a:	eb61 0109 	sbc.w	r1, r1, r9
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	018b      	lsls	r3, r1, #6
 8005328:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800532c:	0182      	lsls	r2, r0, #6
 800532e:	1a12      	subs	r2, r2, r0
 8005330:	eb63 0301 	sbc.w	r3, r3, r1
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	00d9      	lsls	r1, r3, #3
 800533e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005342:	00d0      	lsls	r0, r2, #3
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	eb12 0208 	adds.w	r2, r2, r8
 800534c:	eb43 0309 	adc.w	r3, r3, r9
 8005350:	f04f 0000 	mov.w	r0, #0
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	0259      	lsls	r1, r3, #9
 800535a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800535e:	0250      	lsls	r0, r2, #9
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	461a      	mov	r2, r3
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	f7fb fda0 	bl	8000eb4 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	e04a      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	ea02 0400 	and.w	r4, r2, r0
 8005396:	ea03 0501 	and.w	r5, r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	014b      	lsls	r3, r1, #5
 80053a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053ac:	0142      	lsls	r2, r0, #5
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	1b00      	subs	r0, r0, r4
 80053b4:	eb61 0105 	sbc.w	r1, r1, r5
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	018b      	lsls	r3, r1, #6
 80053c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c6:	0182      	lsls	r2, r0, #6
 80053c8:	1a12      	subs	r2, r2, r0
 80053ca:	eb63 0301 	sbc.w	r3, r3, r1
 80053ce:	f04f 0000 	mov.w	r0, #0
 80053d2:	f04f 0100 	mov.w	r1, #0
 80053d6:	00d9      	lsls	r1, r3, #3
 80053d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053dc:	00d0      	lsls	r0, r2, #3
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	1912      	adds	r2, r2, r4
 80053e4:	eb45 0303 	adc.w	r3, r5, r3
 80053e8:	f04f 0000 	mov.w	r0, #0
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	0299      	lsls	r1, r3, #10
 80053f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053f6:	0290      	lsls	r0, r2, #10
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	f7fb fd54 	bl	8000eb4 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	0c1b      	lsrs	r3, r3, #16
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	3301      	adds	r3, #1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	60bb      	str	r3, [r7, #8]
      break;
 800542e:	e002      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005432:	60bb      	str	r3, [r7, #8]
      break;
 8005434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005436:	68bb      	ldr	r3, [r7, #8]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	00f42400 	.word	0x00f42400
 800544c:	007a1200 	.word	0x007a1200

08005450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <HAL_RCC_GetHCLKFreq+0x14>)
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000290 	.word	0x20000290

08005468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800546c:	f7ff fff0 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0a9b      	lsrs	r3, r3, #10
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK1Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	0800b098 	.word	0x0800b098

08005490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005494:	f7ff ffdc 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0b5b      	lsrs	r3, r3, #13
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	0800b098 	.word	0x0800b098

080054b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e07b      	b.n	80055c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d009      	beq.n	80054f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
 80054e2:	e005      	b.n	80054f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd fc94 	bl	8002e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	ea42 0103 	orr.w	r1, r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f003 0104 	and.w	r1, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0210 	and.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_SPI_Transmit_IT+0x20>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e06f      	b.n	80056cc <HAL_SPI_Transmit_IT+0x100>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_SPI_Transmit_IT+0x34>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005604:	e05d      	b.n	80056c2 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d002      	beq.n	8005618 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005616:	e054      	b.n	80056c2 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2203      	movs	r2, #3
 800561c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_SPI_Transmit_IT+0x10c>)
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
 800565e:	e002      	b.n	8005666 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_SPI_Transmit_IT+0x110>)
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566e:	d10f      	bne.n	8005690 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800569e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d008      	beq.n	80056c0 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e000      	b.n	80056c2 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80056c0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	08005963 	.word	0x08005963
 80056dc:	0800591d 	.word	0x0800591d

080056e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	099b      	lsrs	r3, r3, #6
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
    return;
 8005722:	e0d7      	b.n	80058d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_SPI_IRQHandler+0x66>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	09db      	lsrs	r3, r3, #7
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
    return;
 8005744:	e0c6      	b.n	80058d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10c      	bne.n	800576c <HAL_SPI_IRQHandler+0x8c>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	099b      	lsrs	r3, r3, #6
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80b4 	beq.w	80058d4 <HAL_SPI_IRQHandler+0x1f4>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80ad 	beq.w	80058d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	099b      	lsrs	r3, r3, #6
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d023      	beq.n	80057ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b03      	cmp	r3, #3
 8005790:	d011      	beq.n	80057b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 0204 	orr.w	r2, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	e00b      	b.n	80057ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]
        return;
 80057cc:	e082      	b.n	80058d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00c      	beq.n	800582a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	f043 0208 	orr.w	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800581c:	2300      	movs	r3, #0
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04f      	beq.n	80058d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005840:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_SPI_IRQHandler+0x17e>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d034      	beq.n	80058c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0203 	bic.w	r2, r2, #3
 800586c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_SPI_IRQHandler+0x1fc>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fd62 	bl	800434c <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a6:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <HAL_SPI_IRQHandler+0x1fc>)
 80058a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fd4c 	bl	800434c <HAL_DMA_Abort_IT>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80058c6:	e003      	b.n	80058d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f809 	bl	80058e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80058ce:	e000      	b.n	80058d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80058d0:	bf00      	nop
    return;
 80058d2:	bf00      	nop
  }
}
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	080058f5 	.word	0x080058f5

080058e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ffe6 	bl	80058e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8f1 	bl	8005b3c <SPI_CloseTx_ISR>
  }
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8cf 	bl	8005b3c <SPI_CloseTx_ISR>
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059b8:	f7fd fcde 	bl	8003378 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059c8:	f7fd fcd6 	bl	8003378 <HAL_GetTick>
 80059cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ce:	4b39      	ldr	r3, [pc, #228]	; (8005ab4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	015b      	lsls	r3, r3, #5
 80059d4:	0d1b      	lsrs	r3, r3, #20
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059de:	e054      	b.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d050      	beq.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059e8:	f7fd fcc6 	bl	8003378 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d902      	bls.n	80059fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d13d      	bne.n	8005a7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a16:	d111      	bne.n	8005a3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a20:	d004      	beq.n	8005a2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2a:	d107      	bne.n	8005a3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a44:	d10f      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e017      	b.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d19b      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000290 	.word	0x20000290

08005ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <SPI_EndRxTxTransaction+0x7c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <SPI_EndRxTxTransaction+0x80>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0d5b      	lsrs	r3, r3, #21
 8005ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae2:	d112      	bne.n	8005b0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff ff5a 	bl	80059a8 <SPI_WaitFlagStateUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00f      	b.n	8005b2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d0f2      	beq.n	8005b0a <SPI_EndRxTxTransaction+0x52>
 8005b24:	e000      	b.n	8005b28 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b26:	bf00      	nop
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000290 	.word	0x20000290
 8005b38:	165e9f81 	.word	0x165e9f81

08005b3c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005b44:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <SPI_CloseTx_ISR+0xbc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <SPI_CloseTx_ISR+0xc0>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a5b      	lsrs	r3, r3, #9
 8005b50:	2264      	movs	r2, #100	; 0x64
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b58:	f7fd fc0e 	bl	8003378 <HAL_GetTick>
 8005b5c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b70:	e009      	b.n	8005b86 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0eb      	beq.n	8005b5e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b94:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	2164      	movs	r1, #100	; 0x64
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff8c 	bl	8005ab8 <SPI_EndRxTxTransaction>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff fe7d 	bl	80058e0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005be6:	e002      	b.n	8005bee <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fc fff9 	bl	8002be0 <HAL_SPI_TxCpltCallback>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000290 	.word	0x20000290
 8005bfc:	057619f1 	.word	0x057619f1

08005c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e041      	b.n	8005c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fd f956 	bl	8002ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f000 fade 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e03c      	b.n	8005d32 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_TIM_Base_Start+0xa0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d018      	beq.n	8005cfc <HAL_TIM_Base_Start+0x5c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d013      	beq.n	8005cfc <HAL_TIM_Base_Start+0x5c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_TIM_Base_Start+0xa4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00e      	beq.n	8005cfc <HAL_TIM_Base_Start+0x5c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_TIM_Base_Start+0xa8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d009      	beq.n	8005cfc <HAL_TIM_Base_Start+0x5c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <HAL_TIM_Base_Start+0xac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <HAL_TIM_Base_Start+0x5c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIM_Base_Start+0xb0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d111      	bne.n	8005d20 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b06      	cmp	r3, #6
 8005d0c:	d010      	beq.n	8005d30 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	e007      	b.n	8005d30 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40014000 	.word	0x40014000

08005d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e044      	b.n	8005df6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d013      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <HAL_TIM_Base_Start_IT+0xb8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a17      	ldr	r2, [pc, #92]	; (8005e10 <HAL_TIM_Base_Start_IT+0xbc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <HAL_TIM_Base_Start_IT+0xc0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d111      	bne.n	8005de4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b06      	cmp	r3, #6
 8005dd0:	d010      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de2:	e007      	b.n	8005df4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40014000 	.word	0x40014000

08005e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9b2 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9a4 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9b5 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0204 	mvn.w	r2, #4
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f988 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f97a 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f98b 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0208 	mvn.w	r2, #8
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f95e 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f950 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f961 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0210 	mvn.w	r2, #16
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2208      	movs	r2, #8
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f934 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f926 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f937 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0201 	mvn.w	r2, #1
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fc fe38 	bl	8002c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b80      	cmp	r3, #128	; 0x80
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 faae 	bl	8006524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8fc 	bl	80061ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0220 	mvn.w	r2, #32
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa78 	bl	8006510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIM_ConfigClockSource+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e0b3      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x180>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800605e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006078:	d03e      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0xd0>
 800607a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607e:	f200 8087 	bhi.w	8006190 <HAL_TIM_ConfigClockSource+0x168>
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	f000 8085 	beq.w	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	d87f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 8006090:	2b70      	cmp	r3, #112	; 0x70
 8006092:	d01a      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xa2>
 8006094:	2b70      	cmp	r3, #112	; 0x70
 8006096:	d87b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d050      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x116>
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d877      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d03c      	beq.n	800611e <HAL_TIM_ConfigClockSource+0xf6>
 80060a4:	2b50      	cmp	r3, #80	; 0x50
 80060a6:	d873      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d058      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x136>
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d86f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d064      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x156>
 80060b4:	2b30      	cmp	r3, #48	; 0x30
 80060b6:	d86b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d060      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x156>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d867      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05c      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x156>
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d05a      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060c8:	e062      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f000 f98b 	bl	80063f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	609a      	str	r2, [r3, #8]
      break;
 80060f6:	e04e      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f000 f974 	bl	80063f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800611a:	609a      	str	r2, [r3, #8]
      break;
 800611c:	e03b      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 f8e8 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2150      	movs	r1, #80	; 0x50
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f941 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 800613c:	e02b      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	f000 f907 	bl	800635e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2160      	movs	r1, #96	; 0x60
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f931 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 800615c:	e01b      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	461a      	mov	r2, r3
 800616c:	f000 f8c8 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f921 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 800617c:	e00b      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f000 f918 	bl	80063be <TIM_ITRx_SetConfig>
        break;
 800618e:	e002      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <TIM_Base_SetConfig+0xe4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00f      	beq.n	8006238 <TIM_Base_SetConfig+0x38>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d00b      	beq.n	8006238 <TIM_Base_SetConfig+0x38>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a31      	ldr	r2, [pc, #196]	; (80062e8 <TIM_Base_SetConfig+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_Base_SetConfig+0x38>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a30      	ldr	r2, [pc, #192]	; (80062ec <TIM_Base_SetConfig+0xec>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0x38>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <TIM_Base_SetConfig+0xf0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d108      	bne.n	800624a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <TIM_Base_SetConfig+0xe4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01b      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d017      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <TIM_Base_SetConfig+0xe8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a21      	ldr	r2, [pc, #132]	; (80062ec <TIM_Base_SetConfig+0xec>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a20      	ldr	r2, [pc, #128]	; (80062f0 <TIM_Base_SetConfig+0xf0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <TIM_Base_SetConfig+0xf4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <TIM_Base_SetConfig+0xf8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <TIM_Base_SetConfig+0xfc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <TIM_Base_SetConfig+0xe4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 030a 	bic.w	r3, r3, #10
 800633c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0210 	bic.w	r2, r3, #16
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	031b      	lsls	r3, r3, #12
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800639a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	f043 0307 	orr.w	r3, r3, #7
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	609a      	str	r2, [r3, #8]
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800640e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	431a      	orrs	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006448:	2302      	movs	r3, #2
 800644a:	e050      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d013      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a16      	ldr	r2, [pc, #88]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a13      	ldr	r2, [pc, #76]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40010000 	.word	0x40010000
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800
 8006508:	40000c00 	.word	0x40000c00
 800650c:	40014000 	.word	0x40014000

08006510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e03f      	b.n	80065ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fc fcf6 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc85 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b08a      	sub	sp, #40	; 0x28
 80065d6:	af02      	add	r7, sp, #8
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d17c      	bne.n	80066ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_UART_Transmit+0x2c>
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e075      	b.n	80066ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_UART_Transmit+0x3e>
 800660c:	2302      	movs	r3, #2
 800660e:	e06e      	b.n	80066ee <HAL_UART_Transmit+0x11c>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2221      	movs	r2, #33	; 0x21
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006626:	f7fc fea7 	bl	8003378 <HAL_GetTick>
 800662a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006640:	d108      	bne.n	8006654 <HAL_UART_Transmit+0x82>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	e003      	b.n	800665c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006664:	e02a      	b.n	80066bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fa47 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e036      	b.n	80066ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10b      	bne.n	800669e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	3302      	adds	r3, #2
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	e007      	b.n	80066ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1cf      	bne.n	8006666 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2200      	movs	r2, #0
 80066ce:	2140      	movs	r1, #64	; 0x40
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fa17 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e006      	b.n	80066ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b20      	cmp	r3, #32
 800670e:	d11d      	bne.n	800674c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_UART_Receive_IT+0x26>
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e016      	b.n	800674e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_UART_Receive_IT+0x38>
 800672a:	2302      	movs	r3, #2
 800672c:	e00f      	b.n	800674e <HAL_UART_Receive_IT+0x58>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	461a      	mov	r2, r3
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fa28 	bl	8006b98 <UART_Start_Receive_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	e000      	b.n	800674e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006778:	2300      	movs	r3, #0
 800677a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_UART_IRQHandler+0x52>
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fadb 	bl	8006d5e <UART_Receive_IT>
      return;
 80067a8:	e17c      	b.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80b1 	beq.w	8006914 <HAL_UART_IRQHandler+0x1bc>
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_UART_IRQHandler+0x70>
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80a6 	beq.w	8006914 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_UART_IRQHandler+0x90>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f043 0201 	orr.w	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_UART_IRQHandler+0xb0>
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	f043 0202 	orr.w	r2, r3, #2
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_UART_IRQHandler+0xd0>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00f      	beq.n	8006852 <HAL_UART_IRQHandler+0xfa>
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_UART_IRQHandler+0xee>
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0208 	orr.w	r2, r3, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 811f 	beq.w	8006a9a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <HAL_UART_IRQHandler+0x11e>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa74 	bl	8006d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <HAL_UART_IRQHandler+0x146>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d031      	beq.n	8006902 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9b4 	bl	8006c0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d123      	bne.n	80068fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	4a77      	ldr	r2, [pc, #476]	; (8006aac <HAL_UART_IRQHandler+0x354>)
 80068d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd fd38 	bl	800434c <HAL_DMA_Abort_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d016      	beq.n	8006910 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	e00e      	b.n	8006910 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8f0 	bl	8006ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	e00a      	b.n	8006910 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8ec 	bl	8006ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	e006      	b.n	8006910 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8e8 	bl	8006ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800690e:	e0c4      	b.n	8006a9a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	bf00      	nop
    return;
 8006912:	e0c2      	b.n	8006a9a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	2b01      	cmp	r3, #1
 800691a:	f040 80a2 	bne.w	8006a62 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 809c 	beq.w	8006a62 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8096 	beq.w	8006a62 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d14f      	bne.n	80069fa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006964:	8a3b      	ldrh	r3, [r7, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8099 	beq.w	8006a9e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006970:	8a3a      	ldrh	r2, [r7, #16]
 8006972:	429a      	cmp	r2, r3
 8006974:	f080 8093 	bcs.w	8006a9e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8a3a      	ldrh	r2, [r7, #16]
 800697c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006988:	d02b      	beq.n	80069e2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006998:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0210 	bic.w	r2, r2, #16
 80069d6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fd fc45 	bl	800426c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f87a 	bl	8006aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80069f8:	e051      	b.n	8006a9e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d047      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006a12:	8a7b      	ldrh	r3, [r7, #18]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d044      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a26:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0210 	bic.w	r2, r2, #16
 8006a54:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a56:	8a7b      	ldrh	r3, [r7, #18]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f846 	bl	8006aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006a60:	e01f      	b.n	8006aa2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_UART_IRQHandler+0x326>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f909 	bl	8006c8e <UART_Transmit_IT>
    return;
 8006a7c:	e012      	b.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00d      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d008      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f94b 	bl	8006d2e <UART_EndTransmit_IT>
    return;
 8006a98:	e004      	b.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
    return;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006aa2:	bf00      	nop
  }
}
 8006aa4:	3728      	adds	r7, #40	; 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	08006c67 	.word	0x08006c67

08006ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b14:	e02c      	b.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d028      	beq.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b24:	f7fc fc28 	bl	8003378 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d21d      	bcs.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e00f      	b.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d0c3      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2222      	movs	r2, #34	; 0x22
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bdc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0201 	orr.w	r2, r2, #1
 8006bec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0220 	orr.w	r2, r2, #32
 8006bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695a      	ldr	r2, [r3, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d107      	bne.n	8006c4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0210 	bic.w	r2, r2, #16
 8006c4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff ff29 	bl	8006ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b21      	cmp	r3, #33	; 0x21
 8006ca0:	d13e      	bne.n	8006d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d114      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d110      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	1c9a      	adds	r2, r3, #2
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	621a      	str	r2, [r3, #32]
 8006cd4:	e008      	b.n	8006ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6211      	str	r1, [r2, #32]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10f      	bne.n	8006d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e000      	b.n	8006d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d20:	2302      	movs	r3, #2
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff feae 	bl	8006ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b22      	cmp	r3, #34	; 0x22
 8006d70:	f040 8087 	bne.w	8006e82 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7c:	d117      	bne.n	8006dae <UART_Receive_IT+0x50>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d113      	bne.n	8006dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
 8006dac:	e026      	b.n	8006dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	d007      	beq.n	8006dd2 <UART_Receive_IT+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <UART_Receive_IT+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	e008      	b.n	8006df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d136      	bne.n	8006e7e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0220 	bic.w	r2, r2, #32
 8006e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10e      	bne.n	8006e6e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0210 	bic.w	r2, r2, #16
 8006e5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fe40 	bl	8006aec <HAL_UARTEx_RxEventCallback>
 8006e6c:	e002      	b.n	8006e74 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fe28 	bl	8006ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e002      	b.n	8006e84 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	b09f      	sub	sp, #124	; 0x7c
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	68d9      	ldr	r1, [r3, #12]
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	ea40 0301 	orr.w	r3, r0, r1
 8006eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ed0:	f021 010c 	bic.w	r1, r1, #12
 8006ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eea:	6999      	ldr	r1, [r3, #24]
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	ea40 0301 	orr.w	r3, r0, r1
 8006ef4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4bc5      	ldr	r3, [pc, #788]	; (8007210 <UART_SetConfig+0x384>)
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d004      	beq.n	8006f0a <UART_SetConfig+0x7e>
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4bc3      	ldr	r3, [pc, #780]	; (8007214 <UART_SetConfig+0x388>)
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d103      	bne.n	8006f12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f0a:	f7fe fac1 	bl	8005490 <HAL_RCC_GetPCLK2Freq>
 8006f0e:	6778      	str	r0, [r7, #116]	; 0x74
 8006f10:	e002      	b.n	8006f18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f12:	f7fe faa9 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8006f16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f20:	f040 80b6 	bne.w	8007090 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f26:	461c      	mov	r4, r3
 8006f28:	f04f 0500 	mov.w	r5, #0
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	462b      	mov	r3, r5
 8006f30:	1891      	adds	r1, r2, r2
 8006f32:	6439      	str	r1, [r7, #64]	; 0x40
 8006f34:	415b      	adcs	r3, r3
 8006f36:	647b      	str	r3, [r7, #68]	; 0x44
 8006f38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f3c:	1912      	adds	r2, r2, r4
 8006f3e:	eb45 0303 	adc.w	r3, r5, r3
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	00d9      	lsls	r1, r3, #3
 8006f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f50:	00d0      	lsls	r0, r2, #3
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	1911      	adds	r1, r2, r4
 8006f58:	6639      	str	r1, [r7, #96]	; 0x60
 8006f5a:	416b      	adcs	r3, r5
 8006f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f78:	f7f9 ff9c 	bl	8000eb4 <__aeabi_uldivmod>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4ba5      	ldr	r3, [pc, #660]	; (8007218 <UART_SetConfig+0x38c>)
 8006f82:	fba3 2302 	umull	r2, r3, r3, r2
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	011e      	lsls	r6, r3, #4
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8c:	461c      	mov	r4, r3
 8006f8e:	f04f 0500 	mov.w	r5, #0
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	1891      	adds	r1, r2, r2
 8006f98:	6339      	str	r1, [r7, #48]	; 0x30
 8006f9a:	415b      	adcs	r3, r3
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fa2:	1912      	adds	r2, r2, r4
 8006fa4:	eb45 0303 	adc.w	r3, r5, r3
 8006fa8:	f04f 0000 	mov.w	r0, #0
 8006fac:	f04f 0100 	mov.w	r1, #0
 8006fb0:	00d9      	lsls	r1, r3, #3
 8006fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb6:	00d0      	lsls	r0, r2, #3
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	1911      	adds	r1, r2, r4
 8006fbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fc0:	416b      	adcs	r3, r5
 8006fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	1891      	adds	r1, r2, r2
 8006fd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fd2:	415b      	adcs	r3, r3
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006fde:	f7f9 ff69 	bl	8000eb4 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b8c      	ldr	r3, [pc, #560]	; (8007218 <UART_SetConfig+0x38c>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a87      	ldr	r2, [pc, #540]	; (8007218 <UART_SetConfig+0x38c>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007008:	441e      	add	r6, r3
 800700a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700c:	4618      	mov	r0, r3
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	1894      	adds	r4, r2, r2
 8007018:	623c      	str	r4, [r7, #32]
 800701a:	415b      	adcs	r3, r3
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007022:	1812      	adds	r2, r2, r0
 8007024:	eb41 0303 	adc.w	r3, r1, r3
 8007028:	f04f 0400 	mov.w	r4, #0
 800702c:	f04f 0500 	mov.w	r5, #0
 8007030:	00dd      	lsls	r5, r3, #3
 8007032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007036:	00d4      	lsls	r4, r2, #3
 8007038:	4622      	mov	r2, r4
 800703a:	462b      	mov	r3, r5
 800703c:	1814      	adds	r4, r2, r0
 800703e:	653c      	str	r4, [r7, #80]	; 0x50
 8007040:	414b      	adcs	r3, r1
 8007042:	657b      	str	r3, [r7, #84]	; 0x54
 8007044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	461a      	mov	r2, r3
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	1891      	adds	r1, r2, r2
 8007050:	61b9      	str	r1, [r7, #24]
 8007052:	415b      	adcs	r3, r3
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800705a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800705e:	f7f9 ff29 	bl	8000eb4 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b6c      	ldr	r3, [pc, #432]	; (8007218 <UART_SetConfig+0x38c>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a67      	ldr	r2, [pc, #412]	; (8007218 <UART_SetConfig+0x38c>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 0207 	and.w	r2, r3, #7
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4432      	add	r2, r6
 800708c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800708e:	e0b9      	b.n	8007204 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007092:	461c      	mov	r4, r3
 8007094:	f04f 0500 	mov.w	r5, #0
 8007098:	4622      	mov	r2, r4
 800709a:	462b      	mov	r3, r5
 800709c:	1891      	adds	r1, r2, r2
 800709e:	6139      	str	r1, [r7, #16]
 80070a0:	415b      	adcs	r3, r3
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a8:	1912      	adds	r2, r2, r4
 80070aa:	eb45 0303 	adc.w	r3, r5, r3
 80070ae:	f04f 0000 	mov.w	r0, #0
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	00d9      	lsls	r1, r3, #3
 80070b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070bc:	00d0      	lsls	r0, r2, #3
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	eb12 0804 	adds.w	r8, r2, r4
 80070c6:	eb43 0905 	adc.w	r9, r3, r5
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f04f 0100 	mov.w	r1, #0
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	008b      	lsls	r3, r1, #2
 80070de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070e2:	0082      	lsls	r2, r0, #2
 80070e4:	4640      	mov	r0, r8
 80070e6:	4649      	mov	r1, r9
 80070e8:	f7f9 fee4 	bl	8000eb4 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4b49      	ldr	r3, [pc, #292]	; (8007218 <UART_SetConfig+0x38c>)
 80070f2:	fba3 2302 	umull	r2, r3, r3, r2
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	011e      	lsls	r6, r3, #4
 80070fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fc:	4618      	mov	r0, r3
 80070fe:	f04f 0100 	mov.w	r1, #0
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	1894      	adds	r4, r2, r2
 8007108:	60bc      	str	r4, [r7, #8]
 800710a:	415b      	adcs	r3, r3
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007112:	1812      	adds	r2, r2, r0
 8007114:	eb41 0303 	adc.w	r3, r1, r3
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	f04f 0500 	mov.w	r5, #0
 8007120:	00dd      	lsls	r5, r3, #3
 8007122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007126:	00d4      	lsls	r4, r2, #3
 8007128:	4622      	mov	r2, r4
 800712a:	462b      	mov	r3, r5
 800712c:	1814      	adds	r4, r2, r0
 800712e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007130:	414b      	adcs	r3, r1
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	f04f 0100 	mov.w	r1, #0
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	008b      	lsls	r3, r1, #2
 8007148:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800714c:	0082      	lsls	r2, r0, #2
 800714e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007152:	f7f9 feaf 	bl	8000eb4 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <UART_SetConfig+0x38c>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <UART_SetConfig+0x38c>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800717a:	441e      	add	r6, r3
 800717c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717e:	4618      	mov	r0, r3
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	1894      	adds	r4, r2, r2
 800718a:	603c      	str	r4, [r7, #0]
 800718c:	415b      	adcs	r3, r3
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007194:	1812      	adds	r2, r2, r0
 8007196:	eb41 0303 	adc.w	r3, r1, r3
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	f04f 0500 	mov.w	r5, #0
 80071a2:	00dd      	lsls	r5, r3, #3
 80071a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071a8:	00d4      	lsls	r4, r2, #3
 80071aa:	4622      	mov	r2, r4
 80071ac:	462b      	mov	r3, r5
 80071ae:	eb12 0a00 	adds.w	sl, r2, r0
 80071b2:	eb43 0b01 	adc.w	fp, r3, r1
 80071b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	008b      	lsls	r3, r1, #2
 80071ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071ce:	0082      	lsls	r2, r0, #2
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 fe6e 	bl	8000eb4 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <UART_SetConfig+0x38c>)
 80071de:	fba3 1302 	umull	r1, r3, r3, r2
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	2164      	movs	r1, #100	; 0x64
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	3332      	adds	r3, #50	; 0x32
 80071f0:	4a09      	ldr	r2, [pc, #36]	; (8007218 <UART_SetConfig+0x38c>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4432      	add	r2, r6
 8007202:	609a      	str	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	377c      	adds	r7, #124	; 0x7c
 8007208:	46bd      	mov	sp, r7
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	bf00      	nop
 8007210:	40011000 	.word	0x40011000
 8007214:	40011400 	.word	0x40011400
 8007218:	51eb851f 	.word	0x51eb851f

0800721c <__errno>:
 800721c:	4b01      	ldr	r3, [pc, #4]	; (8007224 <__errno+0x8>)
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	2000029c 	.word	0x2000029c

08007228 <__libc_init_array>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	4d0d      	ldr	r5, [pc, #52]	; (8007260 <__libc_init_array+0x38>)
 800722c:	4c0d      	ldr	r4, [pc, #52]	; (8007264 <__libc_init_array+0x3c>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	2600      	movs	r6, #0
 8007234:	42a6      	cmp	r6, r4
 8007236:	d109      	bne.n	800724c <__libc_init_array+0x24>
 8007238:	4d0b      	ldr	r5, [pc, #44]	; (8007268 <__libc_init_array+0x40>)
 800723a:	4c0c      	ldr	r4, [pc, #48]	; (800726c <__libc_init_array+0x44>)
 800723c:	f003 feee 	bl	800b01c <_init>
 8007240:	1b64      	subs	r4, r4, r5
 8007242:	10a4      	asrs	r4, r4, #2
 8007244:	2600      	movs	r6, #0
 8007246:	42a6      	cmp	r6, r4
 8007248:	d105      	bne.n	8007256 <__libc_init_array+0x2e>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007250:	4798      	blx	r3
 8007252:	3601      	adds	r6, #1
 8007254:	e7ee      	b.n	8007234 <__libc_init_array+0xc>
 8007256:	f855 3b04 	ldr.w	r3, [r5], #4
 800725a:	4798      	blx	r3
 800725c:	3601      	adds	r6, #1
 800725e:	e7f2      	b.n	8007246 <__libc_init_array+0x1e>
 8007260:	0800b670 	.word	0x0800b670
 8007264:	0800b670 	.word	0x0800b670
 8007268:	0800b670 	.word	0x0800b670
 800726c:	0800b674 	.word	0x0800b674

08007270 <memset>:
 8007270:	4402      	add	r2, r0
 8007272:	4603      	mov	r3, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	d100      	bne.n	800727a <memset+0xa>
 8007278:	4770      	bx	lr
 800727a:	f803 1b01 	strb.w	r1, [r3], #1
 800727e:	e7f9      	b.n	8007274 <memset+0x4>

08007280 <__cvt>:
 8007280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007284:	ec55 4b10 	vmov	r4, r5, d0
 8007288:	2d00      	cmp	r5, #0
 800728a:	460e      	mov	r6, r1
 800728c:	4619      	mov	r1, r3
 800728e:	462b      	mov	r3, r5
 8007290:	bfbb      	ittet	lt
 8007292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007296:	461d      	movlt	r5, r3
 8007298:	2300      	movge	r3, #0
 800729a:	232d      	movlt	r3, #45	; 0x2d
 800729c:	700b      	strb	r3, [r1, #0]
 800729e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072a4:	4691      	mov	r9, r2
 80072a6:	f023 0820 	bic.w	r8, r3, #32
 80072aa:	bfbc      	itt	lt
 80072ac:	4622      	movlt	r2, r4
 80072ae:	4614      	movlt	r4, r2
 80072b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072b4:	d005      	beq.n	80072c2 <__cvt+0x42>
 80072b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ba:	d100      	bne.n	80072be <__cvt+0x3e>
 80072bc:	3601      	adds	r6, #1
 80072be:	2102      	movs	r1, #2
 80072c0:	e000      	b.n	80072c4 <__cvt+0x44>
 80072c2:	2103      	movs	r1, #3
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	ab02      	add	r3, sp, #8
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	ec45 4b10 	vmov	d0, r4, r5
 80072d0:	4653      	mov	r3, sl
 80072d2:	4632      	mov	r2, r6
 80072d4:	f000 fcec 	bl	8007cb0 <_dtoa_r>
 80072d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072dc:	4607      	mov	r7, r0
 80072de:	d102      	bne.n	80072e6 <__cvt+0x66>
 80072e0:	f019 0f01 	tst.w	r9, #1
 80072e4:	d022      	beq.n	800732c <__cvt+0xac>
 80072e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072ea:	eb07 0906 	add.w	r9, r7, r6
 80072ee:	d110      	bne.n	8007312 <__cvt+0x92>
 80072f0:	783b      	ldrb	r3, [r7, #0]
 80072f2:	2b30      	cmp	r3, #48	; 0x30
 80072f4:	d10a      	bne.n	800730c <__cvt+0x8c>
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7f9 fbeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007302:	b918      	cbnz	r0, 800730c <__cvt+0x8c>
 8007304:	f1c6 0601 	rsb	r6, r6, #1
 8007308:	f8ca 6000 	str.w	r6, [sl]
 800730c:	f8da 3000 	ldr.w	r3, [sl]
 8007310:	4499      	add	r9, r3
 8007312:	2200      	movs	r2, #0
 8007314:	2300      	movs	r3, #0
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800731e:	b108      	cbz	r0, 8007324 <__cvt+0xa4>
 8007320:	f8cd 900c 	str.w	r9, [sp, #12]
 8007324:	2230      	movs	r2, #48	; 0x30
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	454b      	cmp	r3, r9
 800732a:	d307      	bcc.n	800733c <__cvt+0xbc>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007330:	1bdb      	subs	r3, r3, r7
 8007332:	4638      	mov	r0, r7
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	b004      	add	sp, #16
 8007338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733c:	1c59      	adds	r1, r3, #1
 800733e:	9103      	str	r1, [sp, #12]
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	e7f0      	b.n	8007326 <__cvt+0xa6>

08007344 <__exponent>:
 8007344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007346:	4603      	mov	r3, r0
 8007348:	2900      	cmp	r1, #0
 800734a:	bfb8      	it	lt
 800734c:	4249      	neglt	r1, r1
 800734e:	f803 2b02 	strb.w	r2, [r3], #2
 8007352:	bfb4      	ite	lt
 8007354:	222d      	movlt	r2, #45	; 0x2d
 8007356:	222b      	movge	r2, #43	; 0x2b
 8007358:	2909      	cmp	r1, #9
 800735a:	7042      	strb	r2, [r0, #1]
 800735c:	dd2a      	ble.n	80073b4 <__exponent+0x70>
 800735e:	f10d 0407 	add.w	r4, sp, #7
 8007362:	46a4      	mov	ip, r4
 8007364:	270a      	movs	r7, #10
 8007366:	46a6      	mov	lr, r4
 8007368:	460a      	mov	r2, r1
 800736a:	fb91 f6f7 	sdiv	r6, r1, r7
 800736e:	fb07 1516 	mls	r5, r7, r6, r1
 8007372:	3530      	adds	r5, #48	; 0x30
 8007374:	2a63      	cmp	r2, #99	; 0x63
 8007376:	f104 34ff 	add.w	r4, r4, #4294967295
 800737a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800737e:	4631      	mov	r1, r6
 8007380:	dcf1      	bgt.n	8007366 <__exponent+0x22>
 8007382:	3130      	adds	r1, #48	; 0x30
 8007384:	f1ae 0502 	sub.w	r5, lr, #2
 8007388:	f804 1c01 	strb.w	r1, [r4, #-1]
 800738c:	1c44      	adds	r4, r0, #1
 800738e:	4629      	mov	r1, r5
 8007390:	4561      	cmp	r1, ip
 8007392:	d30a      	bcc.n	80073aa <__exponent+0x66>
 8007394:	f10d 0209 	add.w	r2, sp, #9
 8007398:	eba2 020e 	sub.w	r2, r2, lr
 800739c:	4565      	cmp	r5, ip
 800739e:	bf88      	it	hi
 80073a0:	2200      	movhi	r2, #0
 80073a2:	4413      	add	r3, r2
 80073a4:	1a18      	subs	r0, r3, r0
 80073a6:	b003      	add	sp, #12
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073b2:	e7ed      	b.n	8007390 <__exponent+0x4c>
 80073b4:	2330      	movs	r3, #48	; 0x30
 80073b6:	3130      	adds	r1, #48	; 0x30
 80073b8:	7083      	strb	r3, [r0, #2]
 80073ba:	70c1      	strb	r1, [r0, #3]
 80073bc:	1d03      	adds	r3, r0, #4
 80073be:	e7f1      	b.n	80073a4 <__exponent+0x60>

080073c0 <_printf_float>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	ed2d 8b02 	vpush	{d8}
 80073c8:	b08d      	sub	sp, #52	; 0x34
 80073ca:	460c      	mov	r4, r1
 80073cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073d0:	4616      	mov	r6, r2
 80073d2:	461f      	mov	r7, r3
 80073d4:	4605      	mov	r5, r0
 80073d6:	f001 fa57 	bl	8008888 <_localeconv_r>
 80073da:	f8d0 a000 	ldr.w	sl, [r0]
 80073de:	4650      	mov	r0, sl
 80073e0:	f7f8 fefe 	bl	80001e0 <strlen>
 80073e4:	2300      	movs	r3, #0
 80073e6:	930a      	str	r3, [sp, #40]	; 0x28
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073f4:	3307      	adds	r3, #7
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	f103 0208 	add.w	r2, r3, #8
 80073fe:	f8c8 2000 	str.w	r2, [r8]
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800740a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800740e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007412:	9307      	str	r3, [sp, #28]
 8007414:	f8cd 8018 	str.w	r8, [sp, #24]
 8007418:	ee08 0a10 	vmov	s16, r0
 800741c:	4b9f      	ldr	r3, [pc, #636]	; (800769c <_printf_float+0x2dc>)
 800741e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	f7f9 fb89 	bl	8000b3c <__aeabi_dcmpun>
 800742a:	bb88      	cbnz	r0, 8007490 <_printf_float+0xd0>
 800742c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007430:	4b9a      	ldr	r3, [pc, #616]	; (800769c <_printf_float+0x2dc>)
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	f7f9 fb63 	bl	8000b00 <__aeabi_dcmple>
 800743a:	bb48      	cbnz	r0, 8007490 <_printf_float+0xd0>
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	f7f9 fb52 	bl	8000aec <__aeabi_dcmplt>
 8007448:	b110      	cbz	r0, 8007450 <_printf_float+0x90>
 800744a:	232d      	movs	r3, #45	; 0x2d
 800744c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007450:	4b93      	ldr	r3, [pc, #588]	; (80076a0 <_printf_float+0x2e0>)
 8007452:	4894      	ldr	r0, [pc, #592]	; (80076a4 <_printf_float+0x2e4>)
 8007454:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007458:	bf94      	ite	ls
 800745a:	4698      	movls	r8, r3
 800745c:	4680      	movhi	r8, r0
 800745e:	2303      	movs	r3, #3
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	9b05      	ldr	r3, [sp, #20]
 8007464:	f023 0204 	bic.w	r2, r3, #4
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	f04f 0900 	mov.w	r9, #0
 800746e:	9700      	str	r7, [sp, #0]
 8007470:	4633      	mov	r3, r6
 8007472:	aa0b      	add	r2, sp, #44	; 0x2c
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f9d8 	bl	800782c <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	f040 8090 	bne.w	80075a2 <_printf_float+0x1e2>
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	b00d      	add	sp, #52	; 0x34
 8007488:	ecbd 8b02 	vpop	{d8}
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	4642      	mov	r2, r8
 8007492:	464b      	mov	r3, r9
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 fb50 	bl	8000b3c <__aeabi_dcmpun>
 800749c:	b140      	cbz	r0, 80074b0 <_printf_float+0xf0>
 800749e:	464b      	mov	r3, r9
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bfbc      	itt	lt
 80074a4:	232d      	movlt	r3, #45	; 0x2d
 80074a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074aa:	487f      	ldr	r0, [pc, #508]	; (80076a8 <_printf_float+0x2e8>)
 80074ac:	4b7f      	ldr	r3, [pc, #508]	; (80076ac <_printf_float+0x2ec>)
 80074ae:	e7d1      	b.n	8007454 <_printf_float+0x94>
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074b6:	9206      	str	r2, [sp, #24]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	d13f      	bne.n	800753c <_printf_float+0x17c>
 80074bc:	2306      	movs	r3, #6
 80074be:	6063      	str	r3, [r4, #4]
 80074c0:	9b05      	ldr	r3, [sp, #20]
 80074c2:	6861      	ldr	r1, [r4, #4]
 80074c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074c8:	2300      	movs	r3, #0
 80074ca:	9303      	str	r3, [sp, #12]
 80074cc:	ab0a      	add	r3, sp, #40	; 0x28
 80074ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074d2:	ab09      	add	r3, sp, #36	; 0x24
 80074d4:	ec49 8b10 	vmov	d0, r8, r9
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	6022      	str	r2, [r4, #0]
 80074dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7ff fecd 	bl	8007280 <__cvt>
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ea:	2b47      	cmp	r3, #71	; 0x47
 80074ec:	4680      	mov	r8, r0
 80074ee:	d108      	bne.n	8007502 <_printf_float+0x142>
 80074f0:	1cc8      	adds	r0, r1, #3
 80074f2:	db02      	blt.n	80074fa <_printf_float+0x13a>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	4299      	cmp	r1, r3
 80074f8:	dd41      	ble.n	800757e <_printf_float+0x1be>
 80074fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80074fe:	fa5f fb8b 	uxtb.w	fp, fp
 8007502:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007506:	d820      	bhi.n	800754a <_printf_float+0x18a>
 8007508:	3901      	subs	r1, #1
 800750a:	465a      	mov	r2, fp
 800750c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007510:	9109      	str	r1, [sp, #36]	; 0x24
 8007512:	f7ff ff17 	bl	8007344 <__exponent>
 8007516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007518:	1813      	adds	r3, r2, r0
 800751a:	2a01      	cmp	r2, #1
 800751c:	4681      	mov	r9, r0
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	dc02      	bgt.n	8007528 <_printf_float+0x168>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	07d2      	lsls	r2, r2, #31
 8007526:	d501      	bpl.n	800752c <_printf_float+0x16c>
 8007528:	3301      	adds	r3, #1
 800752a:	6123      	str	r3, [r4, #16]
 800752c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007530:	2b00      	cmp	r3, #0
 8007532:	d09c      	beq.n	800746e <_printf_float+0xae>
 8007534:	232d      	movs	r3, #45	; 0x2d
 8007536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753a:	e798      	b.n	800746e <_printf_float+0xae>
 800753c:	9a06      	ldr	r2, [sp, #24]
 800753e:	2a47      	cmp	r2, #71	; 0x47
 8007540:	d1be      	bne.n	80074c0 <_printf_float+0x100>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1bc      	bne.n	80074c0 <_printf_float+0x100>
 8007546:	2301      	movs	r3, #1
 8007548:	e7b9      	b.n	80074be <_printf_float+0xfe>
 800754a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800754e:	d118      	bne.n	8007582 <_printf_float+0x1c2>
 8007550:	2900      	cmp	r1, #0
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	dd0b      	ble.n	800756e <_printf_float+0x1ae>
 8007556:	6121      	str	r1, [r4, #16]
 8007558:	b913      	cbnz	r3, 8007560 <_printf_float+0x1a0>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	07d0      	lsls	r0, r2, #31
 800755e:	d502      	bpl.n	8007566 <_printf_float+0x1a6>
 8007560:	3301      	adds	r3, #1
 8007562:	440b      	add	r3, r1
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	65a1      	str	r1, [r4, #88]	; 0x58
 8007568:	f04f 0900 	mov.w	r9, #0
 800756c:	e7de      	b.n	800752c <_printf_float+0x16c>
 800756e:	b913      	cbnz	r3, 8007576 <_printf_float+0x1b6>
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	07d2      	lsls	r2, r2, #31
 8007574:	d501      	bpl.n	800757a <_printf_float+0x1ba>
 8007576:	3302      	adds	r3, #2
 8007578:	e7f4      	b.n	8007564 <_printf_float+0x1a4>
 800757a:	2301      	movs	r3, #1
 800757c:	e7f2      	b.n	8007564 <_printf_float+0x1a4>
 800757e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007584:	4299      	cmp	r1, r3
 8007586:	db05      	blt.n	8007594 <_printf_float+0x1d4>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	6121      	str	r1, [r4, #16]
 800758c:	07d8      	lsls	r0, r3, #31
 800758e:	d5ea      	bpl.n	8007566 <_printf_float+0x1a6>
 8007590:	1c4b      	adds	r3, r1, #1
 8007592:	e7e7      	b.n	8007564 <_printf_float+0x1a4>
 8007594:	2900      	cmp	r1, #0
 8007596:	bfd4      	ite	le
 8007598:	f1c1 0202 	rsble	r2, r1, #2
 800759c:	2201      	movgt	r2, #1
 800759e:	4413      	add	r3, r2
 80075a0:	e7e0      	b.n	8007564 <_printf_float+0x1a4>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	055a      	lsls	r2, r3, #21
 80075a6:	d407      	bmi.n	80075b8 <_printf_float+0x1f8>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	4642      	mov	r2, r8
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	d12c      	bne.n	8007610 <_printf_float+0x250>
 80075b6:	e764      	b.n	8007482 <_printf_float+0xc2>
 80075b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075bc:	f240 80e0 	bls.w	8007780 <_printf_float+0x3c0>
 80075c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7f9 fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d034      	beq.n	800763a <_printf_float+0x27a>
 80075d0:	4a37      	ldr	r2, [pc, #220]	; (80076b0 <_printf_float+0x2f0>)
 80075d2:	2301      	movs	r3, #1
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b8      	blx	r7
 80075da:	3001      	adds	r0, #1
 80075dc:	f43f af51 	beq.w	8007482 <_printf_float+0xc2>
 80075e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e4:	429a      	cmp	r2, r3
 80075e6:	db02      	blt.n	80075ee <_printf_float+0x22e>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07d8      	lsls	r0, r3, #31
 80075ec:	d510      	bpl.n	8007610 <_printf_float+0x250>
 80075ee:	ee18 3a10 	vmov	r3, s16
 80075f2:	4652      	mov	r2, sl
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f af41 	beq.w	8007482 <_printf_float+0xc2>
 8007600:	f04f 0800 	mov.w	r8, #0
 8007604:	f104 091a 	add.w	r9, r4, #26
 8007608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	4543      	cmp	r3, r8
 800760e:	dc09      	bgt.n	8007624 <_printf_float+0x264>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	079b      	lsls	r3, r3, #30
 8007614:	f100 8105 	bmi.w	8007822 <_printf_float+0x462>
 8007618:	68e0      	ldr	r0, [r4, #12]
 800761a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800761c:	4298      	cmp	r0, r3
 800761e:	bfb8      	it	lt
 8007620:	4618      	movlt	r0, r3
 8007622:	e730      	b.n	8007486 <_printf_float+0xc6>
 8007624:	2301      	movs	r3, #1
 8007626:	464a      	mov	r2, r9
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f af27 	beq.w	8007482 <_printf_float+0xc2>
 8007634:	f108 0801 	add.w	r8, r8, #1
 8007638:	e7e6      	b.n	8007608 <_printf_float+0x248>
 800763a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	dc39      	bgt.n	80076b4 <_printf_float+0x2f4>
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <_printf_float+0x2f0>)
 8007642:	2301      	movs	r3, #1
 8007644:	4631      	mov	r1, r6
 8007646:	4628      	mov	r0, r5
 8007648:	47b8      	blx	r7
 800764a:	3001      	adds	r0, #1
 800764c:	f43f af19 	beq.w	8007482 <_printf_float+0xc2>
 8007650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007654:	4313      	orrs	r3, r2
 8007656:	d102      	bne.n	800765e <_printf_float+0x29e>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	d5d8      	bpl.n	8007610 <_printf_float+0x250>
 800765e:	ee18 3a10 	vmov	r3, s16
 8007662:	4652      	mov	r2, sl
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f af09 	beq.w	8007482 <_printf_float+0xc2>
 8007670:	f04f 0900 	mov.w	r9, #0
 8007674:	f104 0a1a 	add.w	sl, r4, #26
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	425b      	negs	r3, r3
 800767c:	454b      	cmp	r3, r9
 800767e:	dc01      	bgt.n	8007684 <_printf_float+0x2c4>
 8007680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007682:	e792      	b.n	80075aa <_printf_float+0x1ea>
 8007684:	2301      	movs	r3, #1
 8007686:	4652      	mov	r2, sl
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f aef7 	beq.w	8007482 <_printf_float+0xc2>
 8007694:	f109 0901 	add.w	r9, r9, #1
 8007698:	e7ee      	b.n	8007678 <_printf_float+0x2b8>
 800769a:	bf00      	nop
 800769c:	7fefffff 	.word	0x7fefffff
 80076a0:	0800b0ac 	.word	0x0800b0ac
 80076a4:	0800b0b0 	.word	0x0800b0b0
 80076a8:	0800b0b8 	.word	0x0800b0b8
 80076ac:	0800b0b4 	.word	0x0800b0b4
 80076b0:	0800b0bc 	.word	0x0800b0bc
 80076b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076b8:	429a      	cmp	r2, r3
 80076ba:	bfa8      	it	ge
 80076bc:	461a      	movge	r2, r3
 80076be:	2a00      	cmp	r2, #0
 80076c0:	4691      	mov	r9, r2
 80076c2:	dc37      	bgt.n	8007734 <_printf_float+0x374>
 80076c4:	f04f 0b00 	mov.w	fp, #0
 80076c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076cc:	f104 021a 	add.w	r2, r4, #26
 80076d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	eba3 0309 	sub.w	r3, r3, r9
 80076d8:	455b      	cmp	r3, fp
 80076da:	dc33      	bgt.n	8007744 <_printf_float+0x384>
 80076dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e0:	429a      	cmp	r2, r3
 80076e2:	db3b      	blt.n	800775c <_printf_float+0x39c>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	07da      	lsls	r2, r3, #31
 80076e8:	d438      	bmi.n	800775c <_printf_float+0x39c>
 80076ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	eba2 0901 	sub.w	r9, r2, r1
 80076f6:	4599      	cmp	r9, r3
 80076f8:	bfa8      	it	ge
 80076fa:	4699      	movge	r9, r3
 80076fc:	f1b9 0f00 	cmp.w	r9, #0
 8007700:	dc35      	bgt.n	800776e <_printf_float+0x3ae>
 8007702:	f04f 0800 	mov.w	r8, #0
 8007706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770a:	f104 0a1a 	add.w	sl, r4, #26
 800770e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	eba3 0309 	sub.w	r3, r3, r9
 8007718:	4543      	cmp	r3, r8
 800771a:	f77f af79 	ble.w	8007610 <_printf_float+0x250>
 800771e:	2301      	movs	r3, #1
 8007720:	4652      	mov	r2, sl
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f aeaa 	beq.w	8007482 <_printf_float+0xc2>
 800772e:	f108 0801 	add.w	r8, r8, #1
 8007732:	e7ec      	b.n	800770e <_printf_float+0x34e>
 8007734:	4613      	mov	r3, r2
 8007736:	4631      	mov	r1, r6
 8007738:	4642      	mov	r2, r8
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	d1c0      	bne.n	80076c4 <_printf_float+0x304>
 8007742:	e69e      	b.n	8007482 <_printf_float+0xc2>
 8007744:	2301      	movs	r3, #1
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	9205      	str	r2, [sp, #20]
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f ae97 	beq.w	8007482 <_printf_float+0xc2>
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	f10b 0b01 	add.w	fp, fp, #1
 800775a:	e7b9      	b.n	80076d0 <_printf_float+0x310>
 800775c:	ee18 3a10 	vmov	r3, s16
 8007760:	4652      	mov	r2, sl
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	d1be      	bne.n	80076ea <_printf_float+0x32a>
 800776c:	e689      	b.n	8007482 <_printf_float+0xc2>
 800776e:	9a05      	ldr	r2, [sp, #20]
 8007770:	464b      	mov	r3, r9
 8007772:	4442      	add	r2, r8
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	d1c1      	bne.n	8007702 <_printf_float+0x342>
 800777e:	e680      	b.n	8007482 <_printf_float+0xc2>
 8007780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007782:	2a01      	cmp	r2, #1
 8007784:	dc01      	bgt.n	800778a <_printf_float+0x3ca>
 8007786:	07db      	lsls	r3, r3, #31
 8007788:	d538      	bpl.n	80077fc <_printf_float+0x43c>
 800778a:	2301      	movs	r3, #1
 800778c:	4642      	mov	r2, r8
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f ae74 	beq.w	8007482 <_printf_float+0xc2>
 800779a:	ee18 3a10 	vmov	r3, s16
 800779e:	4652      	mov	r2, sl
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f ae6b 	beq.w	8007482 <_printf_float+0xc2>
 80077ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077b0:	2200      	movs	r2, #0
 80077b2:	2300      	movs	r3, #0
 80077b4:	f7f9 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 80077b8:	b9d8      	cbnz	r0, 80077f2 <_printf_float+0x432>
 80077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077bc:	f108 0201 	add.w	r2, r8, #1
 80077c0:	3b01      	subs	r3, #1
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	d10e      	bne.n	80077ea <_printf_float+0x42a>
 80077cc:	e659      	b.n	8007482 <_printf_float+0xc2>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f ae52 	beq.w	8007482 <_printf_float+0xc2>
 80077de:	f108 0801 	add.w	r8, r8, #1
 80077e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e4:	3b01      	subs	r3, #1
 80077e6:	4543      	cmp	r3, r8
 80077e8:	dcf1      	bgt.n	80077ce <_printf_float+0x40e>
 80077ea:	464b      	mov	r3, r9
 80077ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077f0:	e6dc      	b.n	80075ac <_printf_float+0x1ec>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	f104 0a1a 	add.w	sl, r4, #26
 80077fa:	e7f2      	b.n	80077e2 <_printf_float+0x422>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4642      	mov	r2, r8
 8007800:	e7df      	b.n	80077c2 <_printf_float+0x402>
 8007802:	2301      	movs	r3, #1
 8007804:	464a      	mov	r2, r9
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	f43f ae38 	beq.w	8007482 <_printf_float+0xc2>
 8007812:	f108 0801 	add.w	r8, r8, #1
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800781a:	1a5b      	subs	r3, r3, r1
 800781c:	4543      	cmp	r3, r8
 800781e:	dcf0      	bgt.n	8007802 <_printf_float+0x442>
 8007820:	e6fa      	b.n	8007618 <_printf_float+0x258>
 8007822:	f04f 0800 	mov.w	r8, #0
 8007826:	f104 0919 	add.w	r9, r4, #25
 800782a:	e7f4      	b.n	8007816 <_printf_float+0x456>

0800782c <_printf_common>:
 800782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	4616      	mov	r6, r2
 8007832:	4699      	mov	r9, r3
 8007834:	688a      	ldr	r2, [r1, #8]
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800783c:	4293      	cmp	r3, r2
 800783e:	bfb8      	it	lt
 8007840:	4613      	movlt	r3, r2
 8007842:	6033      	str	r3, [r6, #0]
 8007844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007848:	4607      	mov	r7, r0
 800784a:	460c      	mov	r4, r1
 800784c:	b10a      	cbz	r2, 8007852 <_printf_common+0x26>
 800784e:	3301      	adds	r3, #1
 8007850:	6033      	str	r3, [r6, #0]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	0699      	lsls	r1, r3, #26
 8007856:	bf42      	ittt	mi
 8007858:	6833      	ldrmi	r3, [r6, #0]
 800785a:	3302      	addmi	r3, #2
 800785c:	6033      	strmi	r3, [r6, #0]
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	f015 0506 	ands.w	r5, r5, #6
 8007864:	d106      	bne.n	8007874 <_printf_common+0x48>
 8007866:	f104 0a19 	add.w	sl, r4, #25
 800786a:	68e3      	ldr	r3, [r4, #12]
 800786c:	6832      	ldr	r2, [r6, #0]
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	42ab      	cmp	r3, r5
 8007872:	dc26      	bgt.n	80078c2 <_printf_common+0x96>
 8007874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007878:	1e13      	subs	r3, r2, #0
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	bf18      	it	ne
 800787e:	2301      	movne	r3, #1
 8007880:	0692      	lsls	r2, r2, #26
 8007882:	d42b      	bmi.n	80078dc <_printf_common+0xb0>
 8007884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007888:	4649      	mov	r1, r9
 800788a:	4638      	mov	r0, r7
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d01e      	beq.n	80078d0 <_printf_common+0xa4>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	68e5      	ldr	r5, [r4, #12]
 8007896:	6832      	ldr	r2, [r6, #0]
 8007898:	f003 0306 	and.w	r3, r3, #6
 800789c:	2b04      	cmp	r3, #4
 800789e:	bf08      	it	eq
 80078a0:	1aad      	subeq	r5, r5, r2
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	6922      	ldr	r2, [r4, #16]
 80078a6:	bf0c      	ite	eq
 80078a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ac:	2500      	movne	r5, #0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bfc4      	itt	gt
 80078b2:	1a9b      	subgt	r3, r3, r2
 80078b4:	18ed      	addgt	r5, r5, r3
 80078b6:	2600      	movs	r6, #0
 80078b8:	341a      	adds	r4, #26
 80078ba:	42b5      	cmp	r5, r6
 80078bc:	d11a      	bne.n	80078f4 <_printf_common+0xc8>
 80078be:	2000      	movs	r0, #0
 80078c0:	e008      	b.n	80078d4 <_printf_common+0xa8>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4652      	mov	r2, sl
 80078c6:	4649      	mov	r1, r9
 80078c8:	4638      	mov	r0, r7
 80078ca:	47c0      	blx	r8
 80078cc:	3001      	adds	r0, #1
 80078ce:	d103      	bne.n	80078d8 <_printf_common+0xac>
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d8:	3501      	adds	r5, #1
 80078da:	e7c6      	b.n	800786a <_printf_common+0x3e>
 80078dc:	18e1      	adds	r1, r4, r3
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	2030      	movs	r0, #48	; 0x30
 80078e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e6:	4422      	add	r2, r4
 80078e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078f0:	3302      	adds	r3, #2
 80078f2:	e7c7      	b.n	8007884 <_printf_common+0x58>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4622      	mov	r2, r4
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d0e6      	beq.n	80078d0 <_printf_common+0xa4>
 8007902:	3601      	adds	r6, #1
 8007904:	e7d9      	b.n	80078ba <_printf_common+0x8e>
	...

08007908 <_printf_i>:
 8007908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	460c      	mov	r4, r1
 800790e:	4691      	mov	r9, r2
 8007910:	7e27      	ldrb	r7, [r4, #24]
 8007912:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007914:	2f78      	cmp	r7, #120	; 0x78
 8007916:	4680      	mov	r8, r0
 8007918:	469a      	mov	sl, r3
 800791a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791e:	d807      	bhi.n	8007930 <_printf_i+0x28>
 8007920:	2f62      	cmp	r7, #98	; 0x62
 8007922:	d80a      	bhi.n	800793a <_printf_i+0x32>
 8007924:	2f00      	cmp	r7, #0
 8007926:	f000 80d8 	beq.w	8007ada <_printf_i+0x1d2>
 800792a:	2f58      	cmp	r7, #88	; 0x58
 800792c:	f000 80a3 	beq.w	8007a76 <_printf_i+0x16e>
 8007930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007938:	e03a      	b.n	80079b0 <_printf_i+0xa8>
 800793a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800793e:	2b15      	cmp	r3, #21
 8007940:	d8f6      	bhi.n	8007930 <_printf_i+0x28>
 8007942:	a001      	add	r0, pc, #4	; (adr r0, 8007948 <_printf_i+0x40>)
 8007944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007948:	080079a1 	.word	0x080079a1
 800794c:	080079b5 	.word	0x080079b5
 8007950:	08007931 	.word	0x08007931
 8007954:	08007931 	.word	0x08007931
 8007958:	08007931 	.word	0x08007931
 800795c:	08007931 	.word	0x08007931
 8007960:	080079b5 	.word	0x080079b5
 8007964:	08007931 	.word	0x08007931
 8007968:	08007931 	.word	0x08007931
 800796c:	08007931 	.word	0x08007931
 8007970:	08007931 	.word	0x08007931
 8007974:	08007ac1 	.word	0x08007ac1
 8007978:	080079e5 	.word	0x080079e5
 800797c:	08007aa3 	.word	0x08007aa3
 8007980:	08007931 	.word	0x08007931
 8007984:	08007931 	.word	0x08007931
 8007988:	08007ae3 	.word	0x08007ae3
 800798c:	08007931 	.word	0x08007931
 8007990:	080079e5 	.word	0x080079e5
 8007994:	08007931 	.word	0x08007931
 8007998:	08007931 	.word	0x08007931
 800799c:	08007aab 	.word	0x08007aab
 80079a0:	680b      	ldr	r3, [r1, #0]
 80079a2:	1d1a      	adds	r2, r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	600a      	str	r2, [r1, #0]
 80079a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0a3      	b.n	8007afc <_printf_i+0x1f4>
 80079b4:	6825      	ldr	r5, [r4, #0]
 80079b6:	6808      	ldr	r0, [r1, #0]
 80079b8:	062e      	lsls	r6, r5, #24
 80079ba:	f100 0304 	add.w	r3, r0, #4
 80079be:	d50a      	bpl.n	80079d6 <_printf_i+0xce>
 80079c0:	6805      	ldr	r5, [r0, #0]
 80079c2:	600b      	str	r3, [r1, #0]
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	da03      	bge.n	80079d0 <_printf_i+0xc8>
 80079c8:	232d      	movs	r3, #45	; 0x2d
 80079ca:	426d      	negs	r5, r5
 80079cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d0:	485e      	ldr	r0, [pc, #376]	; (8007b4c <_printf_i+0x244>)
 80079d2:	230a      	movs	r3, #10
 80079d4:	e019      	b.n	8007a0a <_printf_i+0x102>
 80079d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079da:	6805      	ldr	r5, [r0, #0]
 80079dc:	600b      	str	r3, [r1, #0]
 80079de:	bf18      	it	ne
 80079e0:	b22d      	sxthne	r5, r5
 80079e2:	e7ef      	b.n	80079c4 <_printf_i+0xbc>
 80079e4:	680b      	ldr	r3, [r1, #0]
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	1d18      	adds	r0, r3, #4
 80079ea:	6008      	str	r0, [r1, #0]
 80079ec:	0628      	lsls	r0, r5, #24
 80079ee:	d501      	bpl.n	80079f4 <_printf_i+0xec>
 80079f0:	681d      	ldr	r5, [r3, #0]
 80079f2:	e002      	b.n	80079fa <_printf_i+0xf2>
 80079f4:	0669      	lsls	r1, r5, #25
 80079f6:	d5fb      	bpl.n	80079f0 <_printf_i+0xe8>
 80079f8:	881d      	ldrh	r5, [r3, #0]
 80079fa:	4854      	ldr	r0, [pc, #336]	; (8007b4c <_printf_i+0x244>)
 80079fc:	2f6f      	cmp	r7, #111	; 0x6f
 80079fe:	bf0c      	ite	eq
 8007a00:	2308      	moveq	r3, #8
 8007a02:	230a      	movne	r3, #10
 8007a04:	2100      	movs	r1, #0
 8007a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a0a:	6866      	ldr	r6, [r4, #4]
 8007a0c:	60a6      	str	r6, [r4, #8]
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	bfa2      	ittt	ge
 8007a12:	6821      	ldrge	r1, [r4, #0]
 8007a14:	f021 0104 	bicge.w	r1, r1, #4
 8007a18:	6021      	strge	r1, [r4, #0]
 8007a1a:	b90d      	cbnz	r5, 8007a20 <_printf_i+0x118>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	d04d      	beq.n	8007abc <_printf_i+0x1b4>
 8007a20:	4616      	mov	r6, r2
 8007a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a26:	fb03 5711 	mls	r7, r3, r1, r5
 8007a2a:	5dc7      	ldrb	r7, [r0, r7]
 8007a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a30:	462f      	mov	r7, r5
 8007a32:	42bb      	cmp	r3, r7
 8007a34:	460d      	mov	r5, r1
 8007a36:	d9f4      	bls.n	8007a22 <_printf_i+0x11a>
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d10b      	bne.n	8007a54 <_printf_i+0x14c>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	07df      	lsls	r7, r3, #31
 8007a40:	d508      	bpl.n	8007a54 <_printf_i+0x14c>
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	4299      	cmp	r1, r3
 8007a48:	bfde      	ittt	le
 8007a4a:	2330      	movle	r3, #48	; 0x30
 8007a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a54:	1b92      	subs	r2, r2, r6
 8007a56:	6122      	str	r2, [r4, #16]
 8007a58:	f8cd a000 	str.w	sl, [sp]
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	aa03      	add	r2, sp, #12
 8007a60:	4621      	mov	r1, r4
 8007a62:	4640      	mov	r0, r8
 8007a64:	f7ff fee2 	bl	800782c <_printf_common>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d14c      	bne.n	8007b06 <_printf_i+0x1fe>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b004      	add	sp, #16
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	4835      	ldr	r0, [pc, #212]	; (8007b4c <_printf_i+0x244>)
 8007a78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	680e      	ldr	r6, [r1, #0]
 8007a80:	061f      	lsls	r7, r3, #24
 8007a82:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a86:	600e      	str	r6, [r1, #0]
 8007a88:	d514      	bpl.n	8007ab4 <_printf_i+0x1ac>
 8007a8a:	07d9      	lsls	r1, r3, #31
 8007a8c:	bf44      	itt	mi
 8007a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a92:	6023      	strmi	r3, [r4, #0]
 8007a94:	b91d      	cbnz	r5, 8007a9e <_printf_i+0x196>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f023 0320 	bic.w	r3, r3, #32
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	2310      	movs	r3, #16
 8007aa0:	e7b0      	b.n	8007a04 <_printf_i+0xfc>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	f043 0320 	orr.w	r3, r3, #32
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	2378      	movs	r3, #120	; 0x78
 8007aac:	4828      	ldr	r0, [pc, #160]	; (8007b50 <_printf_i+0x248>)
 8007aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ab2:	e7e3      	b.n	8007a7c <_printf_i+0x174>
 8007ab4:	065e      	lsls	r6, r3, #25
 8007ab6:	bf48      	it	mi
 8007ab8:	b2ad      	uxthmi	r5, r5
 8007aba:	e7e6      	b.n	8007a8a <_printf_i+0x182>
 8007abc:	4616      	mov	r6, r2
 8007abe:	e7bb      	b.n	8007a38 <_printf_i+0x130>
 8007ac0:	680b      	ldr	r3, [r1, #0]
 8007ac2:	6826      	ldr	r6, [r4, #0]
 8007ac4:	6960      	ldr	r0, [r4, #20]
 8007ac6:	1d1d      	adds	r5, r3, #4
 8007ac8:	600d      	str	r5, [r1, #0]
 8007aca:	0635      	lsls	r5, r6, #24
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	d501      	bpl.n	8007ad4 <_printf_i+0x1cc>
 8007ad0:	6018      	str	r0, [r3, #0]
 8007ad2:	e002      	b.n	8007ada <_printf_i+0x1d2>
 8007ad4:	0671      	lsls	r1, r6, #25
 8007ad6:	d5fb      	bpl.n	8007ad0 <_printf_i+0x1c8>
 8007ad8:	8018      	strh	r0, [r3, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	4616      	mov	r6, r2
 8007ae0:	e7ba      	b.n	8007a58 <_printf_i+0x150>
 8007ae2:	680b      	ldr	r3, [r1, #0]
 8007ae4:	1d1a      	adds	r2, r3, #4
 8007ae6:	600a      	str	r2, [r1, #0]
 8007ae8:	681e      	ldr	r6, [r3, #0]
 8007aea:	6862      	ldr	r2, [r4, #4]
 8007aec:	2100      	movs	r1, #0
 8007aee:	4630      	mov	r0, r6
 8007af0:	f7f8 fb7e 	bl	80001f0 <memchr>
 8007af4:	b108      	cbz	r0, 8007afa <_printf_i+0x1f2>
 8007af6:	1b80      	subs	r0, r0, r6
 8007af8:	6060      	str	r0, [r4, #4]
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	2300      	movs	r3, #0
 8007b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b04:	e7a8      	b.n	8007a58 <_printf_i+0x150>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	47d0      	blx	sl
 8007b10:	3001      	adds	r0, #1
 8007b12:	d0ab      	beq.n	8007a6c <_printf_i+0x164>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	079b      	lsls	r3, r3, #30
 8007b18:	d413      	bmi.n	8007b42 <_printf_i+0x23a>
 8007b1a:	68e0      	ldr	r0, [r4, #12]
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	4298      	cmp	r0, r3
 8007b20:	bfb8      	it	lt
 8007b22:	4618      	movlt	r0, r3
 8007b24:	e7a4      	b.n	8007a70 <_printf_i+0x168>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	47d0      	blx	sl
 8007b30:	3001      	adds	r0, #1
 8007b32:	d09b      	beq.n	8007a6c <_printf_i+0x164>
 8007b34:	3501      	adds	r5, #1
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	9903      	ldr	r1, [sp, #12]
 8007b3a:	1a5b      	subs	r3, r3, r1
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	dcf2      	bgt.n	8007b26 <_printf_i+0x21e>
 8007b40:	e7eb      	b.n	8007b1a <_printf_i+0x212>
 8007b42:	2500      	movs	r5, #0
 8007b44:	f104 0619 	add.w	r6, r4, #25
 8007b48:	e7f5      	b.n	8007b36 <_printf_i+0x22e>
 8007b4a:	bf00      	nop
 8007b4c:	0800b0be 	.word	0x0800b0be
 8007b50:	0800b0cf 	.word	0x0800b0cf

08007b54 <siprintf>:
 8007b54:	b40e      	push	{r1, r2, r3}
 8007b56:	b500      	push	{lr}
 8007b58:	b09c      	sub	sp, #112	; 0x70
 8007b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	9006      	str	r0, [sp, #24]
 8007b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b64:	4809      	ldr	r0, [pc, #36]	; (8007b8c <siprintf+0x38>)
 8007b66:	9107      	str	r1, [sp, #28]
 8007b68:	9104      	str	r1, [sp, #16]
 8007b6a:	4909      	ldr	r1, [pc, #36]	; (8007b90 <siprintf+0x3c>)
 8007b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b70:	9105      	str	r1, [sp, #20]
 8007b72:	6800      	ldr	r0, [r0, #0]
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	a902      	add	r1, sp, #8
 8007b78:	f001 fb34 	bl	80091e4 <_svfiprintf_r>
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	b01c      	add	sp, #112	; 0x70
 8007b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b88:	b003      	add	sp, #12
 8007b8a:	4770      	bx	lr
 8007b8c:	2000029c 	.word	0x2000029c
 8007b90:	ffff0208 	.word	0xffff0208

08007b94 <quorem>:
 8007b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	6903      	ldr	r3, [r0, #16]
 8007b9a:	690c      	ldr	r4, [r1, #16]
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	f2c0 8081 	blt.w	8007ca6 <quorem+0x112>
 8007ba4:	3c01      	subs	r4, #1
 8007ba6:	f101 0814 	add.w	r8, r1, #20
 8007baa:	f100 0514 	add.w	r5, r0, #20
 8007bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bcc:	d331      	bcc.n	8007c32 <quorem+0x9e>
 8007bce:	f04f 0e00 	mov.w	lr, #0
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	46ac      	mov	ip, r5
 8007bd6:	46f2      	mov	sl, lr
 8007bd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bdc:	b293      	uxth	r3, r2
 8007bde:	fb06 e303 	mla	r3, r6, r3, lr
 8007be2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bec:	0c12      	lsrs	r2, r2, #16
 8007bee:	f8dc a000 	ldr.w	sl, [ip]
 8007bf2:	fb06 e202 	mla	r2, r6, r2, lr
 8007bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bfe:	fa1f fa82 	uxth.w	sl, r2
 8007c02:	f8dc 2000 	ldr.w	r2, [ip]
 8007c06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c14:	4581      	cmp	r9, r0
 8007c16:	f84c 3b04 	str.w	r3, [ip], #4
 8007c1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c1e:	d2db      	bcs.n	8007bd8 <quorem+0x44>
 8007c20:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c24:	b92b      	cbnz	r3, 8007c32 <quorem+0x9e>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	3b04      	subs	r3, #4
 8007c2a:	429d      	cmp	r5, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	d32e      	bcc.n	8007c8e <quorem+0xfa>
 8007c30:	613c      	str	r4, [r7, #16]
 8007c32:	4638      	mov	r0, r7
 8007c34:	f001 f8c0 	bl	8008db8 <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	db24      	blt.n	8007c86 <quorem+0xf2>
 8007c3c:	3601      	adds	r6, #1
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f04f 0c00 	mov.w	ip, #0
 8007c44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c48:	f8d0 e000 	ldr.w	lr, [r0]
 8007c4c:	b293      	uxth	r3, r2
 8007c4e:	ebac 0303 	sub.w	r3, ip, r3
 8007c52:	0c12      	lsrs	r2, r2, #16
 8007c54:	fa13 f38e 	uxtah	r3, r3, lr
 8007c58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c66:	45c1      	cmp	r9, r8
 8007c68:	f840 3b04 	str.w	r3, [r0], #4
 8007c6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c70:	d2e8      	bcs.n	8007c44 <quorem+0xb0>
 8007c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7a:	b922      	cbnz	r2, 8007c86 <quorem+0xf2>
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	d30a      	bcc.n	8007c9a <quorem+0x106>
 8007c84:	613c      	str	r4, [r7, #16]
 8007c86:	4630      	mov	r0, r6
 8007c88:	b003      	add	sp, #12
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	d1cc      	bne.n	8007c30 <quorem+0x9c>
 8007c96:	3c01      	subs	r4, #1
 8007c98:	e7c7      	b.n	8007c2a <quorem+0x96>
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	3b04      	subs	r3, #4
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	d1f0      	bne.n	8007c84 <quorem+0xf0>
 8007ca2:	3c01      	subs	r4, #1
 8007ca4:	e7eb      	b.n	8007c7e <quorem+0xea>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e7ee      	b.n	8007c88 <quorem+0xf4>
 8007caa:	0000      	movs	r0, r0
 8007cac:	0000      	movs	r0, r0
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	ed2d 8b02 	vpush	{d8}
 8007cb8:	ec57 6b10 	vmov	r6, r7, d0
 8007cbc:	b095      	sub	sp, #84	; 0x54
 8007cbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007cca:	4604      	mov	r4, r0
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd0:	b975      	cbnz	r5, 8007cf0 <_dtoa_r+0x40>
 8007cd2:	2010      	movs	r0, #16
 8007cd4:	f000 fddc 	bl	8008890 <malloc>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	6260      	str	r0, [r4, #36]	; 0x24
 8007cdc:	b920      	cbnz	r0, 8007ce8 <_dtoa_r+0x38>
 8007cde:	4bb2      	ldr	r3, [pc, #712]	; (8007fa8 <_dtoa_r+0x2f8>)
 8007ce0:	21ea      	movs	r1, #234	; 0xea
 8007ce2:	48b2      	ldr	r0, [pc, #712]	; (8007fac <_dtoa_r+0x2fc>)
 8007ce4:	f001 fb8e 	bl	8009404 <__assert_func>
 8007ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cec:	6005      	str	r5, [r0, #0]
 8007cee:	60c5      	str	r5, [r0, #12]
 8007cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	b151      	cbz	r1, 8007d0c <_dtoa_r+0x5c>
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	604a      	str	r2, [r1, #4]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4093      	lsls	r3, r2
 8007cfe:	608b      	str	r3, [r1, #8]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fe1b 	bl	800893c <_Bfree>
 8007d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	1e3b      	subs	r3, r7, #0
 8007d0e:	bfb9      	ittee	lt
 8007d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	9303      	strlt	r3, [sp, #12]
 8007d16:	2300      	movge	r3, #0
 8007d18:	f8c8 3000 	strge.w	r3, [r8]
 8007d1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d20:	4ba3      	ldr	r3, [pc, #652]	; (8007fb0 <_dtoa_r+0x300>)
 8007d22:	bfbc      	itt	lt
 8007d24:	2201      	movlt	r2, #1
 8007d26:	f8c8 2000 	strlt.w	r2, [r8]
 8007d2a:	ea33 0309 	bics.w	r3, r3, r9
 8007d2e:	d11b      	bne.n	8007d68 <_dtoa_r+0xb8>
 8007d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d3c:	4333      	orrs	r3, r6
 8007d3e:	f000 857a 	beq.w	8008836 <_dtoa_r+0xb86>
 8007d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d44:	b963      	cbnz	r3, 8007d60 <_dtoa_r+0xb0>
 8007d46:	4b9b      	ldr	r3, [pc, #620]	; (8007fb4 <_dtoa_r+0x304>)
 8007d48:	e024      	b.n	8007d94 <_dtoa_r+0xe4>
 8007d4a:	4b9b      	ldr	r3, [pc, #620]	; (8007fb8 <_dtoa_r+0x308>)
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	9800      	ldr	r0, [sp, #0]
 8007d56:	b015      	add	sp, #84	; 0x54
 8007d58:	ecbd 8b02 	vpop	{d8}
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	4b94      	ldr	r3, [pc, #592]	; (8007fb4 <_dtoa_r+0x304>)
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	3303      	adds	r3, #3
 8007d66:	e7f3      	b.n	8007d50 <_dtoa_r+0xa0>
 8007d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	ec51 0b17 	vmov	r0, r1, d7
 8007d72:	2300      	movs	r3, #0
 8007d74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007d78:	f7f8 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	b158      	cbz	r0, 8007d98 <_dtoa_r+0xe8>
 8007d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d82:	2301      	movs	r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8551 	beq.w	8008830 <_dtoa_r+0xb80>
 8007d8e:	488b      	ldr	r0, [pc, #556]	; (8007fbc <_dtoa_r+0x30c>)
 8007d90:	6018      	str	r0, [r3, #0]
 8007d92:	1e43      	subs	r3, r0, #1
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	e7dd      	b.n	8007d54 <_dtoa_r+0xa4>
 8007d98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007d9c:	aa12      	add	r2, sp, #72	; 0x48
 8007d9e:	a913      	add	r1, sp, #76	; 0x4c
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 f8ad 	bl	8008f00 <__d2b>
 8007da6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007daa:	4683      	mov	fp, r0
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	d07c      	beq.n	8007eaa <_dtoa_r+0x1fa>
 8007db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007dbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dca:	4b7d      	ldr	r3, [pc, #500]	; (8007fc0 <_dtoa_r+0x310>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fa61 	bl	8000298 <__aeabi_dsub>
 8007dd6:	a36e      	add	r3, pc, #440	; (adr r3, 8007f90 <_dtoa_r+0x2e0>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	a36d      	add	r3, pc, #436	; (adr r3, 8007f98 <_dtoa_r+0x2e8>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 fa59 	bl	800029c <__adddf3>
 8007dea:	4606      	mov	r6, r0
 8007dec:	4628      	mov	r0, r5
 8007dee:	460f      	mov	r7, r1
 8007df0:	f7f8 fba0 	bl	8000534 <__aeabi_i2d>
 8007df4:	a36a      	add	r3, pc, #424	; (adr r3, 8007fa0 <_dtoa_r+0x2f0>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fc05 	bl	8000608 <__aeabi_dmul>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fa49 	bl	800029c <__adddf3>
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	f7f8 feab 	bl	8000b68 <__aeabi_d2iz>
 8007e12:	2200      	movs	r2, #0
 8007e14:	4682      	mov	sl, r0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe66 	bl	8000aec <__aeabi_dcmplt>
 8007e20:	b148      	cbz	r0, 8007e36 <_dtoa_r+0x186>
 8007e22:	4650      	mov	r0, sl
 8007e24:	f7f8 fb86 	bl	8000534 <__aeabi_i2d>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	f7f8 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e30:	b908      	cbnz	r0, 8007e36 <_dtoa_r+0x186>
 8007e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e36:	f1ba 0f16 	cmp.w	sl, #22
 8007e3a:	d854      	bhi.n	8007ee6 <_dtoa_r+0x236>
 8007e3c:	4b61      	ldr	r3, [pc, #388]	; (8007fc4 <_dtoa_r+0x314>)
 8007e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4a:	f7f8 fe4f 	bl	8000aec <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d04b      	beq.n	8007eea <_dtoa_r+0x23a>
 8007e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e56:	2300      	movs	r3, #0
 8007e58:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e5c:	1b5d      	subs	r5, r3, r5
 8007e5e:	1e6b      	subs	r3, r5, #1
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	bf43      	ittte	mi
 8007e64:	2300      	movmi	r3, #0
 8007e66:	f1c5 0801 	rsbmi	r8, r5, #1
 8007e6a:	9304      	strmi	r3, [sp, #16]
 8007e6c:	f04f 0800 	movpl.w	r8, #0
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	db3b      	blt.n	8007eee <_dtoa_r+0x23e>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007e7c:	4453      	add	r3, sl
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9306      	str	r3, [sp, #24]
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d869      	bhi.n	8007f5e <_dtoa_r+0x2ae>
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	bfc4      	itt	gt
 8007e8e:	3b04      	subgt	r3, #4
 8007e90:	9305      	strgt	r3, [sp, #20]
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	f1a3 0302 	sub.w	r3, r3, #2
 8007e98:	bfcc      	ite	gt
 8007e9a:	2500      	movgt	r5, #0
 8007e9c:	2501      	movle	r5, #1
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d869      	bhi.n	8007f76 <_dtoa_r+0x2c6>
 8007ea2:	e8df f003 	tbb	[pc, r3]
 8007ea6:	4e2c      	.short	0x4e2c
 8007ea8:	5a4c      	.short	0x5a4c
 8007eaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007eae:	441d      	add	r5, r3
 8007eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	bfc1      	itttt	gt
 8007eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ebc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ec0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ec4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ec8:	bfda      	itte	le
 8007eca:	f1c3 0320 	rsble	r3, r3, #32
 8007ece:	fa06 f003 	lslle.w	r0, r6, r3
 8007ed2:	4318      	orrgt	r0, r3
 8007ed4:	f7f8 fb1e 	bl	8000514 <__aeabi_ui2d>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4606      	mov	r6, r0
 8007edc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ee0:	3d01      	subs	r5, #1
 8007ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ee4:	e771      	b.n	8007dca <_dtoa_r+0x11a>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7b6      	b.n	8007e58 <_dtoa_r+0x1a8>
 8007eea:	900e      	str	r0, [sp, #56]	; 0x38
 8007eec:	e7b5      	b.n	8007e5a <_dtoa_r+0x1aa>
 8007eee:	f1ca 0300 	rsb	r3, sl, #0
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	eba8 080a 	sub.w	r8, r8, sl
 8007efa:	930d      	str	r3, [sp, #52]	; 0x34
 8007efc:	e7c2      	b.n	8007e84 <_dtoa_r+0x1d4>
 8007efe:	2300      	movs	r3, #0
 8007f00:	9308      	str	r3, [sp, #32]
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc39      	bgt.n	8007f7c <_dtoa_r+0x2cc>
 8007f08:	f04f 0901 	mov.w	r9, #1
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	464b      	mov	r3, r9
 8007f12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f18:	2200      	movs	r2, #0
 8007f1a:	6042      	str	r2, [r0, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	f102 0614 	add.w	r6, r2, #20
 8007f22:	429e      	cmp	r6, r3
 8007f24:	6841      	ldr	r1, [r0, #4]
 8007f26:	d92f      	bls.n	8007f88 <_dtoa_r+0x2d8>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fcc7 	bl	80088bc <_Balloc>
 8007f2e:	9000      	str	r0, [sp, #0]
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d14b      	bne.n	8007fcc <_dtoa_r+0x31c>
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <_dtoa_r+0x318>)
 8007f36:	4602      	mov	r2, r0
 8007f38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f3c:	e6d1      	b.n	8007ce2 <_dtoa_r+0x32>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7de      	b.n	8007f00 <_dtoa_r+0x250>
 8007f42:	2300      	movs	r3, #0
 8007f44:	9308      	str	r3, [sp, #32]
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	eb0a 0903 	add.w	r9, sl, r3
 8007f4c:	f109 0301 	add.w	r3, r9, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	bfb8      	it	lt
 8007f56:	2301      	movlt	r3, #1
 8007f58:	e7dd      	b.n	8007f16 <_dtoa_r+0x266>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e7f2      	b.n	8007f44 <_dtoa_r+0x294>
 8007f5e:	2501      	movs	r5, #1
 8007f60:	2300      	movs	r3, #0
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	9508      	str	r5, [sp, #32]
 8007f66:	f04f 39ff 	mov.w	r9, #4294967295
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f70:	2312      	movs	r3, #18
 8007f72:	9209      	str	r2, [sp, #36]	; 0x24
 8007f74:	e7cf      	b.n	8007f16 <_dtoa_r+0x266>
 8007f76:	2301      	movs	r3, #1
 8007f78:	9308      	str	r3, [sp, #32]
 8007f7a:	e7f4      	b.n	8007f66 <_dtoa_r+0x2b6>
 8007f7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f80:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f84:	464b      	mov	r3, r9
 8007f86:	e7c6      	b.n	8007f16 <_dtoa_r+0x266>
 8007f88:	3101      	adds	r1, #1
 8007f8a:	6041      	str	r1, [r0, #4]
 8007f8c:	0052      	lsls	r2, r2, #1
 8007f8e:	e7c6      	b.n	8007f1e <_dtoa_r+0x26e>
 8007f90:	636f4361 	.word	0x636f4361
 8007f94:	3fd287a7 	.word	0x3fd287a7
 8007f98:	8b60c8b3 	.word	0x8b60c8b3
 8007f9c:	3fc68a28 	.word	0x3fc68a28
 8007fa0:	509f79fb 	.word	0x509f79fb
 8007fa4:	3fd34413 	.word	0x3fd34413
 8007fa8:	0800b0ed 	.word	0x0800b0ed
 8007fac:	0800b104 	.word	0x0800b104
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	0800b0e9 	.word	0x0800b0e9
 8007fb8:	0800b0e0 	.word	0x0800b0e0
 8007fbc:	0800b0bd 	.word	0x0800b0bd
 8007fc0:	3ff80000 	.word	0x3ff80000
 8007fc4:	0800b200 	.word	0x0800b200
 8007fc8:	0800b163 	.word	0x0800b163
 8007fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fce:	9a00      	ldr	r2, [sp, #0]
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	2b0e      	cmp	r3, #14
 8007fd6:	f200 80ad 	bhi.w	8008134 <_dtoa_r+0x484>
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	f000 80aa 	beq.w	8008134 <_dtoa_r+0x484>
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	dd36      	ble.n	8008054 <_dtoa_r+0x3a4>
 8007fe6:	4ac3      	ldr	r2, [pc, #780]	; (80082f4 <_dtoa_r+0x644>)
 8007fe8:	f00a 030f 	and.w	r3, sl, #15
 8007fec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ff0:	ed93 7b00 	vldr	d7, [r3]
 8007ff4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ff8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007ffc:	eeb0 8a47 	vmov.f32	s16, s14
 8008000:	eef0 8a67 	vmov.f32	s17, s15
 8008004:	d016      	beq.n	8008034 <_dtoa_r+0x384>
 8008006:	4bbc      	ldr	r3, [pc, #752]	; (80082f8 <_dtoa_r+0x648>)
 8008008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800800c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008010:	f7f8 fc24 	bl	800085c <__aeabi_ddiv>
 8008014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008018:	f007 070f 	and.w	r7, r7, #15
 800801c:	2503      	movs	r5, #3
 800801e:	4eb6      	ldr	r6, [pc, #728]	; (80082f8 <_dtoa_r+0x648>)
 8008020:	b957      	cbnz	r7, 8008038 <_dtoa_r+0x388>
 8008022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008026:	ec53 2b18 	vmov	r2, r3, d8
 800802a:	f7f8 fc17 	bl	800085c <__aeabi_ddiv>
 800802e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008032:	e029      	b.n	8008088 <_dtoa_r+0x3d8>
 8008034:	2502      	movs	r5, #2
 8008036:	e7f2      	b.n	800801e <_dtoa_r+0x36e>
 8008038:	07f9      	lsls	r1, r7, #31
 800803a:	d508      	bpl.n	800804e <_dtoa_r+0x39e>
 800803c:	ec51 0b18 	vmov	r0, r1, d8
 8008040:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008044:	f7f8 fae0 	bl	8000608 <__aeabi_dmul>
 8008048:	ec41 0b18 	vmov	d8, r0, r1
 800804c:	3501      	adds	r5, #1
 800804e:	107f      	asrs	r7, r7, #1
 8008050:	3608      	adds	r6, #8
 8008052:	e7e5      	b.n	8008020 <_dtoa_r+0x370>
 8008054:	f000 80a6 	beq.w	80081a4 <_dtoa_r+0x4f4>
 8008058:	f1ca 0600 	rsb	r6, sl, #0
 800805c:	4ba5      	ldr	r3, [pc, #660]	; (80082f4 <_dtoa_r+0x644>)
 800805e:	4fa6      	ldr	r7, [pc, #664]	; (80082f8 <_dtoa_r+0x648>)
 8008060:	f006 020f 	and.w	r2, r6, #15
 8008064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008070:	f7f8 faca 	bl	8000608 <__aeabi_dmul>
 8008074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008078:	1136      	asrs	r6, r6, #4
 800807a:	2300      	movs	r3, #0
 800807c:	2502      	movs	r5, #2
 800807e:	2e00      	cmp	r6, #0
 8008080:	f040 8085 	bne.w	800818e <_dtoa_r+0x4de>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1d2      	bne.n	800802e <_dtoa_r+0x37e>
 8008088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 808c 	beq.w	80081a8 <_dtoa_r+0x4f8>
 8008090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008094:	4b99      	ldr	r3, [pc, #612]	; (80082fc <_dtoa_r+0x64c>)
 8008096:	2200      	movs	r2, #0
 8008098:	4630      	mov	r0, r6
 800809a:	4639      	mov	r1, r7
 800809c:	f7f8 fd26 	bl	8000aec <__aeabi_dcmplt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f000 8081 	beq.w	80081a8 <_dtoa_r+0x4f8>
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d07d      	beq.n	80081a8 <_dtoa_r+0x4f8>
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	dd3c      	ble.n	800812c <_dtoa_r+0x47c>
 80080b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	2200      	movs	r2, #0
 80080ba:	4b91      	ldr	r3, [pc, #580]	; (8008300 <_dtoa_r+0x650>)
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 faa2 	bl	8000608 <__aeabi_dmul>
 80080c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c8:	3501      	adds	r5, #1
 80080ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80080ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7f8 fa2e 	bl	8000534 <__aeabi_i2d>
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	4b88      	ldr	r3, [pc, #544]	; (8008304 <_dtoa_r+0x654>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 f8da 	bl	800029c <__adddf3>
 80080e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d15c      	bne.n	80081b2 <_dtoa_r+0x502>
 80080f8:	4b83      	ldr	r3, [pc, #524]	; (8008308 <_dtoa_r+0x658>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 f8ca 	bl	8000298 <__aeabi_dsub>
 8008104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008108:	4606      	mov	r6, r0
 800810a:	460f      	mov	r7, r1
 800810c:	f7f8 fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f040 8296 	bne.w	8008642 <_dtoa_r+0x992>
 8008116:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800811a:	4630      	mov	r0, r6
 800811c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fce3 	bl	8000aec <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f040 8288 	bne.w	800863c <_dtoa_r+0x98c>
 800812c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008136:	2b00      	cmp	r3, #0
 8008138:	f2c0 8158 	blt.w	80083ec <_dtoa_r+0x73c>
 800813c:	f1ba 0f0e 	cmp.w	sl, #14
 8008140:	f300 8154 	bgt.w	80083ec <_dtoa_r+0x73c>
 8008144:	4b6b      	ldr	r3, [pc, #428]	; (80082f4 <_dtoa_r+0x644>)
 8008146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800814a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	f280 80e3 	bge.w	800831c <_dtoa_r+0x66c>
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f300 80df 	bgt.w	800831c <_dtoa_r+0x66c>
 800815e:	f040 826d 	bne.w	800863c <_dtoa_r+0x98c>
 8008162:	4b69      	ldr	r3, [pc, #420]	; (8008308 <_dtoa_r+0x658>)
 8008164:	2200      	movs	r2, #0
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 fa4d 	bl	8000608 <__aeabi_dmul>
 800816e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008172:	f7f8 fccf 	bl	8000b14 <__aeabi_dcmpge>
 8008176:	9e01      	ldr	r6, [sp, #4]
 8008178:	4637      	mov	r7, r6
 800817a:	2800      	cmp	r0, #0
 800817c:	f040 8243 	bne.w	8008606 <_dtoa_r+0x956>
 8008180:	9d00      	ldr	r5, [sp, #0]
 8008182:	2331      	movs	r3, #49	; 0x31
 8008184:	f805 3b01 	strb.w	r3, [r5], #1
 8008188:	f10a 0a01 	add.w	sl, sl, #1
 800818c:	e23f      	b.n	800860e <_dtoa_r+0x95e>
 800818e:	07f2      	lsls	r2, r6, #31
 8008190:	d505      	bpl.n	800819e <_dtoa_r+0x4ee>
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	f7f8 fa37 	bl	8000608 <__aeabi_dmul>
 800819a:	3501      	adds	r5, #1
 800819c:	2301      	movs	r3, #1
 800819e:	1076      	asrs	r6, r6, #1
 80081a0:	3708      	adds	r7, #8
 80081a2:	e76c      	b.n	800807e <_dtoa_r+0x3ce>
 80081a4:	2502      	movs	r5, #2
 80081a6:	e76f      	b.n	8008088 <_dtoa_r+0x3d8>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80081ae:	930c      	str	r3, [sp, #48]	; 0x30
 80081b0:	e78d      	b.n	80080ce <_dtoa_r+0x41e>
 80081b2:	9900      	ldr	r1, [sp, #0]
 80081b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b8:	4b4e      	ldr	r3, [pc, #312]	; (80082f4 <_dtoa_r+0x644>)
 80081ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081be:	4401      	add	r1, r0
 80081c0:	9102      	str	r1, [sp, #8]
 80081c2:	9908      	ldr	r1, [sp, #32]
 80081c4:	eeb0 8a47 	vmov.f32	s16, s14
 80081c8:	eef0 8a67 	vmov.f32	s17, s15
 80081cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d045      	beq.n	8008264 <_dtoa_r+0x5b4>
 80081d8:	494c      	ldr	r1, [pc, #304]	; (800830c <_dtoa_r+0x65c>)
 80081da:	2000      	movs	r0, #0
 80081dc:	f7f8 fb3e 	bl	800085c <__aeabi_ddiv>
 80081e0:	ec53 2b18 	vmov	r2, r3, d8
 80081e4:	f7f8 f858 	bl	8000298 <__aeabi_dsub>
 80081e8:	9d00      	ldr	r5, [sp, #0]
 80081ea:	ec41 0b18 	vmov	d8, r0, r1
 80081ee:	4639      	mov	r1, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7f8 fcb9 	bl	8000b68 <__aeabi_d2iz>
 80081f6:	900c      	str	r0, [sp, #48]	; 0x30
 80081f8:	f7f8 f99c 	bl	8000534 <__aeabi_i2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f848 	bl	8000298 <__aeabi_dsub>
 8008208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820a:	3330      	adds	r3, #48	; 0x30
 800820c:	f805 3b01 	strb.w	r3, [r5], #1
 8008210:	ec53 2b18 	vmov	r2, r3, d8
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	f7f8 fc68 	bl	8000aec <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	d165      	bne.n	80082ec <_dtoa_r+0x63c>
 8008220:	4632      	mov	r2, r6
 8008222:	463b      	mov	r3, r7
 8008224:	4935      	ldr	r1, [pc, #212]	; (80082fc <_dtoa_r+0x64c>)
 8008226:	2000      	movs	r0, #0
 8008228:	f7f8 f836 	bl	8000298 <__aeabi_dsub>
 800822c:	ec53 2b18 	vmov	r2, r3, d8
 8008230:	f7f8 fc5c 	bl	8000aec <__aeabi_dcmplt>
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 80b9 	bne.w	80083ac <_dtoa_r+0x6fc>
 800823a:	9b02      	ldr	r3, [sp, #8]
 800823c:	429d      	cmp	r5, r3
 800823e:	f43f af75 	beq.w	800812c <_dtoa_r+0x47c>
 8008242:	4b2f      	ldr	r3, [pc, #188]	; (8008300 <_dtoa_r+0x650>)
 8008244:	ec51 0b18 	vmov	r0, r1, d8
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f9dd 	bl	8000608 <__aeabi_dmul>
 800824e:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <_dtoa_r+0x650>)
 8008250:	ec41 0b18 	vmov	d8, r0, r1
 8008254:	2200      	movs	r2, #0
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f9d5 	bl	8000608 <__aeabi_dmul>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	e7c4      	b.n	80081ee <_dtoa_r+0x53e>
 8008264:	ec51 0b17 	vmov	r0, r1, d7
 8008268:	f7f8 f9ce 	bl	8000608 <__aeabi_dmul>
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	9d00      	ldr	r5, [sp, #0]
 8008270:	930c      	str	r3, [sp, #48]	; 0x30
 8008272:	ec41 0b18 	vmov	d8, r0, r1
 8008276:	4639      	mov	r1, r7
 8008278:	4630      	mov	r0, r6
 800827a:	f7f8 fc75 	bl	8000b68 <__aeabi_d2iz>
 800827e:	9011      	str	r0, [sp, #68]	; 0x44
 8008280:	f7f8 f958 	bl	8000534 <__aeabi_i2d>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 f804 	bl	8000298 <__aeabi_dsub>
 8008290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008292:	3330      	adds	r3, #48	; 0x30
 8008294:	f805 3b01 	strb.w	r3, [r5], #1
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	429d      	cmp	r5, r3
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	d134      	bne.n	8008310 <_dtoa_r+0x660>
 80082a6:	4b19      	ldr	r3, [pc, #100]	; (800830c <_dtoa_r+0x65c>)
 80082a8:	ec51 0b18 	vmov	r0, r1, d8
 80082ac:	f7f7 fff6 	bl	800029c <__adddf3>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 fc36 	bl	8000b28 <__aeabi_dcmpgt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d175      	bne.n	80083ac <_dtoa_r+0x6fc>
 80082c0:	ec53 2b18 	vmov	r2, r3, d8
 80082c4:	4911      	ldr	r1, [pc, #68]	; (800830c <_dtoa_r+0x65c>)
 80082c6:	2000      	movs	r0, #0
 80082c8:	f7f7 ffe6 	bl	8000298 <__aeabi_dsub>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4630      	mov	r0, r6
 80082d2:	4639      	mov	r1, r7
 80082d4:	f7f8 fc0a 	bl	8000aec <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f43f af27 	beq.w	800812c <_dtoa_r+0x47c>
 80082de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e0:	1e6b      	subs	r3, r5, #1
 80082e2:	930c      	str	r3, [sp, #48]	; 0x30
 80082e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	d0f8      	beq.n	80082de <_dtoa_r+0x62e>
 80082ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80082f0:	e04a      	b.n	8008388 <_dtoa_r+0x6d8>
 80082f2:	bf00      	nop
 80082f4:	0800b200 	.word	0x0800b200
 80082f8:	0800b1d8 	.word	0x0800b1d8
 80082fc:	3ff00000 	.word	0x3ff00000
 8008300:	40240000 	.word	0x40240000
 8008304:	401c0000 	.word	0x401c0000
 8008308:	40140000 	.word	0x40140000
 800830c:	3fe00000 	.word	0x3fe00000
 8008310:	4baf      	ldr	r3, [pc, #700]	; (80085d0 <_dtoa_r+0x920>)
 8008312:	f7f8 f979 	bl	8000608 <__aeabi_dmul>
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	e7ac      	b.n	8008276 <_dtoa_r+0x5c6>
 800831c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008320:	9d00      	ldr	r5, [sp, #0]
 8008322:	4642      	mov	r2, r8
 8008324:	464b      	mov	r3, r9
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f8 fa97 	bl	800085c <__aeabi_ddiv>
 800832e:	f7f8 fc1b 	bl	8000b68 <__aeabi_d2iz>
 8008332:	9002      	str	r0, [sp, #8]
 8008334:	f7f8 f8fe 	bl	8000534 <__aeabi_i2d>
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	f7f8 f964 	bl	8000608 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ffa6 	bl	8000298 <__aeabi_dsub>
 800834c:	9e02      	ldr	r6, [sp, #8]
 800834e:	9f01      	ldr	r7, [sp, #4]
 8008350:	3630      	adds	r6, #48	; 0x30
 8008352:	f805 6b01 	strb.w	r6, [r5], #1
 8008356:	9e00      	ldr	r6, [sp, #0]
 8008358:	1bae      	subs	r6, r5, r6
 800835a:	42b7      	cmp	r7, r6
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	d137      	bne.n	80083d2 <_dtoa_r+0x722>
 8008362:	f7f7 ff9b 	bl	800029c <__adddf3>
 8008366:	4642      	mov	r2, r8
 8008368:	464b      	mov	r3, r9
 800836a:	4606      	mov	r6, r0
 800836c:	460f      	mov	r7, r1
 800836e:	f7f8 fbdb 	bl	8000b28 <__aeabi_dcmpgt>
 8008372:	b9c8      	cbnz	r0, 80083a8 <_dtoa_r+0x6f8>
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008380:	b110      	cbz	r0, 8008388 <_dtoa_r+0x6d8>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	07d9      	lsls	r1, r3, #31
 8008386:	d40f      	bmi.n	80083a8 <_dtoa_r+0x6f8>
 8008388:	4620      	mov	r0, r4
 800838a:	4659      	mov	r1, fp
 800838c:	f000 fad6 	bl	800893c <_Bfree>
 8008390:	2300      	movs	r3, #0
 8008392:	702b      	strb	r3, [r5, #0]
 8008394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008396:	f10a 0001 	add.w	r0, sl, #1
 800839a:	6018      	str	r0, [r3, #0]
 800839c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f acd8 	beq.w	8007d54 <_dtoa_r+0xa4>
 80083a4:	601d      	str	r5, [r3, #0]
 80083a6:	e4d5      	b.n	8007d54 <_dtoa_r+0xa4>
 80083a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80083ac:	462b      	mov	r3, r5
 80083ae:	461d      	mov	r5, r3
 80083b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083b4:	2a39      	cmp	r2, #57	; 0x39
 80083b6:	d108      	bne.n	80083ca <_dtoa_r+0x71a>
 80083b8:	9a00      	ldr	r2, [sp, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d1f7      	bne.n	80083ae <_dtoa_r+0x6fe>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	9900      	ldr	r1, [sp, #0]
 80083c2:	3201      	adds	r2, #1
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	2230      	movs	r2, #48	; 0x30
 80083c8:	700a      	strb	r2, [r1, #0]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	3201      	adds	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e78c      	b.n	80082ec <_dtoa_r+0x63c>
 80083d2:	4b7f      	ldr	r3, [pc, #508]	; (80085d0 <_dtoa_r+0x920>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	4606      	mov	r6, r0
 80083e0:	460f      	mov	r7, r1
 80083e2:	f7f8 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d09b      	beq.n	8008322 <_dtoa_r+0x672>
 80083ea:	e7cd      	b.n	8008388 <_dtoa_r+0x6d8>
 80083ec:	9a08      	ldr	r2, [sp, #32]
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	f000 80c4 	beq.w	800857c <_dtoa_r+0x8cc>
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	f300 80a8 	bgt.w	800854c <_dtoa_r+0x89c>
 80083fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083fe:	2a00      	cmp	r2, #0
 8008400:	f000 80a0 	beq.w	8008544 <_dtoa_r+0x894>
 8008404:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008408:	9e06      	ldr	r6, [sp, #24]
 800840a:	4645      	mov	r5, r8
 800840c:	9a04      	ldr	r2, [sp, #16]
 800840e:	2101      	movs	r1, #1
 8008410:	441a      	add	r2, r3
 8008412:	4620      	mov	r0, r4
 8008414:	4498      	add	r8, r3
 8008416:	9204      	str	r2, [sp, #16]
 8008418:	f000 fb4c 	bl	8008ab4 <__i2b>
 800841c:	4607      	mov	r7, r0
 800841e:	2d00      	cmp	r5, #0
 8008420:	dd0b      	ble.n	800843a <_dtoa_r+0x78a>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dd08      	ble.n	800843a <_dtoa_r+0x78a>
 8008428:	42ab      	cmp	r3, r5
 800842a:	9a04      	ldr	r2, [sp, #16]
 800842c:	bfa8      	it	ge
 800842e:	462b      	movge	r3, r5
 8008430:	eba8 0803 	sub.w	r8, r8, r3
 8008434:	1aed      	subs	r5, r5, r3
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	b1fb      	cbz	r3, 800847e <_dtoa_r+0x7ce>
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 809f 	beq.w	8008584 <_dtoa_r+0x8d4>
 8008446:	2e00      	cmp	r6, #0
 8008448:	dd11      	ble.n	800846e <_dtoa_r+0x7be>
 800844a:	4639      	mov	r1, r7
 800844c:	4632      	mov	r2, r6
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fbec 	bl	8008c2c <__pow5mult>
 8008454:	465a      	mov	r2, fp
 8008456:	4601      	mov	r1, r0
 8008458:	4607      	mov	r7, r0
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fb40 	bl	8008ae0 <__multiply>
 8008460:	4659      	mov	r1, fp
 8008462:	9007      	str	r0, [sp, #28]
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fa69 	bl	800893c <_Bfree>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	469b      	mov	fp, r3
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	1b9a      	subs	r2, r3, r6
 8008472:	d004      	beq.n	800847e <_dtoa_r+0x7ce>
 8008474:	4659      	mov	r1, fp
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fbd8 	bl	8008c2c <__pow5mult>
 800847c:	4683      	mov	fp, r0
 800847e:	2101      	movs	r1, #1
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fb17 	bl	8008ab4 <__i2b>
 8008486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	4606      	mov	r6, r0
 800848c:	dd7c      	ble.n	8008588 <_dtoa_r+0x8d8>
 800848e:	461a      	mov	r2, r3
 8008490:	4601      	mov	r1, r0
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fbca 	bl	8008c2c <__pow5mult>
 8008498:	9b05      	ldr	r3, [sp, #20]
 800849a:	2b01      	cmp	r3, #1
 800849c:	4606      	mov	r6, r0
 800849e:	dd76      	ble.n	800858e <_dtoa_r+0x8de>
 80084a0:	2300      	movs	r3, #0
 80084a2:	9306      	str	r3, [sp, #24]
 80084a4:	6933      	ldr	r3, [r6, #16]
 80084a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084aa:	6918      	ldr	r0, [r3, #16]
 80084ac:	f000 fab2 	bl	8008a14 <__hi0bits>
 80084b0:	f1c0 0020 	rsb	r0, r0, #32
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	4418      	add	r0, r3
 80084b8:	f010 001f 	ands.w	r0, r0, #31
 80084bc:	f000 8086 	beq.w	80085cc <_dtoa_r+0x91c>
 80084c0:	f1c0 0320 	rsb	r3, r0, #32
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	dd7f      	ble.n	80085c8 <_dtoa_r+0x918>
 80084c8:	f1c0 001c 	rsb	r0, r0, #28
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4403      	add	r3, r0
 80084d0:	4480      	add	r8, r0
 80084d2:	4405      	add	r5, r0
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	dd05      	ble.n	80084e8 <_dtoa_r+0x838>
 80084dc:	4659      	mov	r1, fp
 80084de:	4642      	mov	r2, r8
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fbfd 	bl	8008ce0 <__lshift>
 80084e6:	4683      	mov	fp, r0
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd05      	ble.n	80084fa <_dtoa_r+0x84a>
 80084ee:	4631      	mov	r1, r6
 80084f0:	461a      	mov	r2, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fbf4 	bl	8008ce0 <__lshift>
 80084f8:	4606      	mov	r6, r0
 80084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d069      	beq.n	80085d4 <_dtoa_r+0x924>
 8008500:	4631      	mov	r1, r6
 8008502:	4658      	mov	r0, fp
 8008504:	f000 fc58 	bl	8008db8 <__mcmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	da63      	bge.n	80085d4 <_dtoa_r+0x924>
 800850c:	2300      	movs	r3, #0
 800850e:	4659      	mov	r1, fp
 8008510:	220a      	movs	r2, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fa34 	bl	8008980 <__multadd>
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800851e:	4683      	mov	fp, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 818f 	beq.w	8008844 <_dtoa_r+0xb94>
 8008526:	4639      	mov	r1, r7
 8008528:	2300      	movs	r3, #0
 800852a:	220a      	movs	r2, #10
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fa27 	bl	8008980 <__multadd>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	4607      	mov	r7, r0
 8008538:	f300 808e 	bgt.w	8008658 <_dtoa_r+0x9a8>
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dc50      	bgt.n	80085e4 <_dtoa_r+0x934>
 8008542:	e089      	b.n	8008658 <_dtoa_r+0x9a8>
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800854a:	e75d      	b.n	8008408 <_dtoa_r+0x758>
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	1e5e      	subs	r6, r3, #1
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	42b3      	cmp	r3, r6
 8008554:	bfbf      	itttt	lt
 8008556:	9b06      	ldrlt	r3, [sp, #24]
 8008558:	9606      	strlt	r6, [sp, #24]
 800855a:	1af2      	sublt	r2, r6, r3
 800855c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800855e:	bfb6      	itet	lt
 8008560:	189b      	addlt	r3, r3, r2
 8008562:	1b9e      	subge	r6, r3, r6
 8008564:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	bfb8      	it	lt
 800856a:	2600      	movlt	r6, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb5      	itete	lt
 8008570:	eba8 0503 	sublt.w	r5, r8, r3
 8008574:	9b01      	ldrge	r3, [sp, #4]
 8008576:	2300      	movlt	r3, #0
 8008578:	4645      	movge	r5, r8
 800857a:	e747      	b.n	800840c <_dtoa_r+0x75c>
 800857c:	9e06      	ldr	r6, [sp, #24]
 800857e:	9f08      	ldr	r7, [sp, #32]
 8008580:	4645      	mov	r5, r8
 8008582:	e74c      	b.n	800841e <_dtoa_r+0x76e>
 8008584:	9a06      	ldr	r2, [sp, #24]
 8008586:	e775      	b.n	8008474 <_dtoa_r+0x7c4>
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	2b01      	cmp	r3, #1
 800858c:	dc18      	bgt.n	80085c0 <_dtoa_r+0x910>
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	b9b3      	cbnz	r3, 80085c0 <_dtoa_r+0x910>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008598:	b9a3      	cbnz	r3, 80085c4 <_dtoa_r+0x914>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	0d1b      	lsrs	r3, r3, #20
 80085a2:	051b      	lsls	r3, r3, #20
 80085a4:	b12b      	cbz	r3, 80085b2 <_dtoa_r+0x902>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	f108 0801 	add.w	r8, r8, #1
 80085b0:	2301      	movs	r3, #1
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af74 	bne.w	80084a4 <_dtoa_r+0x7f4>
 80085bc:	2001      	movs	r0, #1
 80085be:	e779      	b.n	80084b4 <_dtoa_r+0x804>
 80085c0:	2300      	movs	r3, #0
 80085c2:	e7f6      	b.n	80085b2 <_dtoa_r+0x902>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	e7f4      	b.n	80085b2 <_dtoa_r+0x902>
 80085c8:	d085      	beq.n	80084d6 <_dtoa_r+0x826>
 80085ca:	4618      	mov	r0, r3
 80085cc:	301c      	adds	r0, #28
 80085ce:	e77d      	b.n	80084cc <_dtoa_r+0x81c>
 80085d0:	40240000 	.word	0x40240000
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dc38      	bgt.n	800864c <_dtoa_r+0x99c>
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	dd35      	ble.n	800864c <_dtoa_r+0x99c>
 80085e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085e4:	f1b9 0f00 	cmp.w	r9, #0
 80085e8:	d10d      	bne.n	8008606 <_dtoa_r+0x956>
 80085ea:	4631      	mov	r1, r6
 80085ec:	464b      	mov	r3, r9
 80085ee:	2205      	movs	r2, #5
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 f9c5 	bl	8008980 <__multadd>
 80085f6:	4601      	mov	r1, r0
 80085f8:	4606      	mov	r6, r0
 80085fa:	4658      	mov	r0, fp
 80085fc:	f000 fbdc 	bl	8008db8 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	f73f adbd 	bgt.w	8008180 <_dtoa_r+0x4d0>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	9d00      	ldr	r5, [sp, #0]
 800860a:	ea6f 0a03 	mvn.w	sl, r3
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	4631      	mov	r1, r6
 8008614:	4620      	mov	r0, r4
 8008616:	f000 f991 	bl	800893c <_Bfree>
 800861a:	2f00      	cmp	r7, #0
 800861c:	f43f aeb4 	beq.w	8008388 <_dtoa_r+0x6d8>
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	d005      	beq.n	8008632 <_dtoa_r+0x982>
 8008626:	45b8      	cmp	r8, r7
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x982>
 800862a:	4641      	mov	r1, r8
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f985 	bl	800893c <_Bfree>
 8008632:	4639      	mov	r1, r7
 8008634:	4620      	mov	r0, r4
 8008636:	f000 f981 	bl	800893c <_Bfree>
 800863a:	e6a5      	b.n	8008388 <_dtoa_r+0x6d8>
 800863c:	2600      	movs	r6, #0
 800863e:	4637      	mov	r7, r6
 8008640:	e7e1      	b.n	8008606 <_dtoa_r+0x956>
 8008642:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008648:	4637      	mov	r7, r6
 800864a:	e599      	b.n	8008180 <_dtoa_r+0x4d0>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 80fd 	beq.w	8008852 <_dtoa_r+0xba2>
 8008658:	2d00      	cmp	r5, #0
 800865a:	dd05      	ble.n	8008668 <_dtoa_r+0x9b8>
 800865c:	4639      	mov	r1, r7
 800865e:	462a      	mov	r2, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fb3d 	bl	8008ce0 <__lshift>
 8008666:	4607      	mov	r7, r0
 8008668:	9b06      	ldr	r3, [sp, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d05c      	beq.n	8008728 <_dtoa_r+0xa78>
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f923 	bl	80088bc <_Balloc>
 8008676:	4605      	mov	r5, r0
 8008678:	b928      	cbnz	r0, 8008686 <_dtoa_r+0x9d6>
 800867a:	4b80      	ldr	r3, [pc, #512]	; (800887c <_dtoa_r+0xbcc>)
 800867c:	4602      	mov	r2, r0
 800867e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008682:	f7ff bb2e 	b.w	8007ce2 <_dtoa_r+0x32>
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	f107 010c 	add.w	r1, r7, #12
 8008690:	300c      	adds	r0, #12
 8008692:	f000 f905 	bl	80088a0 <memcpy>
 8008696:	2201      	movs	r2, #1
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fb20 	bl	8008ce0 <__lshift>
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	444b      	add	r3, r9
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	46b8      	mov	r8, r7
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	4607      	mov	r7, r0
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	4631      	mov	r1, r6
 80086bc:	3b01      	subs	r3, #1
 80086be:	4658      	mov	r0, fp
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	f7ff fa67 	bl	8007b94 <quorem>
 80086c6:	4603      	mov	r3, r0
 80086c8:	3330      	adds	r3, #48	; 0x30
 80086ca:	9004      	str	r0, [sp, #16]
 80086cc:	4641      	mov	r1, r8
 80086ce:	4658      	mov	r0, fp
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	f000 fb71 	bl	8008db8 <__mcmp>
 80086d6:	463a      	mov	r2, r7
 80086d8:	4681      	mov	r9, r0
 80086da:	4631      	mov	r1, r6
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fb87 	bl	8008df0 <__mdiff>
 80086e2:	68c2      	ldr	r2, [r0, #12]
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	4605      	mov	r5, r0
 80086e8:	bb02      	cbnz	r2, 800872c <_dtoa_r+0xa7c>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4658      	mov	r0, fp
 80086ee:	f000 fb63 	bl	8008db8 <__mcmp>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	4602      	mov	r2, r0
 80086f6:	4629      	mov	r1, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80086fe:	f000 f91d 	bl	800893c <_Bfree>
 8008702:	9b05      	ldr	r3, [sp, #20]
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	9d01      	ldr	r5, [sp, #4]
 8008708:	ea43 0102 	orr.w	r1, r3, r2
 800870c:	9b06      	ldr	r3, [sp, #24]
 800870e:	430b      	orrs	r3, r1
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	d10d      	bne.n	8008730 <_dtoa_r+0xa80>
 8008714:	2b39      	cmp	r3, #57	; 0x39
 8008716:	d029      	beq.n	800876c <_dtoa_r+0xabc>
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	dd01      	ble.n	8008722 <_dtoa_r+0xa72>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	3331      	adds	r3, #49	; 0x31
 8008722:	9a02      	ldr	r2, [sp, #8]
 8008724:	7013      	strb	r3, [r2, #0]
 8008726:	e774      	b.n	8008612 <_dtoa_r+0x962>
 8008728:	4638      	mov	r0, r7
 800872a:	e7b9      	b.n	80086a0 <_dtoa_r+0x9f0>
 800872c:	2201      	movs	r2, #1
 800872e:	e7e2      	b.n	80086f6 <_dtoa_r+0xa46>
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	db06      	blt.n	8008744 <_dtoa_r+0xa94>
 8008736:	9905      	ldr	r1, [sp, #20]
 8008738:	ea41 0909 	orr.w	r9, r1, r9
 800873c:	9906      	ldr	r1, [sp, #24]
 800873e:	ea59 0101 	orrs.w	r1, r9, r1
 8008742:	d120      	bne.n	8008786 <_dtoa_r+0xad6>
 8008744:	2a00      	cmp	r2, #0
 8008746:	ddec      	ble.n	8008722 <_dtoa_r+0xa72>
 8008748:	4659      	mov	r1, fp
 800874a:	2201      	movs	r2, #1
 800874c:	4620      	mov	r0, r4
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	f000 fac6 	bl	8008ce0 <__lshift>
 8008754:	4631      	mov	r1, r6
 8008756:	4683      	mov	fp, r0
 8008758:	f000 fb2e 	bl	8008db8 <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	dc02      	bgt.n	8008768 <_dtoa_r+0xab8>
 8008762:	d1de      	bne.n	8008722 <_dtoa_r+0xa72>
 8008764:	07da      	lsls	r2, r3, #31
 8008766:	d5dc      	bpl.n	8008722 <_dtoa_r+0xa72>
 8008768:	2b39      	cmp	r3, #57	; 0x39
 800876a:	d1d8      	bne.n	800871e <_dtoa_r+0xa6e>
 800876c:	9a02      	ldr	r2, [sp, #8]
 800876e:	2339      	movs	r3, #57	; 0x39
 8008770:	7013      	strb	r3, [r2, #0]
 8008772:	462b      	mov	r3, r5
 8008774:	461d      	mov	r5, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800877c:	2a39      	cmp	r2, #57	; 0x39
 800877e:	d050      	beq.n	8008822 <_dtoa_r+0xb72>
 8008780:	3201      	adds	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e745      	b.n	8008612 <_dtoa_r+0x962>
 8008786:	2a00      	cmp	r2, #0
 8008788:	dd03      	ble.n	8008792 <_dtoa_r+0xae2>
 800878a:	2b39      	cmp	r3, #57	; 0x39
 800878c:	d0ee      	beq.n	800876c <_dtoa_r+0xabc>
 800878e:	3301      	adds	r3, #1
 8008790:	e7c7      	b.n	8008722 <_dtoa_r+0xa72>
 8008792:	9a01      	ldr	r2, [sp, #4]
 8008794:	9907      	ldr	r1, [sp, #28]
 8008796:	f802 3c01 	strb.w	r3, [r2, #-1]
 800879a:	428a      	cmp	r2, r1
 800879c:	d02a      	beq.n	80087f4 <_dtoa_r+0xb44>
 800879e:	4659      	mov	r1, fp
 80087a0:	2300      	movs	r3, #0
 80087a2:	220a      	movs	r2, #10
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 f8eb 	bl	8008980 <__multadd>
 80087aa:	45b8      	cmp	r8, r7
 80087ac:	4683      	mov	fp, r0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	f04f 020a 	mov.w	r2, #10
 80087b6:	4641      	mov	r1, r8
 80087b8:	4620      	mov	r0, r4
 80087ba:	d107      	bne.n	80087cc <_dtoa_r+0xb1c>
 80087bc:	f000 f8e0 	bl	8008980 <__multadd>
 80087c0:	4680      	mov	r8, r0
 80087c2:	4607      	mov	r7, r0
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	3301      	adds	r3, #1
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	e775      	b.n	80086b8 <_dtoa_r+0xa08>
 80087cc:	f000 f8d8 	bl	8008980 <__multadd>
 80087d0:	4639      	mov	r1, r7
 80087d2:	4680      	mov	r8, r0
 80087d4:	2300      	movs	r3, #0
 80087d6:	220a      	movs	r2, #10
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 f8d1 	bl	8008980 <__multadd>
 80087de:	4607      	mov	r7, r0
 80087e0:	e7f0      	b.n	80087c4 <_dtoa_r+0xb14>
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	9a00      	ldr	r2, [sp, #0]
 80087e8:	bfcc      	ite	gt
 80087ea:	464d      	movgt	r5, r9
 80087ec:	2501      	movle	r5, #1
 80087ee:	4415      	add	r5, r2
 80087f0:	f04f 0800 	mov.w	r8, #0
 80087f4:	4659      	mov	r1, fp
 80087f6:	2201      	movs	r2, #1
 80087f8:	4620      	mov	r0, r4
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	f000 fa70 	bl	8008ce0 <__lshift>
 8008800:	4631      	mov	r1, r6
 8008802:	4683      	mov	fp, r0
 8008804:	f000 fad8 	bl	8008db8 <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	dcb2      	bgt.n	8008772 <_dtoa_r+0xac2>
 800880c:	d102      	bne.n	8008814 <_dtoa_r+0xb64>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	07db      	lsls	r3, r3, #31
 8008812:	d4ae      	bmi.n	8008772 <_dtoa_r+0xac2>
 8008814:	462b      	mov	r3, r5
 8008816:	461d      	mov	r5, r3
 8008818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800881c:	2a30      	cmp	r2, #48	; 0x30
 800881e:	d0fa      	beq.n	8008816 <_dtoa_r+0xb66>
 8008820:	e6f7      	b.n	8008612 <_dtoa_r+0x962>
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d1a5      	bne.n	8008774 <_dtoa_r+0xac4>
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	2331      	movs	r3, #49	; 0x31
 800882e:	e779      	b.n	8008724 <_dtoa_r+0xa74>
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <_dtoa_r+0xbd0>)
 8008832:	f7ff baaf 	b.w	8007d94 <_dtoa_r+0xe4>
 8008836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f aa86 	bne.w	8007d4a <_dtoa_r+0x9a>
 800883e:	4b11      	ldr	r3, [pc, #68]	; (8008884 <_dtoa_r+0xbd4>)
 8008840:	f7ff baa8 	b.w	8007d94 <_dtoa_r+0xe4>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	dc03      	bgt.n	8008852 <_dtoa_r+0xba2>
 800884a:	9b05      	ldr	r3, [sp, #20]
 800884c:	2b02      	cmp	r3, #2
 800884e:	f73f aec9 	bgt.w	80085e4 <_dtoa_r+0x934>
 8008852:	9d00      	ldr	r5, [sp, #0]
 8008854:	4631      	mov	r1, r6
 8008856:	4658      	mov	r0, fp
 8008858:	f7ff f99c 	bl	8007b94 <quorem>
 800885c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008860:	f805 3b01 	strb.w	r3, [r5], #1
 8008864:	9a00      	ldr	r2, [sp, #0]
 8008866:	1aaa      	subs	r2, r5, r2
 8008868:	4591      	cmp	r9, r2
 800886a:	ddba      	ble.n	80087e2 <_dtoa_r+0xb32>
 800886c:	4659      	mov	r1, fp
 800886e:	2300      	movs	r3, #0
 8008870:	220a      	movs	r2, #10
 8008872:	4620      	mov	r0, r4
 8008874:	f000 f884 	bl	8008980 <__multadd>
 8008878:	4683      	mov	fp, r0
 800887a:	e7eb      	b.n	8008854 <_dtoa_r+0xba4>
 800887c:	0800b163 	.word	0x0800b163
 8008880:	0800b0bc 	.word	0x0800b0bc
 8008884:	0800b0e0 	.word	0x0800b0e0

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	; (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	200003f0 	.word	0x200003f0

08008890 <malloc>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <malloc+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f000 bbef 	b.w	8009078 <_malloc_r>
 800889a:	bf00      	nop
 800889c:	2000029c 	.word	0x2000029c

080088a0 <memcpy>:
 80088a0:	440a      	add	r2, r1
 80088a2:	4291      	cmp	r1, r2
 80088a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a8:	d100      	bne.n	80088ac <memcpy+0xc>
 80088aa:	4770      	bx	lr
 80088ac:	b510      	push	{r4, lr}
 80088ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b6:	4291      	cmp	r1, r2
 80088b8:	d1f9      	bne.n	80088ae <memcpy+0xe>
 80088ba:	bd10      	pop	{r4, pc}

080088bc <_Balloc>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088c0:	4604      	mov	r4, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	b976      	cbnz	r6, 80088e4 <_Balloc+0x28>
 80088c6:	2010      	movs	r0, #16
 80088c8:	f7ff ffe2 	bl	8008890 <malloc>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6260      	str	r0, [r4, #36]	; 0x24
 80088d0:	b920      	cbnz	r0, 80088dc <_Balloc+0x20>
 80088d2:	4b18      	ldr	r3, [pc, #96]	; (8008934 <_Balloc+0x78>)
 80088d4:	4818      	ldr	r0, [pc, #96]	; (8008938 <_Balloc+0x7c>)
 80088d6:	2166      	movs	r1, #102	; 0x66
 80088d8:	f000 fd94 	bl	8009404 <__assert_func>
 80088dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e0:	6006      	str	r6, [r0, #0]
 80088e2:	60c6      	str	r6, [r0, #12]
 80088e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088e6:	68f3      	ldr	r3, [r6, #12]
 80088e8:	b183      	cbz	r3, 800890c <_Balloc+0x50>
 80088ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088f2:	b9b8      	cbnz	r0, 8008924 <_Balloc+0x68>
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f605 	lsl.w	r6, r1, r5
 80088fa:	1d72      	adds	r2, r6, #5
 80088fc:	0092      	lsls	r2, r2, #2
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 fb5a 	bl	8008fb8 <_calloc_r>
 8008904:	b160      	cbz	r0, 8008920 <_Balloc+0x64>
 8008906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800890a:	e00e      	b.n	800892a <_Balloc+0x6e>
 800890c:	2221      	movs	r2, #33	; 0x21
 800890e:	2104      	movs	r1, #4
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fb51 	bl	8008fb8 <_calloc_r>
 8008916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008918:	60f0      	str	r0, [r6, #12]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e4      	bne.n	80088ea <_Balloc+0x2e>
 8008920:	2000      	movs	r0, #0
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	6802      	ldr	r2, [r0, #0]
 8008926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800892a:	2300      	movs	r3, #0
 800892c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008930:	e7f7      	b.n	8008922 <_Balloc+0x66>
 8008932:	bf00      	nop
 8008934:	0800b0ed 	.word	0x0800b0ed
 8008938:	0800b174 	.word	0x0800b174

0800893c <_Bfree>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b976      	cbnz	r6, 8008964 <_Bfree+0x28>
 8008946:	2010      	movs	r0, #16
 8008948:	f7ff ffa2 	bl	8008890 <malloc>
 800894c:	4602      	mov	r2, r0
 800894e:	6268      	str	r0, [r5, #36]	; 0x24
 8008950:	b920      	cbnz	r0, 800895c <_Bfree+0x20>
 8008952:	4b09      	ldr	r3, [pc, #36]	; (8008978 <_Bfree+0x3c>)
 8008954:	4809      	ldr	r0, [pc, #36]	; (800897c <_Bfree+0x40>)
 8008956:	218a      	movs	r1, #138	; 0x8a
 8008958:	f000 fd54 	bl	8009404 <__assert_func>
 800895c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008960:	6006      	str	r6, [r0, #0]
 8008962:	60c6      	str	r6, [r0, #12]
 8008964:	b13c      	cbz	r4, 8008976 <_Bfree+0x3a>
 8008966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008968:	6862      	ldr	r2, [r4, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008970:	6021      	str	r1, [r4, #0]
 8008972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	0800b0ed 	.word	0x0800b0ed
 800897c:	0800b174 	.word	0x0800b174

08008980 <__multadd>:
 8008980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008984:	690e      	ldr	r6, [r1, #16]
 8008986:	4607      	mov	r7, r0
 8008988:	4698      	mov	r8, r3
 800898a:	460c      	mov	r4, r1
 800898c:	f101 0014 	add.w	r0, r1, #20
 8008990:	2300      	movs	r3, #0
 8008992:	6805      	ldr	r5, [r0, #0]
 8008994:	b2a9      	uxth	r1, r5
 8008996:	fb02 8101 	mla	r1, r2, r1, r8
 800899a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800899e:	0c2d      	lsrs	r5, r5, #16
 80089a0:	fb02 c505 	mla	r5, r2, r5, ip
 80089a4:	b289      	uxth	r1, r1
 80089a6:	3301      	adds	r3, #1
 80089a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80089ac:	429e      	cmp	r6, r3
 80089ae:	f840 1b04 	str.w	r1, [r0], #4
 80089b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80089b6:	dcec      	bgt.n	8008992 <__multadd+0x12>
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	d022      	beq.n	8008a04 <__multadd+0x84>
 80089be:	68a3      	ldr	r3, [r4, #8]
 80089c0:	42b3      	cmp	r3, r6
 80089c2:	dc19      	bgt.n	80089f8 <__multadd+0x78>
 80089c4:	6861      	ldr	r1, [r4, #4]
 80089c6:	4638      	mov	r0, r7
 80089c8:	3101      	adds	r1, #1
 80089ca:	f7ff ff77 	bl	80088bc <_Balloc>
 80089ce:	4605      	mov	r5, r0
 80089d0:	b928      	cbnz	r0, 80089de <__multadd+0x5e>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <__multadd+0x8c>)
 80089d6:	480e      	ldr	r0, [pc, #56]	; (8008a10 <__multadd+0x90>)
 80089d8:	21b5      	movs	r1, #181	; 0xb5
 80089da:	f000 fd13 	bl	8009404 <__assert_func>
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	3202      	adds	r2, #2
 80089e2:	f104 010c 	add.w	r1, r4, #12
 80089e6:	0092      	lsls	r2, r2, #2
 80089e8:	300c      	adds	r0, #12
 80089ea:	f7ff ff59 	bl	80088a0 <memcpy>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7ff ffa3 	bl	800893c <_Bfree>
 80089f6:	462c      	mov	r4, r5
 80089f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80089fc:	3601      	adds	r6, #1
 80089fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a02:	6126      	str	r6, [r4, #16]
 8008a04:	4620      	mov	r0, r4
 8008a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0a:	bf00      	nop
 8008a0c:	0800b163 	.word	0x0800b163
 8008a10:	0800b174 	.word	0x0800b174

08008a14 <__hi0bits>:
 8008a14:	0c03      	lsrs	r3, r0, #16
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	b9d3      	cbnz	r3, 8008a50 <__hi0bits+0x3c>
 8008a1a:	0400      	lsls	r0, r0, #16
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a22:	bf04      	itt	eq
 8008a24:	0200      	lsleq	r0, r0, #8
 8008a26:	3308      	addeq	r3, #8
 8008a28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a2c:	bf04      	itt	eq
 8008a2e:	0100      	lsleq	r0, r0, #4
 8008a30:	3304      	addeq	r3, #4
 8008a32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a36:	bf04      	itt	eq
 8008a38:	0080      	lsleq	r0, r0, #2
 8008a3a:	3302      	addeq	r3, #2
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	db05      	blt.n	8008a4c <__hi0bits+0x38>
 8008a40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a44:	f103 0301 	add.w	r3, r3, #1
 8008a48:	bf08      	it	eq
 8008a4a:	2320      	moveq	r3, #32
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	4770      	bx	lr
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7e4      	b.n	8008a1e <__hi0bits+0xa>

08008a54 <__lo0bits>:
 8008a54:	6803      	ldr	r3, [r0, #0]
 8008a56:	f013 0207 	ands.w	r2, r3, #7
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	d00b      	beq.n	8008a76 <__lo0bits+0x22>
 8008a5e:	07da      	lsls	r2, r3, #31
 8008a60:	d424      	bmi.n	8008aac <__lo0bits+0x58>
 8008a62:	0798      	lsls	r0, r3, #30
 8008a64:	bf49      	itett	mi
 8008a66:	085b      	lsrmi	r3, r3, #1
 8008a68:	089b      	lsrpl	r3, r3, #2
 8008a6a:	2001      	movmi	r0, #1
 8008a6c:	600b      	strmi	r3, [r1, #0]
 8008a6e:	bf5c      	itt	pl
 8008a70:	600b      	strpl	r3, [r1, #0]
 8008a72:	2002      	movpl	r0, #2
 8008a74:	4770      	bx	lr
 8008a76:	b298      	uxth	r0, r3
 8008a78:	b9b0      	cbnz	r0, 8008aa8 <__lo0bits+0x54>
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	2010      	movs	r0, #16
 8008a7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a82:	bf04      	itt	eq
 8008a84:	0a1b      	lsreq	r3, r3, #8
 8008a86:	3008      	addeq	r0, #8
 8008a88:	071a      	lsls	r2, r3, #28
 8008a8a:	bf04      	itt	eq
 8008a8c:	091b      	lsreq	r3, r3, #4
 8008a8e:	3004      	addeq	r0, #4
 8008a90:	079a      	lsls	r2, r3, #30
 8008a92:	bf04      	itt	eq
 8008a94:	089b      	lsreq	r3, r3, #2
 8008a96:	3002      	addeq	r0, #2
 8008a98:	07da      	lsls	r2, r3, #31
 8008a9a:	d403      	bmi.n	8008aa4 <__lo0bits+0x50>
 8008a9c:	085b      	lsrs	r3, r3, #1
 8008a9e:	f100 0001 	add.w	r0, r0, #1
 8008aa2:	d005      	beq.n	8008ab0 <__lo0bits+0x5c>
 8008aa4:	600b      	str	r3, [r1, #0]
 8008aa6:	4770      	bx	lr
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	e7e8      	b.n	8008a7e <__lo0bits+0x2a>
 8008aac:	2000      	movs	r0, #0
 8008aae:	4770      	bx	lr
 8008ab0:	2020      	movs	r0, #32
 8008ab2:	4770      	bx	lr

08008ab4 <__i2b>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	2101      	movs	r1, #1
 8008aba:	f7ff feff 	bl	80088bc <_Balloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__i2b+0x1a>
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <__i2b+0x24>)
 8008ac4:	4805      	ldr	r0, [pc, #20]	; (8008adc <__i2b+0x28>)
 8008ac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008aca:	f000 fc9b 	bl	8009404 <__assert_func>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	6144      	str	r4, [r0, #20]
 8008ad2:	6103      	str	r3, [r0, #16]
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	0800b163 	.word	0x0800b163
 8008adc:	0800b174 	.word	0x0800b174

08008ae0 <__multiply>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	690a      	ldr	r2, [r1, #16]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	bfb8      	it	lt
 8008aee:	460b      	movlt	r3, r1
 8008af0:	460d      	mov	r5, r1
 8008af2:	bfbc      	itt	lt
 8008af4:	4625      	movlt	r5, r4
 8008af6:	461c      	movlt	r4, r3
 8008af8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008afc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b00:	68ab      	ldr	r3, [r5, #8]
 8008b02:	6869      	ldr	r1, [r5, #4]
 8008b04:	eb0a 0709 	add.w	r7, sl, r9
 8008b08:	42bb      	cmp	r3, r7
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	bfb8      	it	lt
 8008b0e:	3101      	addlt	r1, #1
 8008b10:	f7ff fed4 	bl	80088bc <_Balloc>
 8008b14:	b930      	cbnz	r0, 8008b24 <__multiply+0x44>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <__multiply+0x144>)
 8008b1a:	4843      	ldr	r0, [pc, #268]	; (8008c28 <__multiply+0x148>)
 8008b1c:	f240 115d 	movw	r1, #349	; 0x15d
 8008b20:	f000 fc70 	bl	8009404 <__assert_func>
 8008b24:	f100 0614 	add.w	r6, r0, #20
 8008b28:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b2c:	4633      	mov	r3, r6
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4543      	cmp	r3, r8
 8008b32:	d31e      	bcc.n	8008b72 <__multiply+0x92>
 8008b34:	f105 0c14 	add.w	ip, r5, #20
 8008b38:	f104 0314 	add.w	r3, r4, #20
 8008b3c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b40:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b44:	9202      	str	r2, [sp, #8]
 8008b46:	ebac 0205 	sub.w	r2, ip, r5
 8008b4a:	3a15      	subs	r2, #21
 8008b4c:	f022 0203 	bic.w	r2, r2, #3
 8008b50:	3204      	adds	r2, #4
 8008b52:	f105 0115 	add.w	r1, r5, #21
 8008b56:	458c      	cmp	ip, r1
 8008b58:	bf38      	it	cc
 8008b5a:	2204      	movcc	r2, #4
 8008b5c:	9201      	str	r2, [sp, #4]
 8008b5e:	9a02      	ldr	r2, [sp, #8]
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d808      	bhi.n	8008b78 <__multiply+0x98>
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	dc55      	bgt.n	8008c16 <__multiply+0x136>
 8008b6a:	6107      	str	r7, [r0, #16]
 8008b6c:	b005      	add	sp, #20
 8008b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b72:	f843 2b04 	str.w	r2, [r3], #4
 8008b76:	e7db      	b.n	8008b30 <__multiply+0x50>
 8008b78:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b7c:	f1ba 0f00 	cmp.w	sl, #0
 8008b80:	d020      	beq.n	8008bc4 <__multiply+0xe4>
 8008b82:	f105 0e14 	add.w	lr, r5, #20
 8008b86:	46b1      	mov	r9, r6
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b8e:	f8d9 b000 	ldr.w	fp, [r9]
 8008b92:	b2a1      	uxth	r1, r4
 8008b94:	fa1f fb8b 	uxth.w	fp, fp
 8008b98:	fb0a b101 	mla	r1, sl, r1, fp
 8008b9c:	4411      	add	r1, r2
 8008b9e:	f8d9 2000 	ldr.w	r2, [r9]
 8008ba2:	0c24      	lsrs	r4, r4, #16
 8008ba4:	0c12      	lsrs	r2, r2, #16
 8008ba6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008baa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008bae:	b289      	uxth	r1, r1
 8008bb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008bb4:	45f4      	cmp	ip, lr
 8008bb6:	f849 1b04 	str.w	r1, [r9], #4
 8008bba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008bbe:	d8e4      	bhi.n	8008b8a <__multiply+0xaa>
 8008bc0:	9901      	ldr	r1, [sp, #4]
 8008bc2:	5072      	str	r2, [r6, r1]
 8008bc4:	9a03      	ldr	r2, [sp, #12]
 8008bc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	f1b9 0f00 	cmp.w	r9, #0
 8008bd0:	d01f      	beq.n	8008c12 <__multiply+0x132>
 8008bd2:	6834      	ldr	r4, [r6, #0]
 8008bd4:	f105 0114 	add.w	r1, r5, #20
 8008bd8:	46b6      	mov	lr, r6
 8008bda:	f04f 0a00 	mov.w	sl, #0
 8008bde:	880a      	ldrh	r2, [r1, #0]
 8008be0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008be4:	fb09 b202 	mla	r2, r9, r2, fp
 8008be8:	4492      	add	sl, r2
 8008bea:	b2a4      	uxth	r4, r4
 8008bec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008bf0:	f84e 4b04 	str.w	r4, [lr], #4
 8008bf4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008bf8:	f8be 2000 	ldrh.w	r2, [lr]
 8008bfc:	0c24      	lsrs	r4, r4, #16
 8008bfe:	fb09 2404 	mla	r4, r9, r4, r2
 8008c02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c06:	458c      	cmp	ip, r1
 8008c08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c0c:	d8e7      	bhi.n	8008bde <__multiply+0xfe>
 8008c0e:	9a01      	ldr	r2, [sp, #4]
 8008c10:	50b4      	str	r4, [r6, r2]
 8008c12:	3604      	adds	r6, #4
 8008c14:	e7a3      	b.n	8008b5e <__multiply+0x7e>
 8008c16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1a5      	bne.n	8008b6a <__multiply+0x8a>
 8008c1e:	3f01      	subs	r7, #1
 8008c20:	e7a1      	b.n	8008b66 <__multiply+0x86>
 8008c22:	bf00      	nop
 8008c24:	0800b163 	.word	0x0800b163
 8008c28:	0800b174 	.word	0x0800b174

08008c2c <__pow5mult>:
 8008c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	4615      	mov	r5, r2
 8008c32:	f012 0203 	ands.w	r2, r2, #3
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	d007      	beq.n	8008c4c <__pow5mult+0x20>
 8008c3c:	4c25      	ldr	r4, [pc, #148]	; (8008cd4 <__pow5mult+0xa8>)
 8008c3e:	3a01      	subs	r2, #1
 8008c40:	2300      	movs	r3, #0
 8008c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c46:	f7ff fe9b 	bl	8008980 <__multadd>
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	10ad      	asrs	r5, r5, #2
 8008c4e:	d03d      	beq.n	8008ccc <__pow5mult+0xa0>
 8008c50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c52:	b97c      	cbnz	r4, 8008c74 <__pow5mult+0x48>
 8008c54:	2010      	movs	r0, #16
 8008c56:	f7ff fe1b 	bl	8008890 <malloc>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c5e:	b928      	cbnz	r0, 8008c6c <__pow5mult+0x40>
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <__pow5mult+0xac>)
 8008c62:	481e      	ldr	r0, [pc, #120]	; (8008cdc <__pow5mult+0xb0>)
 8008c64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c68:	f000 fbcc 	bl	8009404 <__assert_func>
 8008c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c70:	6004      	str	r4, [r0, #0]
 8008c72:	60c4      	str	r4, [r0, #12]
 8008c74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c7c:	b94c      	cbnz	r4, 8008c92 <__pow5mult+0x66>
 8008c7e:	f240 2171 	movw	r1, #625	; 0x271
 8008c82:	4630      	mov	r0, r6
 8008c84:	f7ff ff16 	bl	8008ab4 <__i2b>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c8e:	4604      	mov	r4, r0
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	f04f 0900 	mov.w	r9, #0
 8008c96:	07eb      	lsls	r3, r5, #31
 8008c98:	d50a      	bpl.n	8008cb0 <__pow5mult+0x84>
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff ff1e 	bl	8008ae0 <__multiply>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff fe47 	bl	800893c <_Bfree>
 8008cae:	4647      	mov	r7, r8
 8008cb0:	106d      	asrs	r5, r5, #1
 8008cb2:	d00b      	beq.n	8008ccc <__pow5mult+0xa0>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	b938      	cbnz	r0, 8008cc8 <__pow5mult+0x9c>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ff0f 	bl	8008ae0 <__multiply>
 8008cc2:	6020      	str	r0, [r4, #0]
 8008cc4:	f8c0 9000 	str.w	r9, [r0]
 8008cc8:	4604      	mov	r4, r0
 8008cca:	e7e4      	b.n	8008c96 <__pow5mult+0x6a>
 8008ccc:	4638      	mov	r0, r7
 8008cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800b2c8 	.word	0x0800b2c8
 8008cd8:	0800b0ed 	.word	0x0800b0ed
 8008cdc:	0800b174 	.word	0x0800b174

08008ce0 <__lshift>:
 8008ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	6849      	ldr	r1, [r1, #4]
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	4691      	mov	r9, r2
 8008cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cf8:	f108 0601 	add.w	r6, r8, #1
 8008cfc:	42b3      	cmp	r3, r6
 8008cfe:	db0b      	blt.n	8008d18 <__lshift+0x38>
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff fddb 	bl	80088bc <_Balloc>
 8008d06:	4605      	mov	r5, r0
 8008d08:	b948      	cbnz	r0, 8008d1e <__lshift+0x3e>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <__lshift+0xd0>)
 8008d0e:	4829      	ldr	r0, [pc, #164]	; (8008db4 <__lshift+0xd4>)
 8008d10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d14:	f000 fb76 	bl	8009404 <__assert_func>
 8008d18:	3101      	adds	r1, #1
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	e7ee      	b.n	8008cfc <__lshift+0x1c>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f100 0114 	add.w	r1, r0, #20
 8008d24:	f100 0210 	add.w	r2, r0, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	4553      	cmp	r3, sl
 8008d2c:	db33      	blt.n	8008d96 <__lshift+0xb6>
 8008d2e:	6920      	ldr	r0, [r4, #16]
 8008d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d34:	f104 0314 	add.w	r3, r4, #20
 8008d38:	f019 091f 	ands.w	r9, r9, #31
 8008d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d44:	d02b      	beq.n	8008d9e <__lshift+0xbe>
 8008d46:	f1c9 0e20 	rsb	lr, r9, #32
 8008d4a:	468a      	mov	sl, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	fa00 f009 	lsl.w	r0, r0, r9
 8008d54:	4302      	orrs	r2, r0
 8008d56:	f84a 2b04 	str.w	r2, [sl], #4
 8008d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5e:	459c      	cmp	ip, r3
 8008d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d64:	d8f3      	bhi.n	8008d4e <__lshift+0x6e>
 8008d66:	ebac 0304 	sub.w	r3, ip, r4
 8008d6a:	3b15      	subs	r3, #21
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	3304      	adds	r3, #4
 8008d72:	f104 0015 	add.w	r0, r4, #21
 8008d76:	4584      	cmp	ip, r0
 8008d78:	bf38      	it	cc
 8008d7a:	2304      	movcc	r3, #4
 8008d7c:	50ca      	str	r2, [r1, r3]
 8008d7e:	b10a      	cbz	r2, 8008d84 <__lshift+0xa4>
 8008d80:	f108 0602 	add.w	r6, r8, #2
 8008d84:	3e01      	subs	r6, #1
 8008d86:	4638      	mov	r0, r7
 8008d88:	612e      	str	r6, [r5, #16]
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	f7ff fdd6 	bl	800893c <_Bfree>
 8008d90:	4628      	mov	r0, r5
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	e7c5      	b.n	8008d2a <__lshift+0x4a>
 8008d9e:	3904      	subs	r1, #4
 8008da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008da8:	459c      	cmp	ip, r3
 8008daa:	d8f9      	bhi.n	8008da0 <__lshift+0xc0>
 8008dac:	e7ea      	b.n	8008d84 <__lshift+0xa4>
 8008dae:	bf00      	nop
 8008db0:	0800b163 	.word	0x0800b163
 8008db4:	0800b174 	.word	0x0800b174

08008db8 <__mcmp>:
 8008db8:	b530      	push	{r4, r5, lr}
 8008dba:	6902      	ldr	r2, [r0, #16]
 8008dbc:	690c      	ldr	r4, [r1, #16]
 8008dbe:	1b12      	subs	r2, r2, r4
 8008dc0:	d10e      	bne.n	8008de0 <__mcmp+0x28>
 8008dc2:	f100 0314 	add.w	r3, r0, #20
 8008dc6:	3114      	adds	r1, #20
 8008dc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008dcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008dd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dd8:	42a5      	cmp	r5, r4
 8008dda:	d003      	beq.n	8008de4 <__mcmp+0x2c>
 8008ddc:	d305      	bcc.n	8008dea <__mcmp+0x32>
 8008dde:	2201      	movs	r2, #1
 8008de0:	4610      	mov	r0, r2
 8008de2:	bd30      	pop	{r4, r5, pc}
 8008de4:	4283      	cmp	r3, r0
 8008de6:	d3f3      	bcc.n	8008dd0 <__mcmp+0x18>
 8008de8:	e7fa      	b.n	8008de0 <__mcmp+0x28>
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	e7f7      	b.n	8008de0 <__mcmp+0x28>

08008df0 <__mdiff>:
 8008df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	4606      	mov	r6, r0
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4617      	mov	r7, r2
 8008dfe:	f7ff ffdb 	bl	8008db8 <__mcmp>
 8008e02:	1e05      	subs	r5, r0, #0
 8008e04:	d110      	bne.n	8008e28 <__mdiff+0x38>
 8008e06:	4629      	mov	r1, r5
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff fd57 	bl	80088bc <_Balloc>
 8008e0e:	b930      	cbnz	r0, 8008e1e <__mdiff+0x2e>
 8008e10:	4b39      	ldr	r3, [pc, #228]	; (8008ef8 <__mdiff+0x108>)
 8008e12:	4602      	mov	r2, r0
 8008e14:	f240 2132 	movw	r1, #562	; 0x232
 8008e18:	4838      	ldr	r0, [pc, #224]	; (8008efc <__mdiff+0x10c>)
 8008e1a:	f000 faf3 	bl	8009404 <__assert_func>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	bfa4      	itt	ge
 8008e2a:	463b      	movge	r3, r7
 8008e2c:	4627      	movge	r7, r4
 8008e2e:	4630      	mov	r0, r6
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	bfa6      	itte	ge
 8008e34:	461c      	movge	r4, r3
 8008e36:	2500      	movge	r5, #0
 8008e38:	2501      	movlt	r5, #1
 8008e3a:	f7ff fd3f 	bl	80088bc <_Balloc>
 8008e3e:	b920      	cbnz	r0, 8008e4a <__mdiff+0x5a>
 8008e40:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <__mdiff+0x108>)
 8008e42:	4602      	mov	r2, r0
 8008e44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e48:	e7e6      	b.n	8008e18 <__mdiff+0x28>
 8008e4a:	693e      	ldr	r6, [r7, #16]
 8008e4c:	60c5      	str	r5, [r0, #12]
 8008e4e:	6925      	ldr	r5, [r4, #16]
 8008e50:	f107 0114 	add.w	r1, r7, #20
 8008e54:	f104 0914 	add.w	r9, r4, #20
 8008e58:	f100 0e14 	add.w	lr, r0, #20
 8008e5c:	f107 0210 	add.w	r2, r7, #16
 8008e60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e68:	46f2      	mov	sl, lr
 8008e6a:	2700      	movs	r7, #0
 8008e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e74:	fa1f f883 	uxth.w	r8, r3
 8008e78:	fa17 f78b 	uxtah	r7, r7, fp
 8008e7c:	0c1b      	lsrs	r3, r3, #16
 8008e7e:	eba7 0808 	sub.w	r8, r7, r8
 8008e82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e8a:	fa1f f888 	uxth.w	r8, r8
 8008e8e:	141f      	asrs	r7, r3, #16
 8008e90:	454d      	cmp	r5, r9
 8008e92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e96:	f84a 3b04 	str.w	r3, [sl], #4
 8008e9a:	d8e7      	bhi.n	8008e6c <__mdiff+0x7c>
 8008e9c:	1b2b      	subs	r3, r5, r4
 8008e9e:	3b15      	subs	r3, #21
 8008ea0:	f023 0303 	bic.w	r3, r3, #3
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	3415      	adds	r4, #21
 8008ea8:	42a5      	cmp	r5, r4
 8008eaa:	bf38      	it	cc
 8008eac:	2304      	movcc	r3, #4
 8008eae:	4419      	add	r1, r3
 8008eb0:	4473      	add	r3, lr
 8008eb2:	469e      	mov	lr, r3
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	4565      	cmp	r5, ip
 8008eb8:	d30e      	bcc.n	8008ed8 <__mdiff+0xe8>
 8008eba:	f10c 0203 	add.w	r2, ip, #3
 8008ebe:	1a52      	subs	r2, r2, r1
 8008ec0:	f022 0203 	bic.w	r2, r2, #3
 8008ec4:	3903      	subs	r1, #3
 8008ec6:	458c      	cmp	ip, r1
 8008ec8:	bf38      	it	cc
 8008eca:	2200      	movcc	r2, #0
 8008ecc:	441a      	add	r2, r3
 8008ece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ed2:	b17b      	cbz	r3, 8008ef4 <__mdiff+0x104>
 8008ed4:	6106      	str	r6, [r0, #16]
 8008ed6:	e7a5      	b.n	8008e24 <__mdiff+0x34>
 8008ed8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008edc:	fa17 f488 	uxtah	r4, r7, r8
 8008ee0:	1422      	asrs	r2, r4, #16
 8008ee2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ee6:	b2a4      	uxth	r4, r4
 8008ee8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008eec:	f84e 4b04 	str.w	r4, [lr], #4
 8008ef0:	1417      	asrs	r7, r2, #16
 8008ef2:	e7e0      	b.n	8008eb6 <__mdiff+0xc6>
 8008ef4:	3e01      	subs	r6, #1
 8008ef6:	e7ea      	b.n	8008ece <__mdiff+0xde>
 8008ef8:	0800b163 	.word	0x0800b163
 8008efc:	0800b174 	.word	0x0800b174

08008f00 <__d2b>:
 8008f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4689      	mov	r9, r1
 8008f06:	2101      	movs	r1, #1
 8008f08:	ec57 6b10 	vmov	r6, r7, d0
 8008f0c:	4690      	mov	r8, r2
 8008f0e:	f7ff fcd5 	bl	80088bc <_Balloc>
 8008f12:	4604      	mov	r4, r0
 8008f14:	b930      	cbnz	r0, 8008f24 <__d2b+0x24>
 8008f16:	4602      	mov	r2, r0
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <__d2b+0xb0>)
 8008f1a:	4826      	ldr	r0, [pc, #152]	; (8008fb4 <__d2b+0xb4>)
 8008f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f20:	f000 fa70 	bl	8009404 <__assert_func>
 8008f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f2c:	bb35      	cbnz	r5, 8008f7c <__d2b+0x7c>
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	d028      	beq.n	8008f86 <__d2b+0x86>
 8008f34:	4668      	mov	r0, sp
 8008f36:	9600      	str	r6, [sp, #0]
 8008f38:	f7ff fd8c 	bl	8008a54 <__lo0bits>
 8008f3c:	9900      	ldr	r1, [sp, #0]
 8008f3e:	b300      	cbz	r0, 8008f82 <__d2b+0x82>
 8008f40:	9a01      	ldr	r2, [sp, #4]
 8008f42:	f1c0 0320 	rsb	r3, r0, #32
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	40c2      	lsrs	r2, r0
 8008f4e:	6163      	str	r3, [r4, #20]
 8008f50:	9201      	str	r2, [sp, #4]
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	61a3      	str	r3, [r4, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf14      	ite	ne
 8008f5a:	2202      	movne	r2, #2
 8008f5c:	2201      	moveq	r2, #1
 8008f5e:	6122      	str	r2, [r4, #16]
 8008f60:	b1d5      	cbz	r5, 8008f98 <__d2b+0x98>
 8008f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f66:	4405      	add	r5, r0
 8008f68:	f8c9 5000 	str.w	r5, [r9]
 8008f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f70:	f8c8 0000 	str.w	r0, [r8]
 8008f74:	4620      	mov	r0, r4
 8008f76:	b003      	add	sp, #12
 8008f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f80:	e7d5      	b.n	8008f2e <__d2b+0x2e>
 8008f82:	6161      	str	r1, [r4, #20]
 8008f84:	e7e5      	b.n	8008f52 <__d2b+0x52>
 8008f86:	a801      	add	r0, sp, #4
 8008f88:	f7ff fd64 	bl	8008a54 <__lo0bits>
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	6163      	str	r3, [r4, #20]
 8008f90:	2201      	movs	r2, #1
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	3020      	adds	r0, #32
 8008f96:	e7e3      	b.n	8008f60 <__d2b+0x60>
 8008f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fa0:	f8c9 0000 	str.w	r0, [r9]
 8008fa4:	6918      	ldr	r0, [r3, #16]
 8008fa6:	f7ff fd35 	bl	8008a14 <__hi0bits>
 8008faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fae:	e7df      	b.n	8008f70 <__d2b+0x70>
 8008fb0:	0800b163 	.word	0x0800b163
 8008fb4:	0800b174 	.word	0x0800b174

08008fb8 <_calloc_r>:
 8008fb8:	b513      	push	{r0, r1, r4, lr}
 8008fba:	434a      	muls	r2, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	9201      	str	r2, [sp, #4]
 8008fc0:	f000 f85a 	bl	8009078 <_malloc_r>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	b118      	cbz	r0, 8008fd0 <_calloc_r+0x18>
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	2100      	movs	r1, #0
 8008fcc:	f7fe f950 	bl	8007270 <memset>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	b002      	add	sp, #8
 8008fd4:	bd10      	pop	{r4, pc}
	...

08008fd8 <_free_r>:
 8008fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fda:	2900      	cmp	r1, #0
 8008fdc:	d048      	beq.n	8009070 <_free_r+0x98>
 8008fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe2:	9001      	str	r0, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fea:	bfb8      	it	lt
 8008fec:	18e4      	addlt	r4, r4, r3
 8008fee:	f000 fa65 	bl	80094bc <__malloc_lock>
 8008ff2:	4a20      	ldr	r2, [pc, #128]	; (8009074 <_free_r+0x9c>)
 8008ff4:	9801      	ldr	r0, [sp, #4]
 8008ff6:	6813      	ldr	r3, [r2, #0]
 8008ff8:	4615      	mov	r5, r2
 8008ffa:	b933      	cbnz	r3, 800900a <_free_r+0x32>
 8008ffc:	6063      	str	r3, [r4, #4]
 8008ffe:	6014      	str	r4, [r2, #0]
 8009000:	b003      	add	sp, #12
 8009002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009006:	f000 ba5f 	b.w	80094c8 <__malloc_unlock>
 800900a:	42a3      	cmp	r3, r4
 800900c:	d90b      	bls.n	8009026 <_free_r+0x4e>
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	1862      	adds	r2, r4, r1
 8009012:	4293      	cmp	r3, r2
 8009014:	bf04      	itt	eq
 8009016:	681a      	ldreq	r2, [r3, #0]
 8009018:	685b      	ldreq	r3, [r3, #4]
 800901a:	6063      	str	r3, [r4, #4]
 800901c:	bf04      	itt	eq
 800901e:	1852      	addeq	r2, r2, r1
 8009020:	6022      	streq	r2, [r4, #0]
 8009022:	602c      	str	r4, [r5, #0]
 8009024:	e7ec      	b.n	8009000 <_free_r+0x28>
 8009026:	461a      	mov	r2, r3
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	b10b      	cbz	r3, 8009030 <_free_r+0x58>
 800902c:	42a3      	cmp	r3, r4
 800902e:	d9fa      	bls.n	8009026 <_free_r+0x4e>
 8009030:	6811      	ldr	r1, [r2, #0]
 8009032:	1855      	adds	r5, r2, r1
 8009034:	42a5      	cmp	r5, r4
 8009036:	d10b      	bne.n	8009050 <_free_r+0x78>
 8009038:	6824      	ldr	r4, [r4, #0]
 800903a:	4421      	add	r1, r4
 800903c:	1854      	adds	r4, r2, r1
 800903e:	42a3      	cmp	r3, r4
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	d1dd      	bne.n	8009000 <_free_r+0x28>
 8009044:	681c      	ldr	r4, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	6053      	str	r3, [r2, #4]
 800904a:	4421      	add	r1, r4
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	e7d7      	b.n	8009000 <_free_r+0x28>
 8009050:	d902      	bls.n	8009058 <_free_r+0x80>
 8009052:	230c      	movs	r3, #12
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	e7d3      	b.n	8009000 <_free_r+0x28>
 8009058:	6825      	ldr	r5, [r4, #0]
 800905a:	1961      	adds	r1, r4, r5
 800905c:	428b      	cmp	r3, r1
 800905e:	bf04      	itt	eq
 8009060:	6819      	ldreq	r1, [r3, #0]
 8009062:	685b      	ldreq	r3, [r3, #4]
 8009064:	6063      	str	r3, [r4, #4]
 8009066:	bf04      	itt	eq
 8009068:	1949      	addeq	r1, r1, r5
 800906a:	6021      	streq	r1, [r4, #0]
 800906c:	6054      	str	r4, [r2, #4]
 800906e:	e7c7      	b.n	8009000 <_free_r+0x28>
 8009070:	b003      	add	sp, #12
 8009072:	bd30      	pop	{r4, r5, pc}
 8009074:	20000560 	.word	0x20000560

08009078 <_malloc_r>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	1ccd      	adds	r5, r1, #3
 800907c:	f025 0503 	bic.w	r5, r5, #3
 8009080:	3508      	adds	r5, #8
 8009082:	2d0c      	cmp	r5, #12
 8009084:	bf38      	it	cc
 8009086:	250c      	movcc	r5, #12
 8009088:	2d00      	cmp	r5, #0
 800908a:	4606      	mov	r6, r0
 800908c:	db01      	blt.n	8009092 <_malloc_r+0x1a>
 800908e:	42a9      	cmp	r1, r5
 8009090:	d903      	bls.n	800909a <_malloc_r+0x22>
 8009092:	230c      	movs	r3, #12
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	2000      	movs	r0, #0
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909a:	f000 fa0f 	bl	80094bc <__malloc_lock>
 800909e:	4921      	ldr	r1, [pc, #132]	; (8009124 <_malloc_r+0xac>)
 80090a0:	680a      	ldr	r2, [r1, #0]
 80090a2:	4614      	mov	r4, r2
 80090a4:	b99c      	cbnz	r4, 80090ce <_malloc_r+0x56>
 80090a6:	4f20      	ldr	r7, [pc, #128]	; (8009128 <_malloc_r+0xb0>)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	b923      	cbnz	r3, 80090b6 <_malloc_r+0x3e>
 80090ac:	4621      	mov	r1, r4
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f998 	bl	80093e4 <_sbrk_r>
 80090b4:	6038      	str	r0, [r7, #0]
 80090b6:	4629      	mov	r1, r5
 80090b8:	4630      	mov	r0, r6
 80090ba:	f000 f993 	bl	80093e4 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d123      	bne.n	800910a <_malloc_r+0x92>
 80090c2:	230c      	movs	r3, #12
 80090c4:	6033      	str	r3, [r6, #0]
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 f9fe 	bl	80094c8 <__malloc_unlock>
 80090cc:	e7e3      	b.n	8009096 <_malloc_r+0x1e>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	1b5b      	subs	r3, r3, r5
 80090d2:	d417      	bmi.n	8009104 <_malloc_r+0x8c>
 80090d4:	2b0b      	cmp	r3, #11
 80090d6:	d903      	bls.n	80090e0 <_malloc_r+0x68>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	441c      	add	r4, r3
 80090dc:	6025      	str	r5, [r4, #0]
 80090de:	e004      	b.n	80090ea <_malloc_r+0x72>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	bf0c      	ite	eq
 80090e6:	600b      	streq	r3, [r1, #0]
 80090e8:	6053      	strne	r3, [r2, #4]
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f9ec 	bl	80094c8 <__malloc_unlock>
 80090f0:	f104 000b 	add.w	r0, r4, #11
 80090f4:	1d23      	adds	r3, r4, #4
 80090f6:	f020 0007 	bic.w	r0, r0, #7
 80090fa:	1ac2      	subs	r2, r0, r3
 80090fc:	d0cc      	beq.n	8009098 <_malloc_r+0x20>
 80090fe:	1a1b      	subs	r3, r3, r0
 8009100:	50a3      	str	r3, [r4, r2]
 8009102:	e7c9      	b.n	8009098 <_malloc_r+0x20>
 8009104:	4622      	mov	r2, r4
 8009106:	6864      	ldr	r4, [r4, #4]
 8009108:	e7cc      	b.n	80090a4 <_malloc_r+0x2c>
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d0e3      	beq.n	80090dc <_malloc_r+0x64>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4630      	mov	r0, r6
 8009118:	f000 f964 	bl	80093e4 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d1dd      	bne.n	80090dc <_malloc_r+0x64>
 8009120:	e7cf      	b.n	80090c2 <_malloc_r+0x4a>
 8009122:	bf00      	nop
 8009124:	20000560 	.word	0x20000560
 8009128:	20000564 	.word	0x20000564

0800912c <__ssputs_r>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	688e      	ldr	r6, [r1, #8]
 8009132:	429e      	cmp	r6, r3
 8009134:	4682      	mov	sl, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4690      	mov	r8, r2
 800913a:	461f      	mov	r7, r3
 800913c:	d838      	bhi.n	80091b0 <__ssputs_r+0x84>
 800913e:	898a      	ldrh	r2, [r1, #12]
 8009140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009144:	d032      	beq.n	80091ac <__ssputs_r+0x80>
 8009146:	6825      	ldr	r5, [r4, #0]
 8009148:	6909      	ldr	r1, [r1, #16]
 800914a:	eba5 0901 	sub.w	r9, r5, r1
 800914e:	6965      	ldr	r5, [r4, #20]
 8009150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009158:	3301      	adds	r3, #1
 800915a:	444b      	add	r3, r9
 800915c:	106d      	asrs	r5, r5, #1
 800915e:	429d      	cmp	r5, r3
 8009160:	bf38      	it	cc
 8009162:	461d      	movcc	r5, r3
 8009164:	0553      	lsls	r3, r2, #21
 8009166:	d531      	bpl.n	80091cc <__ssputs_r+0xa0>
 8009168:	4629      	mov	r1, r5
 800916a:	f7ff ff85 	bl	8009078 <_malloc_r>
 800916e:	4606      	mov	r6, r0
 8009170:	b950      	cbnz	r0, 8009188 <__ssputs_r+0x5c>
 8009172:	230c      	movs	r3, #12
 8009174:	f8ca 3000 	str.w	r3, [sl]
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	6921      	ldr	r1, [r4, #16]
 800918a:	464a      	mov	r2, r9
 800918c:	f7ff fb88 	bl	80088a0 <memcpy>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	6126      	str	r6, [r4, #16]
 800919e:	6165      	str	r5, [r4, #20]
 80091a0:	444e      	add	r6, r9
 80091a2:	eba5 0509 	sub.w	r5, r5, r9
 80091a6:	6026      	str	r6, [r4, #0]
 80091a8:	60a5      	str	r5, [r4, #8]
 80091aa:	463e      	mov	r6, r7
 80091ac:	42be      	cmp	r6, r7
 80091ae:	d900      	bls.n	80091b2 <__ssputs_r+0x86>
 80091b0:	463e      	mov	r6, r7
 80091b2:	4632      	mov	r2, r6
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	4641      	mov	r1, r8
 80091b8:	f000 f966 	bl	8009488 <memmove>
 80091bc:	68a3      	ldr	r3, [r4, #8]
 80091be:	6822      	ldr	r2, [r4, #0]
 80091c0:	1b9b      	subs	r3, r3, r6
 80091c2:	4432      	add	r2, r6
 80091c4:	60a3      	str	r3, [r4, #8]
 80091c6:	6022      	str	r2, [r4, #0]
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7db      	b.n	8009184 <__ssputs_r+0x58>
 80091cc:	462a      	mov	r2, r5
 80091ce:	f000 f981 	bl	80094d4 <_realloc_r>
 80091d2:	4606      	mov	r6, r0
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d1e1      	bne.n	800919c <__ssputs_r+0x70>
 80091d8:	6921      	ldr	r1, [r4, #16]
 80091da:	4650      	mov	r0, sl
 80091dc:	f7ff fefc 	bl	8008fd8 <_free_r>
 80091e0:	e7c7      	b.n	8009172 <__ssputs_r+0x46>
	...

080091e4 <_svfiprintf_r>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	4698      	mov	r8, r3
 80091ea:	898b      	ldrh	r3, [r1, #12]
 80091ec:	061b      	lsls	r3, r3, #24
 80091ee:	b09d      	sub	sp, #116	; 0x74
 80091f0:	4607      	mov	r7, r0
 80091f2:	460d      	mov	r5, r1
 80091f4:	4614      	mov	r4, r2
 80091f6:	d50e      	bpl.n	8009216 <_svfiprintf_r+0x32>
 80091f8:	690b      	ldr	r3, [r1, #16]
 80091fa:	b963      	cbnz	r3, 8009216 <_svfiprintf_r+0x32>
 80091fc:	2140      	movs	r1, #64	; 0x40
 80091fe:	f7ff ff3b 	bl	8009078 <_malloc_r>
 8009202:	6028      	str	r0, [r5, #0]
 8009204:	6128      	str	r0, [r5, #16]
 8009206:	b920      	cbnz	r0, 8009212 <_svfiprintf_r+0x2e>
 8009208:	230c      	movs	r3, #12
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e0d1      	b.n	80093b6 <_svfiprintf_r+0x1d2>
 8009212:	2340      	movs	r3, #64	; 0x40
 8009214:	616b      	str	r3, [r5, #20]
 8009216:	2300      	movs	r3, #0
 8009218:	9309      	str	r3, [sp, #36]	; 0x24
 800921a:	2320      	movs	r3, #32
 800921c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009220:	f8cd 800c 	str.w	r8, [sp, #12]
 8009224:	2330      	movs	r3, #48	; 0x30
 8009226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093d0 <_svfiprintf_r+0x1ec>
 800922a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800922e:	f04f 0901 	mov.w	r9, #1
 8009232:	4623      	mov	r3, r4
 8009234:	469a      	mov	sl, r3
 8009236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923a:	b10a      	cbz	r2, 8009240 <_svfiprintf_r+0x5c>
 800923c:	2a25      	cmp	r2, #37	; 0x25
 800923e:	d1f9      	bne.n	8009234 <_svfiprintf_r+0x50>
 8009240:	ebba 0b04 	subs.w	fp, sl, r4
 8009244:	d00b      	beq.n	800925e <_svfiprintf_r+0x7a>
 8009246:	465b      	mov	r3, fp
 8009248:	4622      	mov	r2, r4
 800924a:	4629      	mov	r1, r5
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff ff6d 	bl	800912c <__ssputs_r>
 8009252:	3001      	adds	r0, #1
 8009254:	f000 80aa 	beq.w	80093ac <_svfiprintf_r+0x1c8>
 8009258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925a:	445a      	add	r2, fp
 800925c:	9209      	str	r2, [sp, #36]	; 0x24
 800925e:	f89a 3000 	ldrb.w	r3, [sl]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80a2 	beq.w	80093ac <_svfiprintf_r+0x1c8>
 8009268:	2300      	movs	r3, #0
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009272:	f10a 0a01 	add.w	sl, sl, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	9307      	str	r3, [sp, #28]
 800927a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800927e:	931a      	str	r3, [sp, #104]	; 0x68
 8009280:	4654      	mov	r4, sl
 8009282:	2205      	movs	r2, #5
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	4851      	ldr	r0, [pc, #324]	; (80093d0 <_svfiprintf_r+0x1ec>)
 800928a:	f7f6 ffb1 	bl	80001f0 <memchr>
 800928e:	9a04      	ldr	r2, [sp, #16]
 8009290:	b9d8      	cbnz	r0, 80092ca <_svfiprintf_r+0xe6>
 8009292:	06d0      	lsls	r0, r2, #27
 8009294:	bf44      	itt	mi
 8009296:	2320      	movmi	r3, #32
 8009298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929c:	0711      	lsls	r1, r2, #28
 800929e:	bf44      	itt	mi
 80092a0:	232b      	movmi	r3, #43	; 0x2b
 80092a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a6:	f89a 3000 	ldrb.w	r3, [sl]
 80092aa:	2b2a      	cmp	r3, #42	; 0x2a
 80092ac:	d015      	beq.n	80092da <_svfiprintf_r+0xf6>
 80092ae:	9a07      	ldr	r2, [sp, #28]
 80092b0:	4654      	mov	r4, sl
 80092b2:	2000      	movs	r0, #0
 80092b4:	f04f 0c0a 	mov.w	ip, #10
 80092b8:	4621      	mov	r1, r4
 80092ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092be:	3b30      	subs	r3, #48	; 0x30
 80092c0:	2b09      	cmp	r3, #9
 80092c2:	d94e      	bls.n	8009362 <_svfiprintf_r+0x17e>
 80092c4:	b1b0      	cbz	r0, 80092f4 <_svfiprintf_r+0x110>
 80092c6:	9207      	str	r2, [sp, #28]
 80092c8:	e014      	b.n	80092f4 <_svfiprintf_r+0x110>
 80092ca:	eba0 0308 	sub.w	r3, r0, r8
 80092ce:	fa09 f303 	lsl.w	r3, r9, r3
 80092d2:	4313      	orrs	r3, r2
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	46a2      	mov	sl, r4
 80092d8:	e7d2      	b.n	8009280 <_svfiprintf_r+0x9c>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d19      	adds	r1, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9103      	str	r1, [sp, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfbb      	ittet	lt
 80092e6:	425b      	neglt	r3, r3
 80092e8:	f042 0202 	orrlt.w	r2, r2, #2
 80092ec:	9307      	strge	r3, [sp, #28]
 80092ee:	9307      	strlt	r3, [sp, #28]
 80092f0:	bfb8      	it	lt
 80092f2:	9204      	strlt	r2, [sp, #16]
 80092f4:	7823      	ldrb	r3, [r4, #0]
 80092f6:	2b2e      	cmp	r3, #46	; 0x2e
 80092f8:	d10c      	bne.n	8009314 <_svfiprintf_r+0x130>
 80092fa:	7863      	ldrb	r3, [r4, #1]
 80092fc:	2b2a      	cmp	r3, #42	; 0x2a
 80092fe:	d135      	bne.n	800936c <_svfiprintf_r+0x188>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	9203      	str	r2, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfb8      	it	lt
 800930c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009310:	3402      	adds	r4, #2
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093e0 <_svfiprintf_r+0x1fc>
 8009318:	7821      	ldrb	r1, [r4, #0]
 800931a:	2203      	movs	r2, #3
 800931c:	4650      	mov	r0, sl
 800931e:	f7f6 ff67 	bl	80001f0 <memchr>
 8009322:	b140      	cbz	r0, 8009336 <_svfiprintf_r+0x152>
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	eba0 000a 	sub.w	r0, r0, sl
 800932a:	fa03 f000 	lsl.w	r0, r3, r0
 800932e:	9b04      	ldr	r3, [sp, #16]
 8009330:	4303      	orrs	r3, r0
 8009332:	3401      	adds	r4, #1
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933a:	4826      	ldr	r0, [pc, #152]	; (80093d4 <_svfiprintf_r+0x1f0>)
 800933c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009340:	2206      	movs	r2, #6
 8009342:	f7f6 ff55 	bl	80001f0 <memchr>
 8009346:	2800      	cmp	r0, #0
 8009348:	d038      	beq.n	80093bc <_svfiprintf_r+0x1d8>
 800934a:	4b23      	ldr	r3, [pc, #140]	; (80093d8 <_svfiprintf_r+0x1f4>)
 800934c:	bb1b      	cbnz	r3, 8009396 <_svfiprintf_r+0x1b2>
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	3307      	adds	r3, #7
 8009352:	f023 0307 	bic.w	r3, r3, #7
 8009356:	3308      	adds	r3, #8
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800935c:	4433      	add	r3, r6
 800935e:	9309      	str	r3, [sp, #36]	; 0x24
 8009360:	e767      	b.n	8009232 <_svfiprintf_r+0x4e>
 8009362:	fb0c 3202 	mla	r2, ip, r2, r3
 8009366:	460c      	mov	r4, r1
 8009368:	2001      	movs	r0, #1
 800936a:	e7a5      	b.n	80092b8 <_svfiprintf_r+0xd4>
 800936c:	2300      	movs	r3, #0
 800936e:	3401      	adds	r4, #1
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	4619      	mov	r1, r3
 8009374:	f04f 0c0a 	mov.w	ip, #10
 8009378:	4620      	mov	r0, r4
 800937a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937e:	3a30      	subs	r2, #48	; 0x30
 8009380:	2a09      	cmp	r2, #9
 8009382:	d903      	bls.n	800938c <_svfiprintf_r+0x1a8>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0c5      	beq.n	8009314 <_svfiprintf_r+0x130>
 8009388:	9105      	str	r1, [sp, #20]
 800938a:	e7c3      	b.n	8009314 <_svfiprintf_r+0x130>
 800938c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009390:	4604      	mov	r4, r0
 8009392:	2301      	movs	r3, #1
 8009394:	e7f0      	b.n	8009378 <_svfiprintf_r+0x194>
 8009396:	ab03      	add	r3, sp, #12
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	462a      	mov	r2, r5
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <_svfiprintf_r+0x1f8>)
 800939e:	a904      	add	r1, sp, #16
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7fe f80d 	bl	80073c0 <_printf_float>
 80093a6:	1c42      	adds	r2, r0, #1
 80093a8:	4606      	mov	r6, r0
 80093aa:	d1d6      	bne.n	800935a <_svfiprintf_r+0x176>
 80093ac:	89ab      	ldrh	r3, [r5, #12]
 80093ae:	065b      	lsls	r3, r3, #25
 80093b0:	f53f af2c 	bmi.w	800920c <_svfiprintf_r+0x28>
 80093b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093b6:	b01d      	add	sp, #116	; 0x74
 80093b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093bc:	ab03      	add	r3, sp, #12
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	462a      	mov	r2, r5
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <_svfiprintf_r+0x1f8>)
 80093c4:	a904      	add	r1, sp, #16
 80093c6:	4638      	mov	r0, r7
 80093c8:	f7fe fa9e 	bl	8007908 <_printf_i>
 80093cc:	e7eb      	b.n	80093a6 <_svfiprintf_r+0x1c2>
 80093ce:	bf00      	nop
 80093d0:	0800b2d4 	.word	0x0800b2d4
 80093d4:	0800b2de 	.word	0x0800b2de
 80093d8:	080073c1 	.word	0x080073c1
 80093dc:	0800912d 	.word	0x0800912d
 80093e0:	0800b2da 	.word	0x0800b2da

080093e4 <_sbrk_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d06      	ldr	r5, [pc, #24]	; (8009400 <_sbrk_r+0x1c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	f7f9 feea 	bl	80031c8 <_sbrk>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_sbrk_r+0x1a>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_sbrk_r+0x1a>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000740 	.word	0x20000740

08009404 <__assert_func>:
 8009404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009406:	4614      	mov	r4, r2
 8009408:	461a      	mov	r2, r3
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <__assert_func+0x2c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4605      	mov	r5, r0
 8009410:	68d8      	ldr	r0, [r3, #12]
 8009412:	b14c      	cbz	r4, 8009428 <__assert_func+0x24>
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <__assert_func+0x30>)
 8009416:	9100      	str	r1, [sp, #0]
 8009418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800941c:	4906      	ldr	r1, [pc, #24]	; (8009438 <__assert_func+0x34>)
 800941e:	462b      	mov	r3, r5
 8009420:	f000 f80e 	bl	8009440 <fiprintf>
 8009424:	f000 faa4 	bl	8009970 <abort>
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <__assert_func+0x38>)
 800942a:	461c      	mov	r4, r3
 800942c:	e7f3      	b.n	8009416 <__assert_func+0x12>
 800942e:	bf00      	nop
 8009430:	2000029c 	.word	0x2000029c
 8009434:	0800b2e5 	.word	0x0800b2e5
 8009438:	0800b2f2 	.word	0x0800b2f2
 800943c:	0800b320 	.word	0x0800b320

08009440 <fiprintf>:
 8009440:	b40e      	push	{r1, r2, r3}
 8009442:	b503      	push	{r0, r1, lr}
 8009444:	4601      	mov	r1, r0
 8009446:	ab03      	add	r3, sp, #12
 8009448:	4805      	ldr	r0, [pc, #20]	; (8009460 <fiprintf+0x20>)
 800944a:	f853 2b04 	ldr.w	r2, [r3], #4
 800944e:	6800      	ldr	r0, [r0, #0]
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	f000 f88f 	bl	8009574 <_vfiprintf_r>
 8009456:	b002      	add	sp, #8
 8009458:	f85d eb04 	ldr.w	lr, [sp], #4
 800945c:	b003      	add	sp, #12
 800945e:	4770      	bx	lr
 8009460:	2000029c 	.word	0x2000029c

08009464 <__ascii_mbtowc>:
 8009464:	b082      	sub	sp, #8
 8009466:	b901      	cbnz	r1, 800946a <__ascii_mbtowc+0x6>
 8009468:	a901      	add	r1, sp, #4
 800946a:	b142      	cbz	r2, 800947e <__ascii_mbtowc+0x1a>
 800946c:	b14b      	cbz	r3, 8009482 <__ascii_mbtowc+0x1e>
 800946e:	7813      	ldrb	r3, [r2, #0]
 8009470:	600b      	str	r3, [r1, #0]
 8009472:	7812      	ldrb	r2, [r2, #0]
 8009474:	1e10      	subs	r0, r2, #0
 8009476:	bf18      	it	ne
 8009478:	2001      	movne	r0, #1
 800947a:	b002      	add	sp, #8
 800947c:	4770      	bx	lr
 800947e:	4610      	mov	r0, r2
 8009480:	e7fb      	b.n	800947a <__ascii_mbtowc+0x16>
 8009482:	f06f 0001 	mvn.w	r0, #1
 8009486:	e7f8      	b.n	800947a <__ascii_mbtowc+0x16>

08009488 <memmove>:
 8009488:	4288      	cmp	r0, r1
 800948a:	b510      	push	{r4, lr}
 800948c:	eb01 0402 	add.w	r4, r1, r2
 8009490:	d902      	bls.n	8009498 <memmove+0x10>
 8009492:	4284      	cmp	r4, r0
 8009494:	4623      	mov	r3, r4
 8009496:	d807      	bhi.n	80094a8 <memmove+0x20>
 8009498:	1e43      	subs	r3, r0, #1
 800949a:	42a1      	cmp	r1, r4
 800949c:	d008      	beq.n	80094b0 <memmove+0x28>
 800949e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094a6:	e7f8      	b.n	800949a <memmove+0x12>
 80094a8:	4402      	add	r2, r0
 80094aa:	4601      	mov	r1, r0
 80094ac:	428a      	cmp	r2, r1
 80094ae:	d100      	bne.n	80094b2 <memmove+0x2a>
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ba:	e7f7      	b.n	80094ac <memmove+0x24>

080094bc <__malloc_lock>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__malloc_lock+0x8>)
 80094be:	f000 bc17 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 80094c2:	bf00      	nop
 80094c4:	20000748 	.word	0x20000748

080094c8 <__malloc_unlock>:
 80094c8:	4801      	ldr	r0, [pc, #4]	; (80094d0 <__malloc_unlock+0x8>)
 80094ca:	f000 bc12 	b.w	8009cf2 <__retarget_lock_release_recursive>
 80094ce:	bf00      	nop
 80094d0:	20000748 	.word	0x20000748

080094d4 <_realloc_r>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	4607      	mov	r7, r0
 80094d8:	4614      	mov	r4, r2
 80094da:	460e      	mov	r6, r1
 80094dc:	b921      	cbnz	r1, 80094e8 <_realloc_r+0x14>
 80094de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094e2:	4611      	mov	r1, r2
 80094e4:	f7ff bdc8 	b.w	8009078 <_malloc_r>
 80094e8:	b922      	cbnz	r2, 80094f4 <_realloc_r+0x20>
 80094ea:	f7ff fd75 	bl	8008fd8 <_free_r>
 80094ee:	4625      	mov	r5, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f4:	f000 fc62 	bl	8009dbc <_malloc_usable_size_r>
 80094f8:	42a0      	cmp	r0, r4
 80094fa:	d20f      	bcs.n	800951c <_realloc_r+0x48>
 80094fc:	4621      	mov	r1, r4
 80094fe:	4638      	mov	r0, r7
 8009500:	f7ff fdba 	bl	8009078 <_malloc_r>
 8009504:	4605      	mov	r5, r0
 8009506:	2800      	cmp	r0, #0
 8009508:	d0f2      	beq.n	80094f0 <_realloc_r+0x1c>
 800950a:	4631      	mov	r1, r6
 800950c:	4622      	mov	r2, r4
 800950e:	f7ff f9c7 	bl	80088a0 <memcpy>
 8009512:	4631      	mov	r1, r6
 8009514:	4638      	mov	r0, r7
 8009516:	f7ff fd5f 	bl	8008fd8 <_free_r>
 800951a:	e7e9      	b.n	80094f0 <_realloc_r+0x1c>
 800951c:	4635      	mov	r5, r6
 800951e:	e7e7      	b.n	80094f0 <_realloc_r+0x1c>

08009520 <__sfputc_r>:
 8009520:	6893      	ldr	r3, [r2, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	b410      	push	{r4}
 8009528:	6093      	str	r3, [r2, #8]
 800952a:	da08      	bge.n	800953e <__sfputc_r+0x1e>
 800952c:	6994      	ldr	r4, [r2, #24]
 800952e:	42a3      	cmp	r3, r4
 8009530:	db01      	blt.n	8009536 <__sfputc_r+0x16>
 8009532:	290a      	cmp	r1, #10
 8009534:	d103      	bne.n	800953e <__sfputc_r+0x1e>
 8009536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953a:	f000 b94b 	b.w	80097d4 <__swbuf_r>
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	1c58      	adds	r0, r3, #1
 8009542:	6010      	str	r0, [r2, #0]
 8009544:	7019      	strb	r1, [r3, #0]
 8009546:	4608      	mov	r0, r1
 8009548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954c:	4770      	bx	lr

0800954e <__sfputs_r>:
 800954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009550:	4606      	mov	r6, r0
 8009552:	460f      	mov	r7, r1
 8009554:	4614      	mov	r4, r2
 8009556:	18d5      	adds	r5, r2, r3
 8009558:	42ac      	cmp	r4, r5
 800955a:	d101      	bne.n	8009560 <__sfputs_r+0x12>
 800955c:	2000      	movs	r0, #0
 800955e:	e007      	b.n	8009570 <__sfputs_r+0x22>
 8009560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009564:	463a      	mov	r2, r7
 8009566:	4630      	mov	r0, r6
 8009568:	f7ff ffda 	bl	8009520 <__sfputc_r>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d1f3      	bne.n	8009558 <__sfputs_r+0xa>
 8009570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009574 <_vfiprintf_r>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	460d      	mov	r5, r1
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4614      	mov	r4, r2
 800957e:	4698      	mov	r8, r3
 8009580:	4606      	mov	r6, r0
 8009582:	b118      	cbz	r0, 800958c <_vfiprintf_r+0x18>
 8009584:	6983      	ldr	r3, [r0, #24]
 8009586:	b90b      	cbnz	r3, 800958c <_vfiprintf_r+0x18>
 8009588:	f000 fb14 	bl	8009bb4 <__sinit>
 800958c:	4b89      	ldr	r3, [pc, #548]	; (80097b4 <_vfiprintf_r+0x240>)
 800958e:	429d      	cmp	r5, r3
 8009590:	d11b      	bne.n	80095ca <_vfiprintf_r+0x56>
 8009592:	6875      	ldr	r5, [r6, #4]
 8009594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009596:	07d9      	lsls	r1, r3, #31
 8009598:	d405      	bmi.n	80095a6 <_vfiprintf_r+0x32>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	059a      	lsls	r2, r3, #22
 800959e:	d402      	bmi.n	80095a6 <_vfiprintf_r+0x32>
 80095a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095a2:	f000 fba5 	bl	8009cf0 <__retarget_lock_acquire_recursive>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	071b      	lsls	r3, r3, #28
 80095aa:	d501      	bpl.n	80095b0 <_vfiprintf_r+0x3c>
 80095ac:	692b      	ldr	r3, [r5, #16]
 80095ae:	b9eb      	cbnz	r3, 80095ec <_vfiprintf_r+0x78>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	f000 f96e 	bl	8009894 <__swsetup_r>
 80095b8:	b1c0      	cbz	r0, 80095ec <_vfiprintf_r+0x78>
 80095ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095bc:	07dc      	lsls	r4, r3, #31
 80095be:	d50e      	bpl.n	80095de <_vfiprintf_r+0x6a>
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	b01d      	add	sp, #116	; 0x74
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	4b7b      	ldr	r3, [pc, #492]	; (80097b8 <_vfiprintf_r+0x244>)
 80095cc:	429d      	cmp	r5, r3
 80095ce:	d101      	bne.n	80095d4 <_vfiprintf_r+0x60>
 80095d0:	68b5      	ldr	r5, [r6, #8]
 80095d2:	e7df      	b.n	8009594 <_vfiprintf_r+0x20>
 80095d4:	4b79      	ldr	r3, [pc, #484]	; (80097bc <_vfiprintf_r+0x248>)
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf08      	it	eq
 80095da:	68f5      	ldreq	r5, [r6, #12]
 80095dc:	e7da      	b.n	8009594 <_vfiprintf_r+0x20>
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	0598      	lsls	r0, r3, #22
 80095e2:	d4ed      	bmi.n	80095c0 <_vfiprintf_r+0x4c>
 80095e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095e6:	f000 fb84 	bl	8009cf2 <__retarget_lock_release_recursive>
 80095ea:	e7e9      	b.n	80095c0 <_vfiprintf_r+0x4c>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9309      	str	r3, [sp, #36]	; 0x24
 80095f0:	2320      	movs	r3, #32
 80095f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fa:	2330      	movs	r3, #48	; 0x30
 80095fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097c0 <_vfiprintf_r+0x24c>
 8009600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009604:	f04f 0901 	mov.w	r9, #1
 8009608:	4623      	mov	r3, r4
 800960a:	469a      	mov	sl, r3
 800960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009610:	b10a      	cbz	r2, 8009616 <_vfiprintf_r+0xa2>
 8009612:	2a25      	cmp	r2, #37	; 0x25
 8009614:	d1f9      	bne.n	800960a <_vfiprintf_r+0x96>
 8009616:	ebba 0b04 	subs.w	fp, sl, r4
 800961a:	d00b      	beq.n	8009634 <_vfiprintf_r+0xc0>
 800961c:	465b      	mov	r3, fp
 800961e:	4622      	mov	r2, r4
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff ff93 	bl	800954e <__sfputs_r>
 8009628:	3001      	adds	r0, #1
 800962a:	f000 80aa 	beq.w	8009782 <_vfiprintf_r+0x20e>
 800962e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009630:	445a      	add	r2, fp
 8009632:	9209      	str	r2, [sp, #36]	; 0x24
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 80a2 	beq.w	8009782 <_vfiprintf_r+0x20e>
 800963e:	2300      	movs	r3, #0
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009648:	f10a 0a01 	add.w	sl, sl, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009654:	931a      	str	r3, [sp, #104]	; 0x68
 8009656:	4654      	mov	r4, sl
 8009658:	2205      	movs	r2, #5
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	4858      	ldr	r0, [pc, #352]	; (80097c0 <_vfiprintf_r+0x24c>)
 8009660:	f7f6 fdc6 	bl	80001f0 <memchr>
 8009664:	9a04      	ldr	r2, [sp, #16]
 8009666:	b9d8      	cbnz	r0, 80096a0 <_vfiprintf_r+0x12c>
 8009668:	06d1      	lsls	r1, r2, #27
 800966a:	bf44      	itt	mi
 800966c:	2320      	movmi	r3, #32
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009672:	0713      	lsls	r3, r2, #28
 8009674:	bf44      	itt	mi
 8009676:	232b      	movmi	r3, #43	; 0x2b
 8009678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800967c:	f89a 3000 	ldrb.w	r3, [sl]
 8009680:	2b2a      	cmp	r3, #42	; 0x2a
 8009682:	d015      	beq.n	80096b0 <_vfiprintf_r+0x13c>
 8009684:	9a07      	ldr	r2, [sp, #28]
 8009686:	4654      	mov	r4, sl
 8009688:	2000      	movs	r0, #0
 800968a:	f04f 0c0a 	mov.w	ip, #10
 800968e:	4621      	mov	r1, r4
 8009690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009694:	3b30      	subs	r3, #48	; 0x30
 8009696:	2b09      	cmp	r3, #9
 8009698:	d94e      	bls.n	8009738 <_vfiprintf_r+0x1c4>
 800969a:	b1b0      	cbz	r0, 80096ca <_vfiprintf_r+0x156>
 800969c:	9207      	str	r2, [sp, #28]
 800969e:	e014      	b.n	80096ca <_vfiprintf_r+0x156>
 80096a0:	eba0 0308 	sub.w	r3, r0, r8
 80096a4:	fa09 f303 	lsl.w	r3, r9, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	46a2      	mov	sl, r4
 80096ae:	e7d2      	b.n	8009656 <_vfiprintf_r+0xe2>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d19      	adds	r1, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9103      	str	r1, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfbb      	ittet	lt
 80096bc:	425b      	neglt	r3, r3
 80096be:	f042 0202 	orrlt.w	r2, r2, #2
 80096c2:	9307      	strge	r3, [sp, #28]
 80096c4:	9307      	strlt	r3, [sp, #28]
 80096c6:	bfb8      	it	lt
 80096c8:	9204      	strlt	r2, [sp, #16]
 80096ca:	7823      	ldrb	r3, [r4, #0]
 80096cc:	2b2e      	cmp	r3, #46	; 0x2e
 80096ce:	d10c      	bne.n	80096ea <_vfiprintf_r+0x176>
 80096d0:	7863      	ldrb	r3, [r4, #1]
 80096d2:	2b2a      	cmp	r3, #42	; 0x2a
 80096d4:	d135      	bne.n	8009742 <_vfiprintf_r+0x1ce>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	9203      	str	r2, [sp, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfb8      	it	lt
 80096e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e6:	3402      	adds	r4, #2
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097d0 <_vfiprintf_r+0x25c>
 80096ee:	7821      	ldrb	r1, [r4, #0]
 80096f0:	2203      	movs	r2, #3
 80096f2:	4650      	mov	r0, sl
 80096f4:	f7f6 fd7c 	bl	80001f0 <memchr>
 80096f8:	b140      	cbz	r0, 800970c <_vfiprintf_r+0x198>
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	eba0 000a 	sub.w	r0, r0, sl
 8009700:	fa03 f000 	lsl.w	r0, r3, r0
 8009704:	9b04      	ldr	r3, [sp, #16]
 8009706:	4303      	orrs	r3, r0
 8009708:	3401      	adds	r4, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009710:	482c      	ldr	r0, [pc, #176]	; (80097c4 <_vfiprintf_r+0x250>)
 8009712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009716:	2206      	movs	r2, #6
 8009718:	f7f6 fd6a 	bl	80001f0 <memchr>
 800971c:	2800      	cmp	r0, #0
 800971e:	d03f      	beq.n	80097a0 <_vfiprintf_r+0x22c>
 8009720:	4b29      	ldr	r3, [pc, #164]	; (80097c8 <_vfiprintf_r+0x254>)
 8009722:	bb1b      	cbnz	r3, 800976c <_vfiprintf_r+0x1f8>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	3308      	adds	r3, #8
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	443b      	add	r3, r7
 8009734:	9309      	str	r3, [sp, #36]	; 0x24
 8009736:	e767      	b.n	8009608 <_vfiprintf_r+0x94>
 8009738:	fb0c 3202 	mla	r2, ip, r2, r3
 800973c:	460c      	mov	r4, r1
 800973e:	2001      	movs	r0, #1
 8009740:	e7a5      	b.n	800968e <_vfiprintf_r+0x11a>
 8009742:	2300      	movs	r3, #0
 8009744:	3401      	adds	r4, #1
 8009746:	9305      	str	r3, [sp, #20]
 8009748:	4619      	mov	r1, r3
 800974a:	f04f 0c0a 	mov.w	ip, #10
 800974e:	4620      	mov	r0, r4
 8009750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009754:	3a30      	subs	r2, #48	; 0x30
 8009756:	2a09      	cmp	r2, #9
 8009758:	d903      	bls.n	8009762 <_vfiprintf_r+0x1ee>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c5      	beq.n	80096ea <_vfiprintf_r+0x176>
 800975e:	9105      	str	r1, [sp, #20]
 8009760:	e7c3      	b.n	80096ea <_vfiprintf_r+0x176>
 8009762:	fb0c 2101 	mla	r1, ip, r1, r2
 8009766:	4604      	mov	r4, r0
 8009768:	2301      	movs	r3, #1
 800976a:	e7f0      	b.n	800974e <_vfiprintf_r+0x1da>
 800976c:	ab03      	add	r3, sp, #12
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	462a      	mov	r2, r5
 8009772:	4b16      	ldr	r3, [pc, #88]	; (80097cc <_vfiprintf_r+0x258>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	4630      	mov	r0, r6
 8009778:	f7fd fe22 	bl	80073c0 <_printf_float>
 800977c:	4607      	mov	r7, r0
 800977e:	1c78      	adds	r0, r7, #1
 8009780:	d1d6      	bne.n	8009730 <_vfiprintf_r+0x1bc>
 8009782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009784:	07d9      	lsls	r1, r3, #31
 8009786:	d405      	bmi.n	8009794 <_vfiprintf_r+0x220>
 8009788:	89ab      	ldrh	r3, [r5, #12]
 800978a:	059a      	lsls	r2, r3, #22
 800978c:	d402      	bmi.n	8009794 <_vfiprintf_r+0x220>
 800978e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009790:	f000 faaf 	bl	8009cf2 <__retarget_lock_release_recursive>
 8009794:	89ab      	ldrh	r3, [r5, #12]
 8009796:	065b      	lsls	r3, r3, #25
 8009798:	f53f af12 	bmi.w	80095c0 <_vfiprintf_r+0x4c>
 800979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979e:	e711      	b.n	80095c4 <_vfiprintf_r+0x50>
 80097a0:	ab03      	add	r3, sp, #12
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	462a      	mov	r2, r5
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <_vfiprintf_r+0x258>)
 80097a8:	a904      	add	r1, sp, #16
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7fe f8ac 	bl	8007908 <_printf_i>
 80097b0:	e7e4      	b.n	800977c <_vfiprintf_r+0x208>
 80097b2:	bf00      	nop
 80097b4:	0800b44c 	.word	0x0800b44c
 80097b8:	0800b46c 	.word	0x0800b46c
 80097bc:	0800b42c 	.word	0x0800b42c
 80097c0:	0800b2d4 	.word	0x0800b2d4
 80097c4:	0800b2de 	.word	0x0800b2de
 80097c8:	080073c1 	.word	0x080073c1
 80097cc:	0800954f 	.word	0x0800954f
 80097d0:	0800b2da 	.word	0x0800b2da

080097d4 <__swbuf_r>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	4605      	mov	r5, r0
 80097dc:	b118      	cbz	r0, 80097e6 <__swbuf_r+0x12>
 80097de:	6983      	ldr	r3, [r0, #24]
 80097e0:	b90b      	cbnz	r3, 80097e6 <__swbuf_r+0x12>
 80097e2:	f000 f9e7 	bl	8009bb4 <__sinit>
 80097e6:	4b21      	ldr	r3, [pc, #132]	; (800986c <__swbuf_r+0x98>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d12b      	bne.n	8009844 <__swbuf_r+0x70>
 80097ec:	686c      	ldr	r4, [r5, #4]
 80097ee:	69a3      	ldr	r3, [r4, #24]
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	071a      	lsls	r2, r3, #28
 80097f6:	d52f      	bpl.n	8009858 <__swbuf_r+0x84>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	b36b      	cbz	r3, 8009858 <__swbuf_r+0x84>
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	1ac0      	subs	r0, r0, r3
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	b2f6      	uxtb	r6, r6
 8009806:	4283      	cmp	r3, r0
 8009808:	4637      	mov	r7, r6
 800980a:	dc04      	bgt.n	8009816 <__swbuf_r+0x42>
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 f93c 	bl	8009a8c <_fflush_r>
 8009814:	bb30      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	3b01      	subs	r3, #1
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	701e      	strb	r6, [r3, #0]
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	3001      	adds	r0, #1
 8009828:	4283      	cmp	r3, r0
 800982a:	d004      	beq.n	8009836 <__swbuf_r+0x62>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	07db      	lsls	r3, r3, #31
 8009830:	d506      	bpl.n	8009840 <__swbuf_r+0x6c>
 8009832:	2e0a      	cmp	r6, #10
 8009834:	d104      	bne.n	8009840 <__swbuf_r+0x6c>
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f000 f927 	bl	8009a8c <_fflush_r>
 800983e:	b988      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009840:	4638      	mov	r0, r7
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <__swbuf_r+0x9c>)
 8009846:	429c      	cmp	r4, r3
 8009848:	d101      	bne.n	800984e <__swbuf_r+0x7a>
 800984a:	68ac      	ldr	r4, [r5, #8]
 800984c:	e7cf      	b.n	80097ee <__swbuf_r+0x1a>
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <__swbuf_r+0xa0>)
 8009850:	429c      	cmp	r4, r3
 8009852:	bf08      	it	eq
 8009854:	68ec      	ldreq	r4, [r5, #12]
 8009856:	e7ca      	b.n	80097ee <__swbuf_r+0x1a>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f81a 	bl	8009894 <__swsetup_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	d0cb      	beq.n	80097fc <__swbuf_r+0x28>
 8009864:	f04f 37ff 	mov.w	r7, #4294967295
 8009868:	e7ea      	b.n	8009840 <__swbuf_r+0x6c>
 800986a:	bf00      	nop
 800986c:	0800b44c 	.word	0x0800b44c
 8009870:	0800b46c 	.word	0x0800b46c
 8009874:	0800b42c 	.word	0x0800b42c

08009878 <__ascii_wctomb>:
 8009878:	b149      	cbz	r1, 800988e <__ascii_wctomb+0x16>
 800987a:	2aff      	cmp	r2, #255	; 0xff
 800987c:	bf85      	ittet	hi
 800987e:	238a      	movhi	r3, #138	; 0x8a
 8009880:	6003      	strhi	r3, [r0, #0]
 8009882:	700a      	strbls	r2, [r1, #0]
 8009884:	f04f 30ff 	movhi.w	r0, #4294967295
 8009888:	bf98      	it	ls
 800988a:	2001      	movls	r0, #1
 800988c:	4770      	bx	lr
 800988e:	4608      	mov	r0, r1
 8009890:	4770      	bx	lr
	...

08009894 <__swsetup_r>:
 8009894:	4b32      	ldr	r3, [pc, #200]	; (8009960 <__swsetup_r+0xcc>)
 8009896:	b570      	push	{r4, r5, r6, lr}
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	4606      	mov	r6, r0
 800989c:	460c      	mov	r4, r1
 800989e:	b125      	cbz	r5, 80098aa <__swsetup_r+0x16>
 80098a0:	69ab      	ldr	r3, [r5, #24]
 80098a2:	b913      	cbnz	r3, 80098aa <__swsetup_r+0x16>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f985 	bl	8009bb4 <__sinit>
 80098aa:	4b2e      	ldr	r3, [pc, #184]	; (8009964 <__swsetup_r+0xd0>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d10f      	bne.n	80098d0 <__swsetup_r+0x3c>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b8:	0719      	lsls	r1, r3, #28
 80098ba:	d42c      	bmi.n	8009916 <__swsetup_r+0x82>
 80098bc:	06dd      	lsls	r5, r3, #27
 80098be:	d411      	bmi.n	80098e4 <__swsetup_r+0x50>
 80098c0:	2309      	movs	r3, #9
 80098c2:	6033      	str	r3, [r6, #0]
 80098c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295
 80098ce:	e03e      	b.n	800994e <__swsetup_r+0xba>
 80098d0:	4b25      	ldr	r3, [pc, #148]	; (8009968 <__swsetup_r+0xd4>)
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d101      	bne.n	80098da <__swsetup_r+0x46>
 80098d6:	68ac      	ldr	r4, [r5, #8]
 80098d8:	e7eb      	b.n	80098b2 <__swsetup_r+0x1e>
 80098da:	4b24      	ldr	r3, [pc, #144]	; (800996c <__swsetup_r+0xd8>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	bf08      	it	eq
 80098e0:	68ec      	ldreq	r4, [r5, #12]
 80098e2:	e7e6      	b.n	80098b2 <__swsetup_r+0x1e>
 80098e4:	0758      	lsls	r0, r3, #29
 80098e6:	d512      	bpl.n	800990e <__swsetup_r+0x7a>
 80098e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ea:	b141      	cbz	r1, 80098fe <__swsetup_r+0x6a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__swsetup_r+0x66>
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff fb6f 	bl	8008fd8 <_free_r>
 80098fa:	2300      	movs	r3, #0
 80098fc:	6363      	str	r3, [r4, #52]	; 0x34
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	2300      	movs	r3, #0
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f043 0308 	orr.w	r3, r3, #8
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	b94b      	cbnz	r3, 800992e <__swsetup_r+0x9a>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009924:	d003      	beq.n	800992e <__swsetup_r+0x9a>
 8009926:	4621      	mov	r1, r4
 8009928:	4630      	mov	r0, r6
 800992a:	f000 fa07 	bl	8009d3c <__smakebuf_r>
 800992e:	89a0      	ldrh	r0, [r4, #12]
 8009930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009934:	f010 0301 	ands.w	r3, r0, #1
 8009938:	d00a      	beq.n	8009950 <__swsetup_r+0xbc>
 800993a:	2300      	movs	r3, #0
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	6963      	ldr	r3, [r4, #20]
 8009940:	425b      	negs	r3, r3
 8009942:	61a3      	str	r3, [r4, #24]
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b943      	cbnz	r3, 800995a <__swsetup_r+0xc6>
 8009948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800994c:	d1ba      	bne.n	80098c4 <__swsetup_r+0x30>
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	0781      	lsls	r1, r0, #30
 8009952:	bf58      	it	pl
 8009954:	6963      	ldrpl	r3, [r4, #20]
 8009956:	60a3      	str	r3, [r4, #8]
 8009958:	e7f4      	b.n	8009944 <__swsetup_r+0xb0>
 800995a:	2000      	movs	r0, #0
 800995c:	e7f7      	b.n	800994e <__swsetup_r+0xba>
 800995e:	bf00      	nop
 8009960:	2000029c 	.word	0x2000029c
 8009964:	0800b44c 	.word	0x0800b44c
 8009968:	0800b46c 	.word	0x0800b46c
 800996c:	0800b42c 	.word	0x0800b42c

08009970 <abort>:
 8009970:	b508      	push	{r3, lr}
 8009972:	2006      	movs	r0, #6
 8009974:	f000 fa52 	bl	8009e1c <raise>
 8009978:	2001      	movs	r0, #1
 800997a:	f7f9 fbad 	bl	80030d8 <_exit>
	...

08009980 <__sflush_r>:
 8009980:	898a      	ldrh	r2, [r1, #12]
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	4605      	mov	r5, r0
 8009988:	0710      	lsls	r0, r2, #28
 800998a:	460c      	mov	r4, r1
 800998c:	d458      	bmi.n	8009a40 <__sflush_r+0xc0>
 800998e:	684b      	ldr	r3, [r1, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dc05      	bgt.n	80099a0 <__sflush_r+0x20>
 8009994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	dc02      	bgt.n	80099a0 <__sflush_r+0x20>
 800999a:	2000      	movs	r0, #0
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d0f9      	beq.n	800999a <__sflush_r+0x1a>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099ac:	682f      	ldr	r7, [r5, #0]
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	d032      	beq.n	8009a18 <__sflush_r+0x98>
 80099b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	075a      	lsls	r2, r3, #29
 80099b8:	d505      	bpl.n	80099c6 <__sflush_r+0x46>
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	1ac0      	subs	r0, r0, r3
 80099be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c0:	b10b      	cbz	r3, 80099c6 <__sflush_r+0x46>
 80099c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	2300      	movs	r3, #0
 80099c8:	4602      	mov	r2, r0
 80099ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099cc:	6a21      	ldr	r1, [r4, #32]
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b0      	blx	r6
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	d106      	bne.n	80099e6 <__sflush_r+0x66>
 80099d8:	6829      	ldr	r1, [r5, #0]
 80099da:	291d      	cmp	r1, #29
 80099dc:	d82c      	bhi.n	8009a38 <__sflush_r+0xb8>
 80099de:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <__sflush_r+0x108>)
 80099e0:	40ca      	lsrs	r2, r1
 80099e2:	07d6      	lsls	r6, r2, #31
 80099e4:	d528      	bpl.n	8009a38 <__sflush_r+0xb8>
 80099e6:	2200      	movs	r2, #0
 80099e8:	6062      	str	r2, [r4, #4]
 80099ea:	04d9      	lsls	r1, r3, #19
 80099ec:	6922      	ldr	r2, [r4, #16]
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	d504      	bpl.n	80099fc <__sflush_r+0x7c>
 80099f2:	1c42      	adds	r2, r0, #1
 80099f4:	d101      	bne.n	80099fa <__sflush_r+0x7a>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b903      	cbnz	r3, 80099fc <__sflush_r+0x7c>
 80099fa:	6560      	str	r0, [r4, #84]	; 0x54
 80099fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099fe:	602f      	str	r7, [r5, #0]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	d0ca      	beq.n	800999a <__sflush_r+0x1a>
 8009a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <__sflush_r+0x92>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff fae3 	bl	8008fd8 <_free_r>
 8009a12:	2000      	movs	r0, #0
 8009a14:	6360      	str	r0, [r4, #52]	; 0x34
 8009a16:	e7c1      	b.n	800999c <__sflush_r+0x1c>
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b0      	blx	r6
 8009a20:	1c41      	adds	r1, r0, #1
 8009a22:	d1c7      	bne.n	80099b4 <__sflush_r+0x34>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0c4      	beq.n	80099b4 <__sflush_r+0x34>
 8009a2a:	2b1d      	cmp	r3, #29
 8009a2c:	d001      	beq.n	8009a32 <__sflush_r+0xb2>
 8009a2e:	2b16      	cmp	r3, #22
 8009a30:	d101      	bne.n	8009a36 <__sflush_r+0xb6>
 8009a32:	602f      	str	r7, [r5, #0]
 8009a34:	e7b1      	b.n	800999a <__sflush_r+0x1a>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	e7ad      	b.n	800999c <__sflush_r+0x1c>
 8009a40:	690f      	ldr	r7, [r1, #16]
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	d0a9      	beq.n	800999a <__sflush_r+0x1a>
 8009a46:	0793      	lsls	r3, r2, #30
 8009a48:	680e      	ldr	r6, [r1, #0]
 8009a4a:	bf08      	it	eq
 8009a4c:	694b      	ldreq	r3, [r1, #20]
 8009a4e:	600f      	str	r7, [r1, #0]
 8009a50:	bf18      	it	ne
 8009a52:	2300      	movne	r3, #0
 8009a54:	eba6 0807 	sub.w	r8, r6, r7
 8009a58:	608b      	str	r3, [r1, #8]
 8009a5a:	f1b8 0f00 	cmp.w	r8, #0
 8009a5e:	dd9c      	ble.n	800999a <__sflush_r+0x1a>
 8009a60:	6a21      	ldr	r1, [r4, #32]
 8009a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a64:	4643      	mov	r3, r8
 8009a66:	463a      	mov	r2, r7
 8009a68:	4628      	mov	r0, r5
 8009a6a:	47b0      	blx	r6
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	dc06      	bgt.n	8009a7e <__sflush_r+0xfe>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e78e      	b.n	800999c <__sflush_r+0x1c>
 8009a7e:	4407      	add	r7, r0
 8009a80:	eba8 0800 	sub.w	r8, r8, r0
 8009a84:	e7e9      	b.n	8009a5a <__sflush_r+0xda>
 8009a86:	bf00      	nop
 8009a88:	20400001 	.word	0x20400001

08009a8c <_fflush_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b913      	cbnz	r3, 8009a9c <_fflush_r+0x10>
 8009a96:	2500      	movs	r5, #0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	b118      	cbz	r0, 8009aa6 <_fflush_r+0x1a>
 8009a9e:	6983      	ldr	r3, [r0, #24]
 8009aa0:	b90b      	cbnz	r3, 8009aa6 <_fflush_r+0x1a>
 8009aa2:	f000 f887 	bl	8009bb4 <__sinit>
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <_fflush_r+0x6c>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	d11b      	bne.n	8009ae4 <_fflush_r+0x58>
 8009aac:	686c      	ldr	r4, [r5, #4]
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0ef      	beq.n	8009a96 <_fflush_r+0xa>
 8009ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab8:	07d0      	lsls	r0, r2, #31
 8009aba:	d404      	bmi.n	8009ac6 <_fflush_r+0x3a>
 8009abc:	0599      	lsls	r1, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_fflush_r+0x3a>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f000 f915 	bl	8009cf0 <__retarget_lock_acquire_recursive>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7ff ff59 	bl	8009980 <__sflush_r>
 8009ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad0:	07da      	lsls	r2, r3, #31
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	d4e0      	bmi.n	8009a98 <_fflush_r+0xc>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d4dd      	bmi.n	8009a98 <_fflush_r+0xc>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f000 f908 	bl	8009cf2 <__retarget_lock_release_recursive>
 8009ae2:	e7d9      	b.n	8009a98 <_fflush_r+0xc>
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <_fflush_r+0x70>)
 8009ae6:	429c      	cmp	r4, r3
 8009ae8:	d101      	bne.n	8009aee <_fflush_r+0x62>
 8009aea:	68ac      	ldr	r4, [r5, #8]
 8009aec:	e7df      	b.n	8009aae <_fflush_r+0x22>
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <_fflush_r+0x74>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	bf08      	it	eq
 8009af4:	68ec      	ldreq	r4, [r5, #12]
 8009af6:	e7da      	b.n	8009aae <_fflush_r+0x22>
 8009af8:	0800b44c 	.word	0x0800b44c
 8009afc:	0800b46c 	.word	0x0800b46c
 8009b00:	0800b42c 	.word	0x0800b42c

08009b04 <std>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b510      	push	{r4, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b12:	6083      	str	r3, [r0, #8]
 8009b14:	8181      	strh	r1, [r0, #12]
 8009b16:	6643      	str	r3, [r0, #100]	; 0x64
 8009b18:	81c2      	strh	r2, [r0, #14]
 8009b1a:	6183      	str	r3, [r0, #24]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	2208      	movs	r2, #8
 8009b20:	305c      	adds	r0, #92	; 0x5c
 8009b22:	f7fd fba5 	bl	8007270 <memset>
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x38>)
 8009b28:	6263      	str	r3, [r4, #36]	; 0x24
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x3c>)
 8009b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <std+0x40>)
 8009b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b32:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <std+0x44>)
 8009b34:	6224      	str	r4, [r4, #32]
 8009b36:	6323      	str	r3, [r4, #48]	; 0x30
 8009b38:	bd10      	pop	{r4, pc}
 8009b3a:	bf00      	nop
 8009b3c:	08009e55 	.word	0x08009e55
 8009b40:	08009e77 	.word	0x08009e77
 8009b44:	08009eaf 	.word	0x08009eaf
 8009b48:	08009ed3 	.word	0x08009ed3

08009b4c <_cleanup_r>:
 8009b4c:	4901      	ldr	r1, [pc, #4]	; (8009b54 <_cleanup_r+0x8>)
 8009b4e:	f000 b8af 	b.w	8009cb0 <_fwalk_reent>
 8009b52:	bf00      	nop
 8009b54:	08009a8d 	.word	0x08009a8d

08009b58 <__sfmoreglue>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	1e4a      	subs	r2, r1, #1
 8009b5c:	2568      	movs	r5, #104	; 0x68
 8009b5e:	4355      	muls	r5, r2
 8009b60:	460e      	mov	r6, r1
 8009b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b66:	f7ff fa87 	bl	8009078 <_malloc_r>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	b140      	cbz	r0, 8009b80 <__sfmoreglue+0x28>
 8009b6e:	2100      	movs	r1, #0
 8009b70:	e9c0 1600 	strd	r1, r6, [r0]
 8009b74:	300c      	adds	r0, #12
 8009b76:	60a0      	str	r0, [r4, #8]
 8009b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b7c:	f7fd fb78 	bl	8007270 <memset>
 8009b80:	4620      	mov	r0, r4
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__sfp_lock_acquire>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__sfp_lock_acquire+0x8>)
 8009b86:	f000 b8b3 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	2000074c 	.word	0x2000074c

08009b90 <__sfp_lock_release>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__sfp_lock_release+0x8>)
 8009b92:	f000 b8ae 	b.w	8009cf2 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	2000074c 	.word	0x2000074c

08009b9c <__sinit_lock_acquire>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__sinit_lock_acquire+0x8>)
 8009b9e:	f000 b8a7 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20000747 	.word	0x20000747

08009ba8 <__sinit_lock_release>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__sinit_lock_release+0x8>)
 8009baa:	f000 b8a2 	b.w	8009cf2 <__retarget_lock_release_recursive>
 8009bae:	bf00      	nop
 8009bb0:	20000747 	.word	0x20000747

08009bb4 <__sinit>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	f7ff fff0 	bl	8009b9c <__sinit_lock_acquire>
 8009bbc:	69a3      	ldr	r3, [r4, #24]
 8009bbe:	b11b      	cbz	r3, 8009bc8 <__sinit+0x14>
 8009bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc4:	f7ff bff0 	b.w	8009ba8 <__sinit_lock_release>
 8009bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <__sinit+0x68>)
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <__sinit+0x6c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	bf04      	itt	eq
 8009bda:	2301      	moveq	r3, #1
 8009bdc:	61a3      	streq	r3, [r4, #24]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 f820 	bl	8009c24 <__sfp>
 8009be4:	6060      	str	r0, [r4, #4]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f81c 	bl	8009c24 <__sfp>
 8009bec:	60a0      	str	r0, [r4, #8]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f818 	bl	8009c24 <__sfp>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	60e0      	str	r0, [r4, #12]
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	6860      	ldr	r0, [r4, #4]
 8009bfc:	f7ff ff82 	bl	8009b04 <std>
 8009c00:	68a0      	ldr	r0, [r4, #8]
 8009c02:	2201      	movs	r2, #1
 8009c04:	2109      	movs	r1, #9
 8009c06:	f7ff ff7d 	bl	8009b04 <std>
 8009c0a:	68e0      	ldr	r0, [r4, #12]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	2112      	movs	r1, #18
 8009c10:	f7ff ff78 	bl	8009b04 <std>
 8009c14:	2301      	movs	r3, #1
 8009c16:	61a3      	str	r3, [r4, #24]
 8009c18:	e7d2      	b.n	8009bc0 <__sinit+0xc>
 8009c1a:	bf00      	nop
 8009c1c:	0800b0a8 	.word	0x0800b0a8
 8009c20:	08009b4d 	.word	0x08009b4d

08009c24 <__sfp>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4607      	mov	r7, r0
 8009c28:	f7ff ffac 	bl	8009b84 <__sfp_lock_acquire>
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <__sfp+0x84>)
 8009c2e:	681e      	ldr	r6, [r3, #0]
 8009c30:	69b3      	ldr	r3, [r6, #24]
 8009c32:	b913      	cbnz	r3, 8009c3a <__sfp+0x16>
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ffbd 	bl	8009bb4 <__sinit>
 8009c3a:	3648      	adds	r6, #72	; 0x48
 8009c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	d503      	bpl.n	8009c4c <__sfp+0x28>
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	b30b      	cbz	r3, 8009c8c <__sfp+0x68>
 8009c48:	6836      	ldr	r6, [r6, #0]
 8009c4a:	e7f7      	b.n	8009c3c <__sfp+0x18>
 8009c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c50:	b9d5      	cbnz	r5, 8009c88 <__sfp+0x64>
 8009c52:	4b16      	ldr	r3, [pc, #88]	; (8009cac <__sfp+0x88>)
 8009c54:	60e3      	str	r3, [r4, #12]
 8009c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c5c:	f000 f847 	bl	8009cee <__retarget_lock_init_recursive>
 8009c60:	f7ff ff96 	bl	8009b90 <__sfp_lock_release>
 8009c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c6c:	6025      	str	r5, [r4, #0]
 8009c6e:	61a5      	str	r5, [r4, #24]
 8009c70:	2208      	movs	r2, #8
 8009c72:	4629      	mov	r1, r5
 8009c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c78:	f7fd fafa 	bl	8007270 <memset>
 8009c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c84:	4620      	mov	r0, r4
 8009c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c88:	3468      	adds	r4, #104	; 0x68
 8009c8a:	e7d9      	b.n	8009c40 <__sfp+0x1c>
 8009c8c:	2104      	movs	r1, #4
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f7ff ff62 	bl	8009b58 <__sfmoreglue>
 8009c94:	4604      	mov	r4, r0
 8009c96:	6030      	str	r0, [r6, #0]
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1d5      	bne.n	8009c48 <__sfp+0x24>
 8009c9c:	f7ff ff78 	bl	8009b90 <__sfp_lock_release>
 8009ca0:	230c      	movs	r3, #12
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	e7ee      	b.n	8009c84 <__sfp+0x60>
 8009ca6:	bf00      	nop
 8009ca8:	0800b0a8 	.word	0x0800b0a8
 8009cac:	ffff0001 	.word	0xffff0001

08009cb0 <_fwalk_reent>:
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	4688      	mov	r8, r1
 8009cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cbc:	2700      	movs	r7, #0
 8009cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc6:	d505      	bpl.n	8009cd4 <_fwalk_reent+0x24>
 8009cc8:	6824      	ldr	r4, [r4, #0]
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	d1f7      	bne.n	8009cbe <_fwalk_reent+0xe>
 8009cce:	4638      	mov	r0, r7
 8009cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd4:	89ab      	ldrh	r3, [r5, #12]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d907      	bls.n	8009cea <_fwalk_reent+0x3a>
 8009cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	d003      	beq.n	8009cea <_fwalk_reent+0x3a>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	47c0      	blx	r8
 8009ce8:	4307      	orrs	r7, r0
 8009cea:	3568      	adds	r5, #104	; 0x68
 8009cec:	e7e9      	b.n	8009cc2 <_fwalk_reent+0x12>

08009cee <__retarget_lock_init_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__retarget_lock_acquire_recursive>:
 8009cf0:	4770      	bx	lr

08009cf2 <__retarget_lock_release_recursive>:
 8009cf2:	4770      	bx	lr

08009cf4 <__swhatbuf_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	b096      	sub	sp, #88	; 0x58
 8009d00:	4614      	mov	r4, r2
 8009d02:	461d      	mov	r5, r3
 8009d04:	da07      	bge.n	8009d16 <__swhatbuf_r+0x22>
 8009d06:	2300      	movs	r3, #0
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	89b3      	ldrh	r3, [r6, #12]
 8009d0c:	061a      	lsls	r2, r3, #24
 8009d0e:	d410      	bmi.n	8009d32 <__swhatbuf_r+0x3e>
 8009d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d14:	e00e      	b.n	8009d34 <__swhatbuf_r+0x40>
 8009d16:	466a      	mov	r2, sp
 8009d18:	f000 f902 	bl	8009f20 <_fstat_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	dbf2      	blt.n	8009d06 <__swhatbuf_r+0x12>
 8009d20:	9a01      	ldr	r2, [sp, #4]
 8009d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d2a:	425a      	negs	r2, r3
 8009d2c:	415a      	adcs	r2, r3
 8009d2e:	602a      	str	r2, [r5, #0]
 8009d30:	e7ee      	b.n	8009d10 <__swhatbuf_r+0x1c>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	2000      	movs	r0, #0
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	b016      	add	sp, #88	; 0x58
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b002      	add	sp, #8
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	ab01      	add	r3, sp, #4
 8009d5a:	466a      	mov	r2, sp
 8009d5c:	f7ff ffca 	bl	8009cf4 <__swhatbuf_r>
 8009d60:	9900      	ldr	r1, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff f987 	bl	8009078 <_malloc_r>
 8009d6a:	b948      	cbnz	r0, 8009d80 <__smakebuf_r+0x44>
 8009d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d4ef      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e7e3      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <__smakebuf_r+0x7c>)
 8009d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	6163      	str	r3, [r4, #20]
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	6120      	str	r0, [r4, #16]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x74>
 8009d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f8d1 	bl	8009f44 <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x74>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a0      	ldrh	r0, [r4, #12]
 8009db2:	4305      	orrs	r5, r0
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cd      	b.n	8009d54 <__smakebuf_r+0x18>
 8009db8:	08009b4d 	.word	0x08009b4d

08009dbc <_malloc_usable_size_r>:
 8009dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc0:	1f18      	subs	r0, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bfbc      	itt	lt
 8009dc6:	580b      	ldrlt	r3, [r1, r0]
 8009dc8:	18c0      	addlt	r0, r0, r3
 8009dca:	4770      	bx	lr

08009dcc <_raise_r>:
 8009dcc:	291f      	cmp	r1, #31
 8009dce:	b538      	push	{r3, r4, r5, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	d904      	bls.n	8009de0 <_raise_r+0x14>
 8009dd6:	2316      	movs	r3, #22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009de2:	b112      	cbz	r2, 8009dea <_raise_r+0x1e>
 8009de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de8:	b94b      	cbnz	r3, 8009dfe <_raise_r+0x32>
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 f830 	bl	8009e50 <_getpid_r>
 8009df0:	462a      	mov	r2, r5
 8009df2:	4601      	mov	r1, r0
 8009df4:	4620      	mov	r0, r4
 8009df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfa:	f000 b817 	b.w	8009e2c <_kill_r>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d00a      	beq.n	8009e18 <_raise_r+0x4c>
 8009e02:	1c59      	adds	r1, r3, #1
 8009e04:	d103      	bne.n	8009e0e <_raise_r+0x42>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	e7e7      	b.n	8009dde <_raise_r+0x12>
 8009e0e:	2400      	movs	r4, #0
 8009e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e14:	4628      	mov	r0, r5
 8009e16:	4798      	blx	r3
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7e0      	b.n	8009dde <_raise_r+0x12>

08009e1c <raise>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <raise+0xc>)
 8009e1e:	4601      	mov	r1, r0
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f7ff bfd3 	b.w	8009dcc <_raise_r>
 8009e26:	bf00      	nop
 8009e28:	2000029c 	.word	0x2000029c

08009e2c <_kill_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_kill_r+0x20>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	4611      	mov	r1, r2
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f7f9 f93d 	bl	80030b8 <_kill>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d102      	bne.n	8009e48 <_kill_r+0x1c>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b103      	cbz	r3, 8009e48 <_kill_r+0x1c>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000740 	.word	0x20000740

08009e50 <_getpid_r>:
 8009e50:	f7f9 b92a 	b.w	80030a8 <_getpid>

08009e54 <__sread>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	460c      	mov	r4, r1
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	f000 f894 	bl	8009f88 <_read_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	bfab      	itete	ge
 8009e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e66:	89a3      	ldrhlt	r3, [r4, #12]
 8009e68:	181b      	addge	r3, r3, r0
 8009e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6e:	bfac      	ite	ge
 8009e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e72:	81a3      	strhlt	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__swrite>:
 8009e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	898b      	ldrh	r3, [r1, #12]
 8009e7e:	05db      	lsls	r3, r3, #23
 8009e80:	4605      	mov	r5, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4616      	mov	r6, r2
 8009e86:	d505      	bpl.n	8009e94 <__swrite+0x1e>
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f000 f868 	bl	8009f64 <_lseek_r>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	f000 b817 	b.w	8009edc <_write_r>

08009eae <__sseek>:
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb6:	f000 f855 	bl	8009f64 <_lseek_r>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	bf15      	itete	ne
 8009ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eca:	81a3      	strheq	r3, [r4, #12]
 8009ecc:	bf18      	it	ne
 8009ece:	81a3      	strhne	r3, [r4, #12]
 8009ed0:	bd10      	pop	{r4, pc}

08009ed2 <__sclose>:
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 b813 	b.w	8009f00 <_close_r>
	...

08009edc <_write_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	; (8009efc <_write_r+0x20>)
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	602a      	str	r2, [r5, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f7f9 f91b 	bl	8003126 <_write>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_write_r+0x1e>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_write_r+0x1e>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	20000740 	.word	0x20000740

08009f00 <_close_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_close_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f9 f927 	bl	800315e <_close>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_close_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_close_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000740 	.word	0x20000740

08009f20 <_fstat_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_fstat_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7f9 f922 	bl	8003176 <_fstat>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_fstat_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_fstat_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000740 	.word	0x20000740

08009f44 <_isatty_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_isatty_r+0x1c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f7f9 f921 	bl	8003196 <_isatty>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_isatty_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_isatty_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	20000740 	.word	0x20000740

08009f64 <_lseek_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d07      	ldr	r5, [pc, #28]	; (8009f84 <_lseek_r+0x20>)
 8009f68:	4604      	mov	r4, r0
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f7f9 f91a 	bl	80031ac <_lseek>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_lseek_r+0x1e>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_lseek_r+0x1e>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20000740 	.word	0x20000740

08009f88 <_read_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_read_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f9 f8a8 	bl	80030ec <_read>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_read_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_read_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20000740 	.word	0x20000740
 8009fac:	00000000 	.word	0x00000000

08009fb0 <sin>:
 8009fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb2:	ec53 2b10 	vmov	r2, r3, d0
 8009fb6:	4826      	ldr	r0, [pc, #152]	; (800a050 <sin+0xa0>)
 8009fb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fbc:	4281      	cmp	r1, r0
 8009fbe:	dc07      	bgt.n	8009fd0 <sin+0x20>
 8009fc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a048 <sin+0x98>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f000 fe5b 	bl	800ac80 <__kernel_sin>
 8009fca:	ec51 0b10 	vmov	r0, r1, d0
 8009fce:	e007      	b.n	8009fe0 <sin+0x30>
 8009fd0:	4820      	ldr	r0, [pc, #128]	; (800a054 <sin+0xa4>)
 8009fd2:	4281      	cmp	r1, r0
 8009fd4:	dd09      	ble.n	8009fea <sin+0x3a>
 8009fd6:	ee10 0a10 	vmov	r0, s0
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f7f6 f95c 	bl	8000298 <__aeabi_dsub>
 8009fe0:	ec41 0b10 	vmov	d0, r0, r1
 8009fe4:	b005      	add	sp, #20
 8009fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fea:	4668      	mov	r0, sp
 8009fec:	f000 f834 	bl	800a058 <__ieee754_rem_pio2>
 8009ff0:	f000 0003 	and.w	r0, r0, #3
 8009ff4:	2801      	cmp	r0, #1
 8009ff6:	d008      	beq.n	800a00a <sin+0x5a>
 8009ff8:	2802      	cmp	r0, #2
 8009ffa:	d00d      	beq.n	800a018 <sin+0x68>
 8009ffc:	b9d0      	cbnz	r0, 800a034 <sin+0x84>
 8009ffe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a002:	ed9d 0b00 	vldr	d0, [sp]
 800a006:	2001      	movs	r0, #1
 800a008:	e7dd      	b.n	8009fc6 <sin+0x16>
 800a00a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a00e:	ed9d 0b00 	vldr	d0, [sp]
 800a012:	f000 fa2d 	bl	800a470 <__kernel_cos>
 800a016:	e7d8      	b.n	8009fca <sin+0x1a>
 800a018:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a01c:	ed9d 0b00 	vldr	d0, [sp]
 800a020:	2001      	movs	r0, #1
 800a022:	f000 fe2d 	bl	800ac80 <__kernel_sin>
 800a026:	ec53 2b10 	vmov	r2, r3, d0
 800a02a:	ee10 0a10 	vmov	r0, s0
 800a02e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a032:	e7d5      	b.n	8009fe0 <sin+0x30>
 800a034:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a038:	ed9d 0b00 	vldr	d0, [sp]
 800a03c:	f000 fa18 	bl	800a470 <__kernel_cos>
 800a040:	e7f1      	b.n	800a026 <sin+0x76>
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
	...
 800a050:	3fe921fb 	.word	0x3fe921fb
 800a054:	7fefffff 	.word	0x7fefffff

0800a058 <__ieee754_rem_pio2>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b02 	vpush	{d8}
 800a060:	ec55 4b10 	vmov	r4, r5, d0
 800a064:	4bca      	ldr	r3, [pc, #808]	; (800a390 <__ieee754_rem_pio2+0x338>)
 800a066:	b08b      	sub	sp, #44	; 0x2c
 800a068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a06c:	4598      	cmp	r8, r3
 800a06e:	4682      	mov	sl, r0
 800a070:	9502      	str	r5, [sp, #8]
 800a072:	dc08      	bgt.n	800a086 <__ieee754_rem_pio2+0x2e>
 800a074:	2200      	movs	r2, #0
 800a076:	2300      	movs	r3, #0
 800a078:	ed80 0b00 	vstr	d0, [r0]
 800a07c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a080:	f04f 0b00 	mov.w	fp, #0
 800a084:	e028      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a086:	4bc3      	ldr	r3, [pc, #780]	; (800a394 <__ieee754_rem_pio2+0x33c>)
 800a088:	4598      	cmp	r8, r3
 800a08a:	dc78      	bgt.n	800a17e <__ieee754_rem_pio2+0x126>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	4ec2      	ldr	r6, [pc, #776]	; (800a398 <__ieee754_rem_pio2+0x340>)
 800a090:	2b00      	cmp	r3, #0
 800a092:	ee10 0a10 	vmov	r0, s0
 800a096:	a3b0      	add	r3, pc, #704	; (adr r3, 800a358 <__ieee754_rem_pio2+0x300>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	4629      	mov	r1, r5
 800a09e:	dd39      	ble.n	800a114 <__ieee754_rem_pio2+0xbc>
 800a0a0:	f7f6 f8fa 	bl	8000298 <__aeabi_dsub>
 800a0a4:	45b0      	cmp	r8, r6
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	d01b      	beq.n	800a0e4 <__ieee754_rem_pio2+0x8c>
 800a0ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f8f1 	bl	8000298 <__aeabi_dsub>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f8e9 	bl	8000298 <__aeabi_dsub>
 800a0c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 f8e4 	bl	8000298 <__aeabi_dsub>
 800a0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0d4:	f04f 0b01 	mov.w	fp, #1
 800a0d8:	4658      	mov	r0, fp
 800a0da:	b00b      	add	sp, #44	; 0x2c
 800a0dc:	ecbd 8b02 	vpop	{d8}
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	f7f6 f8d5 	bl	8000298 <__aeabi_dsub>
 800a0ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	f7f6 f8ce 	bl	8000298 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9ca 2300 	strd	r2, r3, [sl]
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f7f6 f8c6 	bl	8000298 <__aeabi_dsub>
 800a10c:	a398      	add	r3, pc, #608	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	e7db      	b.n	800a0cc <__ieee754_rem_pio2+0x74>
 800a114:	f7f6 f8c2 	bl	800029c <__adddf3>
 800a118:	45b0      	cmp	r8, r6
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	d016      	beq.n	800a14e <__ieee754_rem_pio2+0xf6>
 800a120:	a38f      	add	r3, pc, #572	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f8b9 	bl	800029c <__adddf3>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	e9ca 2300 	strd	r2, r3, [sl]
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 f8af 	bl	8000298 <__aeabi_dsub>
 800a13a:	a389      	add	r3, pc, #548	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 f8ac 	bl	800029c <__adddf3>
 800a144:	f04f 3bff 	mov.w	fp, #4294967295
 800a148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a14c:	e7c4      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a14e:	a386      	add	r3, pc, #536	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f8a2 	bl	800029c <__adddf3>
 800a158:	a385      	add	r3, pc, #532	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	f7f6 f89b 	bl	800029c <__adddf3>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	e9ca 2300 	strd	r2, r3, [sl]
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 f891 	bl	8000298 <__aeabi_dsub>
 800a176:	a37e      	add	r3, pc, #504	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e7e0      	b.n	800a140 <__ieee754_rem_pio2+0xe8>
 800a17e:	4b87      	ldr	r3, [pc, #540]	; (800a39c <__ieee754_rem_pio2+0x344>)
 800a180:	4598      	cmp	r8, r3
 800a182:	f300 80d9 	bgt.w	800a338 <__ieee754_rem_pio2+0x2e0>
 800a186:	f000 fe39 	bl	800adfc <fabs>
 800a18a:	ec55 4b10 	vmov	r4, r5, d0
 800a18e:	ee10 0a10 	vmov	r0, s0
 800a192:	a379      	add	r3, pc, #484	; (adr r3, 800a378 <__ieee754_rem_pio2+0x320>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 fa35 	bl	8000608 <__aeabi_dmul>
 800a19e:	4b80      	ldr	r3, [pc, #512]	; (800a3a0 <__ieee754_rem_pio2+0x348>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 f87b 	bl	800029c <__adddf3>
 800a1a6:	f7f6 fcdf 	bl	8000b68 <__aeabi_d2iz>
 800a1aa:	4683      	mov	fp, r0
 800a1ac:	f7f6 f9c2 	bl	8000534 <__aeabi_i2d>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	ec43 2b18 	vmov	d8, r2, r3
 800a1b8:	a367      	add	r3, pc, #412	; (adr r3, 800a358 <__ieee754_rem_pio2+0x300>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 fa23 	bl	8000608 <__aeabi_dmul>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 f865 	bl	8000298 <__aeabi_dsub>
 800a1ce:	a364      	add	r3, pc, #400	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	ec51 0b18 	vmov	r0, r1, d8
 800a1dc:	f7f6 fa14 	bl	8000608 <__aeabi_dmul>
 800a1e0:	f1bb 0f1f 	cmp.w	fp, #31
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	dc0d      	bgt.n	800a206 <__ieee754_rem_pio2+0x1ae>
 800a1ea:	4b6e      	ldr	r3, [pc, #440]	; (800a3a4 <__ieee754_rem_pio2+0x34c>)
 800a1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	d006      	beq.n	800a206 <__ieee754_rem_pio2+0x1ae>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 f84a 	bl	8000298 <__aeabi_dsub>
 800a204:	e00f      	b.n	800a226 <__ieee754_rem_pio2+0x1ce>
 800a206:	462b      	mov	r3, r5
 800a208:	4622      	mov	r2, r4
 800a20a:	4630      	mov	r0, r6
 800a20c:	4639      	mov	r1, r7
 800a20e:	f7f6 f843 	bl	8000298 <__aeabi_dsub>
 800a212:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a21c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a220:	f1b8 0f10 	cmp.w	r8, #16
 800a224:	dc02      	bgt.n	800a22c <__ieee754_rem_pio2+0x1d4>
 800a226:	e9ca 0100 	strd	r0, r1, [sl]
 800a22a:	e039      	b.n	800a2a0 <__ieee754_rem_pio2+0x248>
 800a22c:	a34e      	add	r3, pc, #312	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	ec51 0b18 	vmov	r0, r1, d8
 800a236:	f7f6 f9e7 	bl	8000608 <__aeabi_dmul>
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f827 	bl	8000298 <__aeabi_dsub>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	f7f6 f81f 	bl	8000298 <__aeabi_dsub>
 800a25a:	4622      	mov	r2, r4
 800a25c:	462b      	mov	r3, r5
 800a25e:	f7f6 f81b 	bl	8000298 <__aeabi_dsub>
 800a262:	a343      	add	r3, pc, #268	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	4604      	mov	r4, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	ec51 0b18 	vmov	r0, r1, d8
 800a270:	f7f6 f9ca 	bl	8000608 <__aeabi_dmul>
 800a274:	4622      	mov	r2, r4
 800a276:	462b      	mov	r3, r5
 800a278:	f7f6 f80e 	bl	8000298 <__aeabi_dsub>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4604      	mov	r4, r0
 800a282:	460d      	mov	r5, r1
 800a284:	4640      	mov	r0, r8
 800a286:	4649      	mov	r1, r9
 800a288:	f7f6 f806 	bl	8000298 <__aeabi_dsub>
 800a28c:	9a03      	ldr	r2, [sp, #12]
 800a28e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b31      	cmp	r3, #49	; 0x31
 800a296:	dc24      	bgt.n	800a2e2 <__ieee754_rem_pio2+0x28a>
 800a298:	e9ca 0100 	strd	r0, r1, [sl]
 800a29c:	4646      	mov	r6, r8
 800a29e:	464f      	mov	r7, r9
 800a2a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f5 fff4 	bl	8000298 <__aeabi_dsub>
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	f7f5 fff0 	bl	8000298 <__aeabi_dsub>
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2c0:	f6bf af0a 	bge.w	800a0d8 <__ieee754_rem_pio2+0x80>
 800a2c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2cc:	f8ca 8000 	str.w	r8, [sl]
 800a2d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a2d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a2dc:	f1cb 0b00 	rsb	fp, fp, #0
 800a2e0:	e6fa      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a2e2:	a327      	add	r3, pc, #156	; (adr r3, 800a380 <__ieee754_rem_pio2+0x328>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	ec51 0b18 	vmov	r0, r1, d8
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f5 ffcc 	bl	8000298 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f5 ffc4 	bl	8000298 <__aeabi_dsub>
 800a310:	4622      	mov	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	f7f5 ffc0 	bl	8000298 <__aeabi_dsub>
 800a318:	a31b      	add	r3, pc, #108	; (adr r3, 800a388 <__ieee754_rem_pio2+0x330>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	ec51 0b18 	vmov	r0, r1, d8
 800a326:	f7f6 f96f 	bl	8000608 <__aeabi_dmul>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f5 ffb3 	bl	8000298 <__aeabi_dsub>
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	e75f      	b.n	800a1f8 <__ieee754_rem_pio2+0x1a0>
 800a338:	4b1b      	ldr	r3, [pc, #108]	; (800a3a8 <__ieee754_rem_pio2+0x350>)
 800a33a:	4598      	cmp	r8, r3
 800a33c:	dd36      	ble.n	800a3ac <__ieee754_rem_pio2+0x354>
 800a33e:	ee10 2a10 	vmov	r2, s0
 800a342:	462b      	mov	r3, r5
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ffa6 	bl	8000298 <__aeabi_dsub>
 800a34c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a350:	e9ca 0100 	strd	r0, r1, [sl]
 800a354:	e694      	b.n	800a080 <__ieee754_rem_pio2+0x28>
 800a356:	bf00      	nop
 800a358:	54400000 	.word	0x54400000
 800a35c:	3ff921fb 	.word	0x3ff921fb
 800a360:	1a626331 	.word	0x1a626331
 800a364:	3dd0b461 	.word	0x3dd0b461
 800a368:	1a600000 	.word	0x1a600000
 800a36c:	3dd0b461 	.word	0x3dd0b461
 800a370:	2e037073 	.word	0x2e037073
 800a374:	3ba3198a 	.word	0x3ba3198a
 800a378:	6dc9c883 	.word	0x6dc9c883
 800a37c:	3fe45f30 	.word	0x3fe45f30
 800a380:	2e000000 	.word	0x2e000000
 800a384:	3ba3198a 	.word	0x3ba3198a
 800a388:	252049c1 	.word	0x252049c1
 800a38c:	397b839a 	.word	0x397b839a
 800a390:	3fe921fb 	.word	0x3fe921fb
 800a394:	4002d97b 	.word	0x4002d97b
 800a398:	3ff921fb 	.word	0x3ff921fb
 800a39c:	413921fb 	.word	0x413921fb
 800a3a0:	3fe00000 	.word	0x3fe00000
 800a3a4:	0800b48c 	.word	0x0800b48c
 800a3a8:	7fefffff 	.word	0x7fefffff
 800a3ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a3b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a3b4:	ee10 0a10 	vmov	r0, s0
 800a3b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a3bc:	ee10 6a10 	vmov	r6, s0
 800a3c0:	460f      	mov	r7, r1
 800a3c2:	f7f6 fbd1 	bl	8000b68 <__aeabi_d2iz>
 800a3c6:	f7f6 f8b5 	bl	8000534 <__aeabi_i2d>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3d6:	f7f5 ff5f 	bl	8000298 <__aeabi_dsub>
 800a3da:	4b22      	ldr	r3, [pc, #136]	; (800a464 <__ieee754_rem_pio2+0x40c>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f7f6 f913 	bl	8000608 <__aeabi_dmul>
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	f7f6 fbbf 	bl	8000b68 <__aeabi_d2iz>
 800a3ea:	f7f6 f8a3 	bl	8000534 <__aeabi_i2d>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3fa:	f7f5 ff4d 	bl	8000298 <__aeabi_dsub>
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <__ieee754_rem_pio2+0x40c>)
 800a400:	2200      	movs	r2, #0
 800a402:	f7f6 f901 	bl	8000608 <__aeabi_dmul>
 800a406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a40a:	ad04      	add	r5, sp, #16
 800a40c:	f04f 0803 	mov.w	r8, #3
 800a410:	46a9      	mov	r9, r5
 800a412:	2600      	movs	r6, #0
 800a414:	2700      	movs	r7, #0
 800a416:	4632      	mov	r2, r6
 800a418:	463b      	mov	r3, r7
 800a41a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a41e:	46c3      	mov	fp, r8
 800a420:	3d08      	subs	r5, #8
 800a422:	f108 38ff 	add.w	r8, r8, #4294967295
 800a426:	f7f6 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d1f3      	bne.n	800a416 <__ieee754_rem_pio2+0x3be>
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <__ieee754_rem_pio2+0x410>)
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	2302      	movs	r3, #2
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4622      	mov	r2, r4
 800a438:	465b      	mov	r3, fp
 800a43a:	4651      	mov	r1, sl
 800a43c:	4648      	mov	r0, r9
 800a43e:	f000 f8df 	bl	800a600 <__kernel_rem_pio2>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	4683      	mov	fp, r0
 800a448:	f6bf ae46 	bge.w	800a0d8 <__ieee754_rem_pio2+0x80>
 800a44c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a450:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a454:	f8ca 3004 	str.w	r3, [sl, #4]
 800a458:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a45c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a460:	e73a      	b.n	800a2d8 <__ieee754_rem_pio2+0x280>
 800a462:	bf00      	nop
 800a464:	41700000 	.word	0x41700000
 800a468:	0800b50c 	.word	0x0800b50c
 800a46c:	00000000 	.word	0x00000000

0800a470 <__kernel_cos>:
 800a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	ec57 6b10 	vmov	r6, r7, d0
 800a478:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a47c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a480:	ed8d 1b00 	vstr	d1, [sp]
 800a484:	da07      	bge.n	800a496 <__kernel_cos+0x26>
 800a486:	ee10 0a10 	vmov	r0, s0
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 fb6c 	bl	8000b68 <__aeabi_d2iz>
 800a490:	2800      	cmp	r0, #0
 800a492:	f000 8088 	beq.w	800a5a6 <__kernel_cos+0x136>
 800a496:	4632      	mov	r2, r6
 800a498:	463b      	mov	r3, r7
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 f8b3 	bl	8000608 <__aeabi_dmul>
 800a4a2:	4b51      	ldr	r3, [pc, #324]	; (800a5e8 <__kernel_cos+0x178>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f7f6 f8ad 	bl	8000608 <__aeabi_dmul>
 800a4ae:	a340      	add	r3, pc, #256	; (adr r3, 800a5b0 <__kernel_cos+0x140>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	4682      	mov	sl, r0
 800a4b6:	468b      	mov	fp, r1
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f6 f8a4 	bl	8000608 <__aeabi_dmul>
 800a4c0:	a33d      	add	r3, pc, #244	; (adr r3, 800a5b8 <__kernel_cos+0x148>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 fee9 	bl	800029c <__adddf3>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f6 f89b 	bl	8000608 <__aeabi_dmul>
 800a4d2:	a33b      	add	r3, pc, #236	; (adr r3, 800a5c0 <__kernel_cos+0x150>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 fede 	bl	8000298 <__aeabi_dsub>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f7f6 f892 	bl	8000608 <__aeabi_dmul>
 800a4e4:	a338      	add	r3, pc, #224	; (adr r3, 800a5c8 <__kernel_cos+0x158>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 fed7 	bl	800029c <__adddf3>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f6 f889 	bl	8000608 <__aeabi_dmul>
 800a4f6:	a336      	add	r3, pc, #216	; (adr r3, 800a5d0 <__kernel_cos+0x160>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f5 fecc 	bl	8000298 <__aeabi_dsub>
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	a333      	add	r3, pc, #204	; (adr r3, 800a5d8 <__kernel_cos+0x168>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f5 fec5 	bl	800029c <__adddf3>
 800a512:	4622      	mov	r2, r4
 800a514:	462b      	mov	r3, r5
 800a516:	f7f6 f877 	bl	8000608 <__aeabi_dmul>
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	f7f6 f873 	bl	8000608 <__aeabi_dmul>
 800a522:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 f86b 	bl	8000608 <__aeabi_dmul>
 800a532:	460b      	mov	r3, r1
 800a534:	4602      	mov	r2, r0
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f7f5 fead 	bl	8000298 <__aeabi_dsub>
 800a53e:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <__kernel_cos+0x17c>)
 800a540:	4598      	cmp	r8, r3
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	dc10      	bgt.n	800a56a <__kernel_cos+0xfa>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4650      	mov	r0, sl
 800a54e:	4659      	mov	r1, fp
 800a550:	f7f5 fea2 	bl	8000298 <__aeabi_dsub>
 800a554:	460b      	mov	r3, r1
 800a556:	4926      	ldr	r1, [pc, #152]	; (800a5f0 <__kernel_cos+0x180>)
 800a558:	4602      	mov	r2, r0
 800a55a:	2000      	movs	r0, #0
 800a55c:	f7f5 fe9c 	bl	8000298 <__aeabi_dsub>
 800a560:	ec41 0b10 	vmov	d0, r0, r1
 800a564:	b003      	add	sp, #12
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <__kernel_cos+0x184>)
 800a56c:	4920      	ldr	r1, [pc, #128]	; (800a5f0 <__kernel_cos+0x180>)
 800a56e:	4598      	cmp	r8, r3
 800a570:	bfcc      	ite	gt
 800a572:	4d21      	ldrgt	r5, [pc, #132]	; (800a5f8 <__kernel_cos+0x188>)
 800a574:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a578:	2400      	movs	r4, #0
 800a57a:	4622      	mov	r2, r4
 800a57c:	462b      	mov	r3, r5
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fe8a 	bl	8000298 <__aeabi_dsub>
 800a584:	4622      	mov	r2, r4
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	462b      	mov	r3, r5
 800a58c:	4650      	mov	r0, sl
 800a58e:	4659      	mov	r1, fp
 800a590:	f7f5 fe82 	bl	8000298 <__aeabi_dsub>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	f7f5 fe7e 	bl	8000298 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	e7da      	b.n	800a55c <__kernel_cos+0xec>
 800a5a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a5e0 <__kernel_cos+0x170>
 800a5aa:	e7db      	b.n	800a564 <__kernel_cos+0xf4>
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	be8838d4 	.word	0xbe8838d4
 800a5b4:	bda8fae9 	.word	0xbda8fae9
 800a5b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a5bc:	3e21ee9e 	.word	0x3e21ee9e
 800a5c0:	809c52ad 	.word	0x809c52ad
 800a5c4:	3e927e4f 	.word	0x3e927e4f
 800a5c8:	19cb1590 	.word	0x19cb1590
 800a5cc:	3efa01a0 	.word	0x3efa01a0
 800a5d0:	16c15177 	.word	0x16c15177
 800a5d4:	3f56c16c 	.word	0x3f56c16c
 800a5d8:	5555554c 	.word	0x5555554c
 800a5dc:	3fa55555 	.word	0x3fa55555
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	3fe00000 	.word	0x3fe00000
 800a5ec:	3fd33332 	.word	0x3fd33332
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	3fe90000 	.word	0x3fe90000
 800a5f8:	3fd20000 	.word	0x3fd20000
 800a5fc:	00000000 	.word	0x00000000

0800a600 <__kernel_rem_pio2>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	ed2d 8b02 	vpush	{d8}
 800a608:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a60c:	f112 0f14 	cmn.w	r2, #20
 800a610:	9308      	str	r3, [sp, #32]
 800a612:	9101      	str	r1, [sp, #4]
 800a614:	4bc6      	ldr	r3, [pc, #792]	; (800a930 <__kernel_rem_pio2+0x330>)
 800a616:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a618:	9009      	str	r0, [sp, #36]	; 0x24
 800a61a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	9b08      	ldr	r3, [sp, #32]
 800a622:	f103 33ff 	add.w	r3, r3, #4294967295
 800a626:	bfa8      	it	ge
 800a628:	1ed4      	subge	r4, r2, #3
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	bfb2      	itee	lt
 800a62e:	2400      	movlt	r4, #0
 800a630:	2318      	movge	r3, #24
 800a632:	fb94 f4f3 	sdivge	r4, r4, r3
 800a636:	f06f 0317 	mvn.w	r3, #23
 800a63a:	fb04 3303 	mla	r3, r4, r3, r3
 800a63e:	eb03 0a02 	add.w	sl, r3, r2
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	9a06      	ldr	r2, [sp, #24]
 800a646:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a920 <__kernel_rem_pio2+0x320>
 800a64a:	eb03 0802 	add.w	r8, r3, r2
 800a64e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a650:	1aa7      	subs	r7, r4, r2
 800a652:	ae20      	add	r6, sp, #128	; 0x80
 800a654:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a658:	2500      	movs	r5, #0
 800a65a:	4545      	cmp	r5, r8
 800a65c:	dd18      	ble.n	800a690 <__kernel_rem_pio2+0x90>
 800a65e:	9b08      	ldr	r3, [sp, #32]
 800a660:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a664:	aa20      	add	r2, sp, #128	; 0x80
 800a666:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a920 <__kernel_rem_pio2+0x320>
 800a66a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a66e:	f1c3 0301 	rsb	r3, r3, #1
 800a672:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a676:	9307      	str	r3, [sp, #28]
 800a678:	9b07      	ldr	r3, [sp, #28]
 800a67a:	9a04      	ldr	r2, [sp, #16]
 800a67c:	4443      	add	r3, r8
 800a67e:	429a      	cmp	r2, r3
 800a680:	db2f      	blt.n	800a6e2 <__kernel_rem_pio2+0xe2>
 800a682:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a686:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a68a:	462f      	mov	r7, r5
 800a68c:	2600      	movs	r6, #0
 800a68e:	e01b      	b.n	800a6c8 <__kernel_rem_pio2+0xc8>
 800a690:	42ef      	cmn	r7, r5
 800a692:	d407      	bmi.n	800a6a4 <__kernel_rem_pio2+0xa4>
 800a694:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a698:	f7f5 ff4c 	bl	8000534 <__aeabi_i2d>
 800a69c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	e7da      	b.n	800a65a <__kernel_rem_pio2+0x5a>
 800a6a4:	ec51 0b18 	vmov	r0, r1, d8
 800a6a8:	e7f8      	b.n	800a69c <__kernel_rem_pio2+0x9c>
 800a6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a6b2:	f7f5 ffa9 	bl	8000608 <__aeabi_dmul>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6be:	f7f5 fded 	bl	800029c <__adddf3>
 800a6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	9b06      	ldr	r3, [sp, #24]
 800a6ca:	429e      	cmp	r6, r3
 800a6cc:	f1a7 0708 	sub.w	r7, r7, #8
 800a6d0:	ddeb      	ble.n	800a6aa <__kernel_rem_pio2+0xaa>
 800a6d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6d6:	3508      	adds	r5, #8
 800a6d8:	ecab 7b02 	vstmia	fp!, {d7}
 800a6dc:	f108 0801 	add.w	r8, r8, #1
 800a6e0:	e7ca      	b.n	800a678 <__kernel_rem_pio2+0x78>
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	aa0c      	add	r2, sp, #48	; 0x30
 800a6e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6ec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a6ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a6f2:	9c04      	ldr	r4, [sp, #16]
 800a6f4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f6:	ab98      	add	r3, sp, #608	; 0x260
 800a6f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6fc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a700:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a704:	f8cd b008 	str.w	fp, [sp, #8]
 800a708:	4625      	mov	r5, r4
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	dc78      	bgt.n	800a800 <__kernel_rem_pio2+0x200>
 800a70e:	ec47 6b10 	vmov	d0, r6, r7
 800a712:	4650      	mov	r0, sl
 800a714:	f000 fbfc 	bl	800af10 <scalbn>
 800a718:	ec57 6b10 	vmov	r6, r7, d0
 800a71c:	2200      	movs	r2, #0
 800a71e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a722:	ee10 0a10 	vmov	r0, s0
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 ff6e 	bl	8000608 <__aeabi_dmul>
 800a72c:	ec41 0b10 	vmov	d0, r0, r1
 800a730:	f000 fb6e 	bl	800ae10 <floor>
 800a734:	4b7f      	ldr	r3, [pc, #508]	; (800a934 <__kernel_rem_pio2+0x334>)
 800a736:	ec51 0b10 	vmov	r0, r1, d0
 800a73a:	2200      	movs	r2, #0
 800a73c:	f7f5 ff64 	bl	8000608 <__aeabi_dmul>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4630      	mov	r0, r6
 800a746:	4639      	mov	r1, r7
 800a748:	f7f5 fda6 	bl	8000298 <__aeabi_dsub>
 800a74c:	460f      	mov	r7, r1
 800a74e:	4606      	mov	r6, r0
 800a750:	f7f6 fa0a 	bl	8000b68 <__aeabi_d2iz>
 800a754:	9007      	str	r0, [sp, #28]
 800a756:	f7f5 feed 	bl	8000534 <__aeabi_i2d>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f5 fd99 	bl	8000298 <__aeabi_dsub>
 800a766:	f1ba 0f00 	cmp.w	sl, #0
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	dd70      	ble.n	800a852 <__kernel_rem_pio2+0x252>
 800a770:	1e62      	subs	r2, r4, #1
 800a772:	ab0c      	add	r3, sp, #48	; 0x30
 800a774:	9d07      	ldr	r5, [sp, #28]
 800a776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a77a:	f1ca 0118 	rsb	r1, sl, #24
 800a77e:	fa40 f301 	asr.w	r3, r0, r1
 800a782:	441d      	add	r5, r3
 800a784:	408b      	lsls	r3, r1
 800a786:	1ac0      	subs	r0, r0, r3
 800a788:	ab0c      	add	r3, sp, #48	; 0x30
 800a78a:	9507      	str	r5, [sp, #28]
 800a78c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a790:	f1ca 0317 	rsb	r3, sl, #23
 800a794:	fa40 f303 	asr.w	r3, r0, r3
 800a798:	9302      	str	r3, [sp, #8]
 800a79a:	9b02      	ldr	r3, [sp, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd66      	ble.n	800a86e <__kernel_rem_pio2+0x26e>
 800a7a0:	9b07      	ldr	r3, [sp, #28]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	4615      	mov	r5, r2
 800a7aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a7ae:	4294      	cmp	r4, r2
 800a7b0:	f300 8099 	bgt.w	800a8e6 <__kernel_rem_pio2+0x2e6>
 800a7b4:	f1ba 0f00 	cmp.w	sl, #0
 800a7b8:	dd07      	ble.n	800a7ca <__kernel_rem_pio2+0x1ca>
 800a7ba:	f1ba 0f01 	cmp.w	sl, #1
 800a7be:	f000 80a5 	beq.w	800a90c <__kernel_rem_pio2+0x30c>
 800a7c2:	f1ba 0f02 	cmp.w	sl, #2
 800a7c6:	f000 80c1 	beq.w	800a94c <__kernel_rem_pio2+0x34c>
 800a7ca:	9b02      	ldr	r3, [sp, #8]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d14e      	bne.n	800a86e <__kernel_rem_pio2+0x26e>
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	463b      	mov	r3, r7
 800a7d4:	4958      	ldr	r1, [pc, #352]	; (800a938 <__kernel_rem_pio2+0x338>)
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7f5 fd5e 	bl	8000298 <__aeabi_dsub>
 800a7dc:	4606      	mov	r6, r0
 800a7de:	460f      	mov	r7, r1
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	d044      	beq.n	800a86e <__kernel_rem_pio2+0x26e>
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a928 <__kernel_rem_pio2+0x328>
 800a7ea:	f000 fb91 	bl	800af10 <scalbn>
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	ec53 2b10 	vmov	r2, r3, d0
 800a7f6:	f7f5 fd4f 	bl	8000298 <__aeabi_dsub>
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	e036      	b.n	800a86e <__kernel_rem_pio2+0x26e>
 800a800:	4b4e      	ldr	r3, [pc, #312]	; (800a93c <__kernel_rem_pio2+0x33c>)
 800a802:	2200      	movs	r2, #0
 800a804:	4630      	mov	r0, r6
 800a806:	4639      	mov	r1, r7
 800a808:	f7f5 fefe 	bl	8000608 <__aeabi_dmul>
 800a80c:	f7f6 f9ac 	bl	8000b68 <__aeabi_d2iz>
 800a810:	f7f5 fe90 	bl	8000534 <__aeabi_i2d>
 800a814:	4b4a      	ldr	r3, [pc, #296]	; (800a940 <__kernel_rem_pio2+0x340>)
 800a816:	2200      	movs	r2, #0
 800a818:	4680      	mov	r8, r0
 800a81a:	4689      	mov	r9, r1
 800a81c:	f7f5 fef4 	bl	8000608 <__aeabi_dmul>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4630      	mov	r0, r6
 800a826:	4639      	mov	r1, r7
 800a828:	f7f5 fd36 	bl	8000298 <__aeabi_dsub>
 800a82c:	f7f6 f99c 	bl	8000b68 <__aeabi_d2iz>
 800a830:	9b02      	ldr	r3, [sp, #8]
 800a832:	f843 0b04 	str.w	r0, [r3], #4
 800a836:	3d01      	subs	r5, #1
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	ab70      	add	r3, sp, #448	; 0x1c0
 800a83c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	4640      	mov	r0, r8
 800a846:	4649      	mov	r1, r9
 800a848:	f7f5 fd28 	bl	800029c <__adddf3>
 800a84c:	4606      	mov	r6, r0
 800a84e:	460f      	mov	r7, r1
 800a850:	e75b      	b.n	800a70a <__kernel_rem_pio2+0x10a>
 800a852:	d105      	bne.n	800a860 <__kernel_rem_pio2+0x260>
 800a854:	1e63      	subs	r3, r4, #1
 800a856:	aa0c      	add	r2, sp, #48	; 0x30
 800a858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a85c:	15c3      	asrs	r3, r0, #23
 800a85e:	e79b      	b.n	800a798 <__kernel_rem_pio2+0x198>
 800a860:	4b38      	ldr	r3, [pc, #224]	; (800a944 <__kernel_rem_pio2+0x344>)
 800a862:	2200      	movs	r2, #0
 800a864:	f7f6 f956 	bl	8000b14 <__aeabi_dcmpge>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d139      	bne.n	800a8e0 <__kernel_rem_pio2+0x2e0>
 800a86c:	9002      	str	r0, [sp, #8]
 800a86e:	2200      	movs	r2, #0
 800a870:	2300      	movs	r3, #0
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f6 f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f000 80b4 	beq.w	800a9e8 <__kernel_rem_pio2+0x3e8>
 800a880:	f104 3bff 	add.w	fp, r4, #4294967295
 800a884:	465b      	mov	r3, fp
 800a886:	2200      	movs	r2, #0
 800a888:	9904      	ldr	r1, [sp, #16]
 800a88a:	428b      	cmp	r3, r1
 800a88c:	da65      	bge.n	800a95a <__kernel_rem_pio2+0x35a>
 800a88e:	2a00      	cmp	r2, #0
 800a890:	d07b      	beq.n	800a98a <__kernel_rem_pio2+0x38a>
 800a892:	ab0c      	add	r3, sp, #48	; 0x30
 800a894:	f1aa 0a18 	sub.w	sl, sl, #24
 800a898:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80a0 	beq.w	800a9e2 <__kernel_rem_pio2+0x3e2>
 800a8a2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a928 <__kernel_rem_pio2+0x328>
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	f000 fb32 	bl	800af10 <scalbn>
 800a8ac:	4f23      	ldr	r7, [pc, #140]	; (800a93c <__kernel_rem_pio2+0x33c>)
 800a8ae:	ec55 4b10 	vmov	r4, r5, d0
 800a8b2:	46d8      	mov	r8, fp
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	f280 80cf 	bge.w	800aa5c <__kernel_rem_pio2+0x45c>
 800a8be:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a920 <__kernel_rem_pio2+0x320>
 800a8c2:	465f      	mov	r7, fp
 800a8c4:	f04f 0800 	mov.w	r8, #0
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	f2c0 80fd 	blt.w	800aac8 <__kernel_rem_pio2+0x4c8>
 800a8ce:	ab70      	add	r3, sp, #448	; 0x1c0
 800a8d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a948 <__kernel_rem_pio2+0x348>
 800a8d4:	ec55 4b18 	vmov	r4, r5, d8
 800a8d8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a8dc:	2600      	movs	r6, #0
 800a8de:	e0e5      	b.n	800aaac <__kernel_rem_pio2+0x4ac>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	e75c      	b.n	800a7a0 <__kernel_rem_pio2+0x1a0>
 800a8e6:	f8db 3000 	ldr.w	r3, [fp]
 800a8ea:	b955      	cbnz	r5, 800a902 <__kernel_rem_pio2+0x302>
 800a8ec:	b123      	cbz	r3, 800a8f8 <__kernel_rem_pio2+0x2f8>
 800a8ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a8f2:	f8cb 3000 	str.w	r3, [fp]
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	f10b 0b04 	add.w	fp, fp, #4
 800a8fe:	461d      	mov	r5, r3
 800a900:	e755      	b.n	800a7ae <__kernel_rem_pio2+0x1ae>
 800a902:	1acb      	subs	r3, r1, r3
 800a904:	f8cb 3000 	str.w	r3, [fp]
 800a908:	462b      	mov	r3, r5
 800a90a:	e7f5      	b.n	800a8f8 <__kernel_rem_pio2+0x2f8>
 800a90c:	1e62      	subs	r2, r4, #1
 800a90e:	ab0c      	add	r3, sp, #48	; 0x30
 800a910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a914:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a918:	a90c      	add	r1, sp, #48	; 0x30
 800a91a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a91e:	e754      	b.n	800a7ca <__kernel_rem_pio2+0x1ca>
	...
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	0800b658 	.word	0x0800b658
 800a934:	40200000 	.word	0x40200000
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	3e700000 	.word	0x3e700000
 800a940:	41700000 	.word	0x41700000
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	0800b618 	.word	0x0800b618
 800a94c:	1e62      	subs	r2, r4, #1
 800a94e:	ab0c      	add	r3, sp, #48	; 0x30
 800a950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a954:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a958:	e7de      	b.n	800a918 <__kernel_rem_pio2+0x318>
 800a95a:	a90c      	add	r1, sp, #48	; 0x30
 800a95c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a960:	3b01      	subs	r3, #1
 800a962:	430a      	orrs	r2, r1
 800a964:	e790      	b.n	800a888 <__kernel_rem_pio2+0x288>
 800a966:	3301      	adds	r3, #1
 800a968:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d0fa      	beq.n	800a966 <__kernel_rem_pio2+0x366>
 800a970:	9a08      	ldr	r2, [sp, #32]
 800a972:	18e3      	adds	r3, r4, r3
 800a974:	18a6      	adds	r6, r4, r2
 800a976:	aa20      	add	r2, sp, #128	; 0x80
 800a978:	1c65      	adds	r5, r4, #1
 800a97a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a97e:	9302      	str	r3, [sp, #8]
 800a980:	9b02      	ldr	r3, [sp, #8]
 800a982:	42ab      	cmp	r3, r5
 800a984:	da04      	bge.n	800a990 <__kernel_rem_pio2+0x390>
 800a986:	461c      	mov	r4, r3
 800a988:	e6b5      	b.n	800a6f6 <__kernel_rem_pio2+0xf6>
 800a98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a98c:	2301      	movs	r3, #1
 800a98e:	e7eb      	b.n	800a968 <__kernel_rem_pio2+0x368>
 800a990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a996:	f7f5 fdcd 	bl	8000534 <__aeabi_i2d>
 800a99a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a0:	46b3      	mov	fp, r6
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	2700      	movs	r7, #0
 800a9a6:	f04f 0800 	mov.w	r8, #0
 800a9aa:	f04f 0900 	mov.w	r9, #0
 800a9ae:	9b06      	ldr	r3, [sp, #24]
 800a9b0:	429f      	cmp	r7, r3
 800a9b2:	dd06      	ble.n	800a9c2 <__kernel_rem_pio2+0x3c2>
 800a9b4:	ab70      	add	r3, sp, #448	; 0x1c0
 800a9b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9ba:	e9c3 8900 	strd	r8, r9, [r3]
 800a9be:	3501      	adds	r5, #1
 800a9c0:	e7de      	b.n	800a980 <__kernel_rem_pio2+0x380>
 800a9c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a9c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a9ca:	f7f5 fe1d 	bl	8000608 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f5 fc61 	bl	800029c <__adddf3>
 800a9da:	3701      	adds	r7, #1
 800a9dc:	4680      	mov	r8, r0
 800a9de:	4689      	mov	r9, r1
 800a9e0:	e7e5      	b.n	800a9ae <__kernel_rem_pio2+0x3ae>
 800a9e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9e6:	e754      	b.n	800a892 <__kernel_rem_pio2+0x292>
 800a9e8:	ec47 6b10 	vmov	d0, r6, r7
 800a9ec:	f1ca 0000 	rsb	r0, sl, #0
 800a9f0:	f000 fa8e 	bl	800af10 <scalbn>
 800a9f4:	ec57 6b10 	vmov	r6, r7, d0
 800a9f8:	4b9f      	ldr	r3, [pc, #636]	; (800ac78 <__kernel_rem_pio2+0x678>)
 800a9fa:	ee10 0a10 	vmov	r0, s0
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f6 f887 	bl	8000b14 <__aeabi_dcmpge>
 800aa06:	b300      	cbz	r0, 800aa4a <__kernel_rem_pio2+0x44a>
 800aa08:	4b9c      	ldr	r3, [pc, #624]	; (800ac7c <__kernel_rem_pio2+0x67c>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fdfa 	bl	8000608 <__aeabi_dmul>
 800aa14:	f7f6 f8a8 	bl	8000b68 <__aeabi_d2iz>
 800aa18:	4605      	mov	r5, r0
 800aa1a:	f7f5 fd8b 	bl	8000534 <__aeabi_i2d>
 800aa1e:	4b96      	ldr	r3, [pc, #600]	; (800ac78 <__kernel_rem_pio2+0x678>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	f7f5 fdf1 	bl	8000608 <__aeabi_dmul>
 800aa26:	460b      	mov	r3, r1
 800aa28:	4602      	mov	r2, r0
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7f5 fc33 	bl	8000298 <__aeabi_dsub>
 800aa32:	f7f6 f899 	bl	8000b68 <__aeabi_d2iz>
 800aa36:	f104 0b01 	add.w	fp, r4, #1
 800aa3a:	ab0c      	add	r3, sp, #48	; 0x30
 800aa3c:	f10a 0a18 	add.w	sl, sl, #24
 800aa40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa44:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800aa48:	e72b      	b.n	800a8a2 <__kernel_rem_pio2+0x2a2>
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	f7f6 f88b 	bl	8000b68 <__aeabi_d2iz>
 800aa52:	ab0c      	add	r3, sp, #48	; 0x30
 800aa54:	46a3      	mov	fp, r4
 800aa56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa5a:	e722      	b.n	800a8a2 <__kernel_rem_pio2+0x2a2>
 800aa5c:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa5e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800aa62:	ab0c      	add	r3, sp, #48	; 0x30
 800aa64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aa68:	f7f5 fd64 	bl	8000534 <__aeabi_i2d>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	462b      	mov	r3, r5
 800aa70:	f7f5 fdca 	bl	8000608 <__aeabi_dmul>
 800aa74:	4632      	mov	r2, r6
 800aa76:	e9c9 0100 	strd	r0, r1, [r9]
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fdc2 	bl	8000608 <__aeabi_dmul>
 800aa84:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	e713      	b.n	800a8b6 <__kernel_rem_pio2+0x2b6>
 800aa8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aa92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aa96:	f7f5 fdb7 	bl	8000608 <__aeabi_dmul>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f7f5 fbfb 	bl	800029c <__adddf3>
 800aaa6:	3601      	adds	r6, #1
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	429e      	cmp	r6, r3
 800aab0:	dc01      	bgt.n	800aab6 <__kernel_rem_pio2+0x4b6>
 800aab2:	45b0      	cmp	r8, r6
 800aab4:	daeb      	bge.n	800aa8e <__kernel_rem_pio2+0x48e>
 800aab6:	ab48      	add	r3, sp, #288	; 0x120
 800aab8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aabc:	e9c3 4500 	strd	r4, r5, [r3]
 800aac0:	3f01      	subs	r7, #1
 800aac2:	f108 0801 	add.w	r8, r8, #1
 800aac6:	e6ff      	b.n	800a8c8 <__kernel_rem_pio2+0x2c8>
 800aac8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	dc0b      	bgt.n	800aae6 <__kernel_rem_pio2+0x4e6>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dc6e      	bgt.n	800abb0 <__kernel_rem_pio2+0x5b0>
 800aad2:	d045      	beq.n	800ab60 <__kernel_rem_pio2+0x560>
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	f003 0007 	and.w	r0, r3, #7
 800aada:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aade:	ecbd 8b02 	vpop	{d8}
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d1f3      	bne.n	800aad4 <__kernel_rem_pio2+0x4d4>
 800aaec:	ab48      	add	r3, sp, #288	; 0x120
 800aaee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800aaf2:	46d0      	mov	r8, sl
 800aaf4:	46d9      	mov	r9, fp
 800aaf6:	f1b9 0f00 	cmp.w	r9, #0
 800aafa:	f1a8 0808 	sub.w	r8, r8, #8
 800aafe:	dc64      	bgt.n	800abca <__kernel_rem_pio2+0x5ca>
 800ab00:	465c      	mov	r4, fp
 800ab02:	2c01      	cmp	r4, #1
 800ab04:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab08:	dc7e      	bgt.n	800ac08 <__kernel_rem_pio2+0x608>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f1bb 0f01 	cmp.w	fp, #1
 800ab12:	f300 8097 	bgt.w	800ac44 <__kernel_rem_pio2+0x644>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ab1c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f040 8099 	bne.w	800ac58 <__kernel_rem_pio2+0x658>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	e9c3 5600 	strd	r5, r6, [r3]
 800ab2c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ab30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab34:	e7ce      	b.n	800aad4 <__kernel_rem_pio2+0x4d4>
 800ab36:	ab48      	add	r3, sp, #288	; 0x120
 800ab38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fbac 	bl	800029c <__adddf3>
 800ab44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab48:	f1bb 0f00 	cmp.w	fp, #0
 800ab4c:	daf3      	bge.n	800ab36 <__kernel_rem_pio2+0x536>
 800ab4e:	9b02      	ldr	r3, [sp, #8]
 800ab50:	b113      	cbz	r3, 800ab58 <__kernel_rem_pio2+0x558>
 800ab52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab56:	4619      	mov	r1, r3
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	e9c3 0100 	strd	r0, r1, [r3]
 800ab5e:	e7b9      	b.n	800aad4 <__kernel_rem_pio2+0x4d4>
 800ab60:	2000      	movs	r0, #0
 800ab62:	2100      	movs	r1, #0
 800ab64:	e7f0      	b.n	800ab48 <__kernel_rem_pio2+0x548>
 800ab66:	ab48      	add	r3, sp, #288	; 0x120
 800ab68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fb94 	bl	800029c <__adddf3>
 800ab74:	3c01      	subs	r4, #1
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	daf5      	bge.n	800ab66 <__kernel_rem_pio2+0x566>
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	b1e3      	cbz	r3, 800abb8 <__kernel_rem_pio2+0x5b8>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab84:	9c01      	ldr	r4, [sp, #4]
 800ab86:	e9c4 2300 	strd	r2, r3, [r4]
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ab92:	f7f5 fb81 	bl	8000298 <__aeabi_dsub>
 800ab96:	ad4a      	add	r5, sp, #296	; 0x128
 800ab98:	2401      	movs	r4, #1
 800ab9a:	45a3      	cmp	fp, r4
 800ab9c:	da0f      	bge.n	800abbe <__kernel_rem_pio2+0x5be>
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	b113      	cbz	r3, 800aba8 <__kernel_rem_pio2+0x5a8>
 800aba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aba6:	4619      	mov	r1, r3
 800aba8:	9b01      	ldr	r3, [sp, #4]
 800abaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800abae:	e791      	b.n	800aad4 <__kernel_rem_pio2+0x4d4>
 800abb0:	465c      	mov	r4, fp
 800abb2:	2000      	movs	r0, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	e7de      	b.n	800ab76 <__kernel_rem_pio2+0x576>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	e7e2      	b.n	800ab84 <__kernel_rem_pio2+0x584>
 800abbe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800abc2:	f7f5 fb6b 	bl	800029c <__adddf3>
 800abc6:	3401      	adds	r4, #1
 800abc8:	e7e7      	b.n	800ab9a <__kernel_rem_pio2+0x59a>
 800abca:	e9d8 4500 	ldrd	r4, r5, [r8]
 800abce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800abd2:	4620      	mov	r0, r4
 800abd4:	4632      	mov	r2, r6
 800abd6:	463b      	mov	r3, r7
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 fb5f 	bl	800029c <__adddf3>
 800abde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4620      	mov	r0, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f5 fb55 	bl	8000298 <__aeabi_dsub>
 800abee:	4632      	mov	r2, r6
 800abf0:	463b      	mov	r3, r7
 800abf2:	f7f5 fb53 	bl	800029c <__adddf3>
 800abf6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800abfa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800abfe:	ed88 7b00 	vstr	d7, [r8]
 800ac02:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac06:	e776      	b.n	800aaf6 <__kernel_rem_pio2+0x4f6>
 800ac08:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac0c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac10:	4640      	mov	r0, r8
 800ac12:	4632      	mov	r2, r6
 800ac14:	463b      	mov	r3, r7
 800ac16:	4649      	mov	r1, r9
 800ac18:	f7f5 fb40 	bl	800029c <__adddf3>
 800ac1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4640      	mov	r0, r8
 800ac26:	4649      	mov	r1, r9
 800ac28:	f7f5 fb36 	bl	8000298 <__aeabi_dsub>
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	463b      	mov	r3, r7
 800ac30:	f7f5 fb34 	bl	800029c <__adddf3>
 800ac34:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac3c:	ed8a 7b00 	vstr	d7, [sl]
 800ac40:	3c01      	subs	r4, #1
 800ac42:	e75e      	b.n	800ab02 <__kernel_rem_pio2+0x502>
 800ac44:	ab48      	add	r3, sp, #288	; 0x120
 800ac46:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fb25 	bl	800029c <__adddf3>
 800ac52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac56:	e75a      	b.n	800ab0e <__kernel_rem_pio2+0x50e>
 800ac58:	9b01      	ldr	r3, [sp, #4]
 800ac5a:	9a01      	ldr	r2, [sp, #4]
 800ac5c:	601d      	str	r5, [r3, #0]
 800ac5e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ac62:	605c      	str	r4, [r3, #4]
 800ac64:	609f      	str	r7, [r3, #8]
 800ac66:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ac6a:	60d3      	str	r3, [r2, #12]
 800ac6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac70:	6110      	str	r0, [r2, #16]
 800ac72:	6153      	str	r3, [r2, #20]
 800ac74:	e72e      	b.n	800aad4 <__kernel_rem_pio2+0x4d4>
 800ac76:	bf00      	nop
 800ac78:	41700000 	.word	0x41700000
 800ac7c:	3e700000 	.word	0x3e700000

0800ac80 <__kernel_sin>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	ed2d 8b04 	vpush	{d8-d9}
 800ac88:	eeb0 8a41 	vmov.f32	s16, s2
 800ac8c:	eef0 8a61 	vmov.f32	s17, s3
 800ac90:	ec55 4b10 	vmov	r4, r5, d0
 800ac94:	b083      	sub	sp, #12
 800ac96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ac9e:	9001      	str	r0, [sp, #4]
 800aca0:	da06      	bge.n	800acb0 <__kernel_sin+0x30>
 800aca2:	ee10 0a10 	vmov	r0, s0
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 ff5e 	bl	8000b68 <__aeabi_d2iz>
 800acac:	2800      	cmp	r0, #0
 800acae:	d051      	beq.n	800ad54 <__kernel_sin+0xd4>
 800acb0:	4622      	mov	r2, r4
 800acb2:	462b      	mov	r3, r5
 800acb4:	4620      	mov	r0, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	f7f5 fca6 	bl	8000608 <__aeabi_dmul>
 800acbc:	4682      	mov	sl, r0
 800acbe:	468b      	mov	fp, r1
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4620      	mov	r0, r4
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 fc9e 	bl	8000608 <__aeabi_dmul>
 800accc:	a341      	add	r3, pc, #260	; (adr r3, 800add4 <__kernel_sin+0x154>)
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	4680      	mov	r8, r0
 800acd4:	4689      	mov	r9, r1
 800acd6:	4650      	mov	r0, sl
 800acd8:	4659      	mov	r1, fp
 800acda:	f7f5 fc95 	bl	8000608 <__aeabi_dmul>
 800acde:	a33f      	add	r3, pc, #252	; (adr r3, 800addc <__kernel_sin+0x15c>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f7f5 fad8 	bl	8000298 <__aeabi_dsub>
 800ace8:	4652      	mov	r2, sl
 800acea:	465b      	mov	r3, fp
 800acec:	f7f5 fc8c 	bl	8000608 <__aeabi_dmul>
 800acf0:	a33c      	add	r3, pc, #240	; (adr r3, 800ade4 <__kernel_sin+0x164>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f7f5 fad1 	bl	800029c <__adddf3>
 800acfa:	4652      	mov	r2, sl
 800acfc:	465b      	mov	r3, fp
 800acfe:	f7f5 fc83 	bl	8000608 <__aeabi_dmul>
 800ad02:	a33a      	add	r3, pc, #232	; (adr r3, 800adec <__kernel_sin+0x16c>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f7f5 fac6 	bl	8000298 <__aeabi_dsub>
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	465b      	mov	r3, fp
 800ad10:	f7f5 fc7a 	bl	8000608 <__aeabi_dmul>
 800ad14:	a337      	add	r3, pc, #220	; (adr r3, 800adf4 <__kernel_sin+0x174>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fabf 	bl	800029c <__adddf3>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	4606      	mov	r6, r0
 800ad22:	460f      	mov	r7, r1
 800ad24:	b9eb      	cbnz	r3, 800ad62 <__kernel_sin+0xe2>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	4659      	mov	r1, fp
 800ad2e:	f7f5 fc6b 	bl	8000608 <__aeabi_dmul>
 800ad32:	a325      	add	r3, pc, #148	; (adr r3, 800adc8 <__kernel_sin+0x148>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 faae 	bl	8000298 <__aeabi_dsub>
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	464b      	mov	r3, r9
 800ad40:	f7f5 fc62 	bl	8000608 <__aeabi_dmul>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4620      	mov	r0, r4
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	f7f5 faa6 	bl	800029c <__adddf3>
 800ad50:	4604      	mov	r4, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	ec45 4b10 	vmov	d0, r4, r5
 800ad58:	b003      	add	sp, #12
 800ad5a:	ecbd 8b04 	vpop	{d8-d9}
 800ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad62:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <__kernel_sin+0x150>)
 800ad64:	ec51 0b18 	vmov	r0, r1, d8
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f7f5 fc4d 	bl	8000608 <__aeabi_dmul>
 800ad6e:	4632      	mov	r2, r6
 800ad70:	ec41 0b19 	vmov	d9, r0, r1
 800ad74:	463b      	mov	r3, r7
 800ad76:	4640      	mov	r0, r8
 800ad78:	4649      	mov	r1, r9
 800ad7a:	f7f5 fc45 	bl	8000608 <__aeabi_dmul>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	ec51 0b19 	vmov	r0, r1, d9
 800ad86:	f7f5 fa87 	bl	8000298 <__aeabi_dsub>
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	f7f5 fc3b 	bl	8000608 <__aeabi_dmul>
 800ad92:	ec53 2b18 	vmov	r2, r3, d8
 800ad96:	f7f5 fa7f 	bl	8000298 <__aeabi_dsub>
 800ad9a:	a30b      	add	r3, pc, #44	; (adr r3, 800adc8 <__kernel_sin+0x148>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	4606      	mov	r6, r0
 800ada2:	460f      	mov	r7, r1
 800ada4:	4640      	mov	r0, r8
 800ada6:	4649      	mov	r1, r9
 800ada8:	f7f5 fc2e 	bl	8000608 <__aeabi_dmul>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 fa72 	bl	800029c <__adddf3>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fa6a 	bl	8000298 <__aeabi_dsub>
 800adc4:	e7c4      	b.n	800ad50 <__kernel_sin+0xd0>
 800adc6:	bf00      	nop
 800adc8:	55555549 	.word	0x55555549
 800adcc:	3fc55555 	.word	0x3fc55555
 800add0:	3fe00000 	.word	0x3fe00000
 800add4:	5acfd57c 	.word	0x5acfd57c
 800add8:	3de5d93a 	.word	0x3de5d93a
 800addc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ade0:	3e5ae5e6 	.word	0x3e5ae5e6
 800ade4:	57b1fe7d 	.word	0x57b1fe7d
 800ade8:	3ec71de3 	.word	0x3ec71de3
 800adec:	19c161d5 	.word	0x19c161d5
 800adf0:	3f2a01a0 	.word	0x3f2a01a0
 800adf4:	1110f8a6 	.word	0x1110f8a6
 800adf8:	3f811111 	.word	0x3f811111

0800adfc <fabs>:
 800adfc:	ec51 0b10 	vmov	r0, r1, d0
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae08:	ec43 2b10 	vmov	d0, r2, r3
 800ae0c:	4770      	bx	lr
	...

0800ae10 <floor>:
 800ae10:	ec51 0b10 	vmov	r0, r1, d0
 800ae14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ae20:	2e13      	cmp	r6, #19
 800ae22:	ee10 5a10 	vmov	r5, s0
 800ae26:	ee10 8a10 	vmov	r8, s0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	dc32      	bgt.n	800ae94 <floor+0x84>
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	da14      	bge.n	800ae5c <floor+0x4c>
 800ae32:	a333      	add	r3, pc, #204	; (adr r3, 800af00 <floor+0xf0>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fa30 	bl	800029c <__adddf3>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f7f5 fe72 	bl	8000b28 <__aeabi_dcmpgt>
 800ae44:	b138      	cbz	r0, 800ae56 <floor+0x46>
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	da57      	bge.n	800aefa <floor+0xea>
 800ae4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ae4e:	431d      	orrs	r5, r3
 800ae50:	d001      	beq.n	800ae56 <floor+0x46>
 800ae52:	4c2d      	ldr	r4, [pc, #180]	; (800af08 <floor+0xf8>)
 800ae54:	2500      	movs	r5, #0
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	e025      	b.n	800aea8 <floor+0x98>
 800ae5c:	4f2b      	ldr	r7, [pc, #172]	; (800af0c <floor+0xfc>)
 800ae5e:	4137      	asrs	r7, r6
 800ae60:	ea01 0307 	and.w	r3, r1, r7
 800ae64:	4303      	orrs	r3, r0
 800ae66:	d01f      	beq.n	800aea8 <floor+0x98>
 800ae68:	a325      	add	r3, pc, #148	; (adr r3, 800af00 <floor+0xf0>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fa15 	bl	800029c <__adddf3>
 800ae72:	2200      	movs	r2, #0
 800ae74:	2300      	movs	r3, #0
 800ae76:	f7f5 fe57 	bl	8000b28 <__aeabi_dcmpgt>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0eb      	beq.n	800ae56 <floor+0x46>
 800ae7e:	2c00      	cmp	r4, #0
 800ae80:	bfbe      	ittt	lt
 800ae82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ae86:	fa43 f606 	asrlt.w	r6, r3, r6
 800ae8a:	19a4      	addlt	r4, r4, r6
 800ae8c:	ea24 0407 	bic.w	r4, r4, r7
 800ae90:	2500      	movs	r5, #0
 800ae92:	e7e0      	b.n	800ae56 <floor+0x46>
 800ae94:	2e33      	cmp	r6, #51	; 0x33
 800ae96:	dd0b      	ble.n	800aeb0 <floor+0xa0>
 800ae98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ae9c:	d104      	bne.n	800aea8 <floor+0x98>
 800ae9e:	ee10 2a10 	vmov	r2, s0
 800aea2:	460b      	mov	r3, r1
 800aea4:	f7f5 f9fa 	bl	800029c <__adddf3>
 800aea8:	ec41 0b10 	vmov	d0, r0, r1
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aeb4:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb8:	fa23 f707 	lsr.w	r7, r3, r7
 800aebc:	4207      	tst	r7, r0
 800aebe:	d0f3      	beq.n	800aea8 <floor+0x98>
 800aec0:	a30f      	add	r3, pc, #60	; (adr r3, 800af00 <floor+0xf0>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f7f5 f9e9 	bl	800029c <__adddf3>
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	f7f5 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d0bf      	beq.n	800ae56 <floor+0x46>
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	da02      	bge.n	800aee0 <floor+0xd0>
 800aeda:	2e14      	cmp	r6, #20
 800aedc:	d103      	bne.n	800aee6 <floor+0xd6>
 800aede:	3401      	adds	r4, #1
 800aee0:	ea25 0507 	bic.w	r5, r5, r7
 800aee4:	e7b7      	b.n	800ae56 <floor+0x46>
 800aee6:	2301      	movs	r3, #1
 800aee8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aeec:	fa03 f606 	lsl.w	r6, r3, r6
 800aef0:	4435      	add	r5, r6
 800aef2:	4545      	cmp	r5, r8
 800aef4:	bf38      	it	cc
 800aef6:	18e4      	addcc	r4, r4, r3
 800aef8:	e7f2      	b.n	800aee0 <floor+0xd0>
 800aefa:	2500      	movs	r5, #0
 800aefc:	462c      	mov	r4, r5
 800aefe:	e7aa      	b.n	800ae56 <floor+0x46>
 800af00:	8800759c 	.word	0x8800759c
 800af04:	7e37e43c 	.word	0x7e37e43c
 800af08:	bff00000 	.word	0xbff00000
 800af0c:	000fffff 	.word	0x000fffff

0800af10 <scalbn>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	ec55 4b10 	vmov	r4, r5, d0
 800af16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af1a:	4606      	mov	r6, r0
 800af1c:	462b      	mov	r3, r5
 800af1e:	b99a      	cbnz	r2, 800af48 <scalbn+0x38>
 800af20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af24:	4323      	orrs	r3, r4
 800af26:	d036      	beq.n	800af96 <scalbn+0x86>
 800af28:	4b39      	ldr	r3, [pc, #228]	; (800b010 <scalbn+0x100>)
 800af2a:	4629      	mov	r1, r5
 800af2c:	ee10 0a10 	vmov	r0, s0
 800af30:	2200      	movs	r2, #0
 800af32:	f7f5 fb69 	bl	8000608 <__aeabi_dmul>
 800af36:	4b37      	ldr	r3, [pc, #220]	; (800b014 <scalbn+0x104>)
 800af38:	429e      	cmp	r6, r3
 800af3a:	4604      	mov	r4, r0
 800af3c:	460d      	mov	r5, r1
 800af3e:	da10      	bge.n	800af62 <scalbn+0x52>
 800af40:	a32b      	add	r3, pc, #172	; (adr r3, 800aff0 <scalbn+0xe0>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	e03a      	b.n	800afbe <scalbn+0xae>
 800af48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af4c:	428a      	cmp	r2, r1
 800af4e:	d10c      	bne.n	800af6a <scalbn+0x5a>
 800af50:	ee10 2a10 	vmov	r2, s0
 800af54:	4620      	mov	r0, r4
 800af56:	4629      	mov	r1, r5
 800af58:	f7f5 f9a0 	bl	800029c <__adddf3>
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	e019      	b.n	800af96 <scalbn+0x86>
 800af62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af66:	460b      	mov	r3, r1
 800af68:	3a36      	subs	r2, #54	; 0x36
 800af6a:	4432      	add	r2, r6
 800af6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800af70:	428a      	cmp	r2, r1
 800af72:	dd08      	ble.n	800af86 <scalbn+0x76>
 800af74:	2d00      	cmp	r5, #0
 800af76:	a120      	add	r1, pc, #128	; (adr r1, 800aff8 <scalbn+0xe8>)
 800af78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7c:	da1c      	bge.n	800afb8 <scalbn+0xa8>
 800af7e:	a120      	add	r1, pc, #128	; (adr r1, 800b000 <scalbn+0xf0>)
 800af80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af84:	e018      	b.n	800afb8 <scalbn+0xa8>
 800af86:	2a00      	cmp	r2, #0
 800af88:	dd08      	ble.n	800af9c <scalbn+0x8c>
 800af8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af96:	ec45 4b10 	vmov	d0, r4, r5
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800afa0:	da19      	bge.n	800afd6 <scalbn+0xc6>
 800afa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afa6:	429e      	cmp	r6, r3
 800afa8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800afac:	dd0a      	ble.n	800afc4 <scalbn+0xb4>
 800afae:	a112      	add	r1, pc, #72	; (adr r1, 800aff8 <scalbn+0xe8>)
 800afb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e2      	bne.n	800af7e <scalbn+0x6e>
 800afb8:	a30f      	add	r3, pc, #60	; (adr r3, 800aff8 <scalbn+0xe8>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f7f5 fb23 	bl	8000608 <__aeabi_dmul>
 800afc2:	e7cb      	b.n	800af5c <scalbn+0x4c>
 800afc4:	a10a      	add	r1, pc, #40	; (adr r1, 800aff0 <scalbn+0xe0>)
 800afc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0b8      	beq.n	800af40 <scalbn+0x30>
 800afce:	a10e      	add	r1, pc, #56	; (adr r1, 800b008 <scalbn+0xf8>)
 800afd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afd4:	e7b4      	b.n	800af40 <scalbn+0x30>
 800afd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afda:	3236      	adds	r2, #54	; 0x36
 800afdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800afe4:	4620      	mov	r0, r4
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <scalbn+0x108>)
 800afe8:	2200      	movs	r2, #0
 800afea:	e7e8      	b.n	800afbe <scalbn+0xae>
 800afec:	f3af 8000 	nop.w
 800aff0:	c2f8f359 	.word	0xc2f8f359
 800aff4:	01a56e1f 	.word	0x01a56e1f
 800aff8:	8800759c 	.word	0x8800759c
 800affc:	7e37e43c 	.word	0x7e37e43c
 800b000:	8800759c 	.word	0x8800759c
 800b004:	fe37e43c 	.word	0xfe37e43c
 800b008:	c2f8f359 	.word	0xc2f8f359
 800b00c:	81a56e1f 	.word	0x81a56e1f
 800b010:	43500000 	.word	0x43500000
 800b014:	ffff3cb0 	.word	0xffff3cb0
 800b018:	3c900000 	.word	0x3c900000

0800b01c <_init>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	bf00      	nop
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr

0800b028 <_fini>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	bf00      	nop
 800b02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02e:	bc08      	pop	{r3}
 800b030:	469e      	mov	lr, r3
 800b032:	4770      	bx	lr
