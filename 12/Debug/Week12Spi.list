
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e8  080056e8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080056f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000018  08005704  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005704  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104b9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  000304fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8f  00000000  00000000  000345a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1b  00000000  00000000  0004c52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c046  00000000  00000000  0005d24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b0  00000000  00000000  000f92e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800552c 	.word	0x0800552c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800552c 	.word	0x0800552c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__gedf2>:
 8000560:	f04f 3cff 	mov.w	ip, #4294967295
 8000564:	e006      	b.n	8000574 <__cmpdf2+0x4>
 8000566:	bf00      	nop

08000568 <__ledf2>:
 8000568:	f04f 0c01 	mov.w	ip, #1
 800056c:	e002      	b.n	8000574 <__cmpdf2+0x4>
 800056e:	bf00      	nop

08000570 <__cmpdf2>:
 8000570:	f04f 0c01 	mov.w	ip, #1
 8000574:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000584:	bf18      	it	ne
 8000586:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058a:	d01b      	beq.n	80005c4 <__cmpdf2+0x54>
 800058c:	b001      	add	sp, #4
 800058e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000592:	bf0c      	ite	eq
 8000594:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000598:	ea91 0f03 	teqne	r1, r3
 800059c:	bf02      	ittt	eq
 800059e:	ea90 0f02 	teqeq	r0, r2
 80005a2:	2000      	moveq	r0, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	f110 0f00 	cmn.w	r0, #0
 80005aa:	ea91 0f03 	teq	r1, r3
 80005ae:	bf58      	it	pl
 80005b0:	4299      	cmppl	r1, r3
 80005b2:	bf08      	it	eq
 80005b4:	4290      	cmpeq	r0, r2
 80005b6:	bf2c      	ite	cs
 80005b8:	17d8      	asrcs	r0, r3, #31
 80005ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005be:	f040 0001 	orr.w	r0, r0, #1
 80005c2:	4770      	bx	lr
 80005c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d102      	bne.n	80005d4 <__cmpdf2+0x64>
 80005ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d2:	d107      	bne.n	80005e4 <__cmpdf2+0x74>
 80005d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005dc:	d1d6      	bne.n	800058c <__cmpdf2+0x1c>
 80005de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e2:	d0d3      	beq.n	800058c <__cmpdf2+0x1c>
 80005e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__aeabi_cdrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	4610      	mov	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	468c      	mov	ip, r1
 80005f4:	4619      	mov	r1, r3
 80005f6:	4663      	mov	r3, ip
 80005f8:	e000      	b.n	80005fc <__aeabi_cdcmpeq>
 80005fa:	bf00      	nop

080005fc <__aeabi_cdcmpeq>:
 80005fc:	b501      	push	{r0, lr}
 80005fe:	f7ff ffb7 	bl	8000570 <__cmpdf2>
 8000602:	2800      	cmp	r0, #0
 8000604:	bf48      	it	mi
 8000606:	f110 0f00 	cmnmi.w	r0, #0
 800060a:	bd01      	pop	{r0, pc}

0800060c <__aeabi_dcmpeq>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff fff4 	bl	80005fc <__aeabi_cdcmpeq>
 8000614:	bf0c      	ite	eq
 8000616:	2001      	moveq	r0, #1
 8000618:	2000      	movne	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmplt>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffea 	bl	80005fc <__aeabi_cdcmpeq>
 8000628:	bf34      	ite	cc
 800062a:	2001      	movcc	r0, #1
 800062c:	2000      	movcs	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmple>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffe0 	bl	80005fc <__aeabi_cdcmpeq>
 800063c:	bf94      	ite	ls
 800063e:	2001      	movls	r0, #1
 8000640:	2000      	movhi	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmpge>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffce 	bl	80005ec <__aeabi_cdrcmple>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpgt>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffc4 	bl	80005ec <__aeabi_cdrcmple>
 8000664:	bf34      	ite	cc
 8000666:	2001      	movcc	r0, #1
 8000668:	2000      	movcs	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_d2f>:
 8000670:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000674:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000678:	bf24      	itt	cs
 800067a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800067e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000682:	d90d      	bls.n	80006a0 <__aeabi_d2f+0x30>
 8000684:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000688:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800068c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000690:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000694:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000698:	bf08      	it	eq
 800069a:	f020 0001 	biceq.w	r0, r0, #1
 800069e:	4770      	bx	lr
 80006a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80006a4:	d121      	bne.n	80006ea <__aeabi_d2f+0x7a>
 80006a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80006aa:	bfbc      	itt	lt
 80006ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006b0:	4770      	bxlt	lr
 80006b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006ba:	f1c2 0218 	rsb	r2, r2, #24
 80006be:	f1c2 0c20 	rsb	ip, r2, #32
 80006c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80006c6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ca:	bf18      	it	ne
 80006cc:	f040 0001 	orrne.w	r0, r0, #1
 80006d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006dc:	ea40 000c 	orr.w	r0, r0, ip
 80006e0:	fa23 f302 	lsr.w	r3, r3, r2
 80006e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e8:	e7cc      	b.n	8000684 <__aeabi_d2f+0x14>
 80006ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ee:	d107      	bne.n	8000700 <__aeabi_d2f+0x90>
 80006f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006f4:	bf1e      	ittt	ne
 80006f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006fe:	4770      	bxne	lr
 8000700:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000704:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000708:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <__aeabi_uldivmod>:
 8000710:	b953      	cbnz	r3, 8000728 <__aeabi_uldivmod+0x18>
 8000712:	b94a      	cbnz	r2, 8000728 <__aeabi_uldivmod+0x18>
 8000714:	2900      	cmp	r1, #0
 8000716:	bf08      	it	eq
 8000718:	2800      	cmpeq	r0, #0
 800071a:	bf1c      	itt	ne
 800071c:	f04f 31ff 	movne.w	r1, #4294967295
 8000720:	f04f 30ff 	movne.w	r0, #4294967295
 8000724:	f000 b96e 	b.w	8000a04 <__aeabi_idiv0>
 8000728:	f1ad 0c08 	sub.w	ip, sp, #8
 800072c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000730:	f000 f806 	bl	8000740 <__udivmoddi4>
 8000734:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr

08000740 <__udivmoddi4>:
 8000740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000744:	9d08      	ldr	r5, [sp, #32]
 8000746:	4604      	mov	r4, r0
 8000748:	468c      	mov	ip, r1
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 8083 	bne.w	8000856 <__udivmoddi4+0x116>
 8000750:	428a      	cmp	r2, r1
 8000752:	4617      	mov	r7, r2
 8000754:	d947      	bls.n	80007e6 <__udivmoddi4+0xa6>
 8000756:	fab2 f282 	clz	r2, r2
 800075a:	b142      	cbz	r2, 800076e <__udivmoddi4+0x2e>
 800075c:	f1c2 0020 	rsb	r0, r2, #32
 8000760:	fa24 f000 	lsr.w	r0, r4, r0
 8000764:	4091      	lsls	r1, r2
 8000766:	4097      	lsls	r7, r2
 8000768:	ea40 0c01 	orr.w	ip, r0, r1
 800076c:	4094      	lsls	r4, r2
 800076e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000772:	0c23      	lsrs	r3, r4, #16
 8000774:	fbbc f6f8 	udiv	r6, ip, r8
 8000778:	fa1f fe87 	uxth.w	lr, r7
 800077c:	fb08 c116 	mls	r1, r8, r6, ip
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb06 f10e 	mul.w	r1, r6, lr
 8000788:	4299      	cmp	r1, r3
 800078a:	d909      	bls.n	80007a0 <__udivmoddi4+0x60>
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000792:	f080 8119 	bcs.w	80009c8 <__udivmoddi4+0x288>
 8000796:	4299      	cmp	r1, r3
 8000798:	f240 8116 	bls.w	80009c8 <__udivmoddi4+0x288>
 800079c:	3e02      	subs	r6, #2
 800079e:	443b      	add	r3, r7
 80007a0:	1a5b      	subs	r3, r3, r1
 80007a2:	b2a4      	uxth	r4, r4
 80007a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a8:	fb08 3310 	mls	r3, r8, r0, r3
 80007ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007b4:	45a6      	cmp	lr, r4
 80007b6:	d909      	bls.n	80007cc <__udivmoddi4+0x8c>
 80007b8:	193c      	adds	r4, r7, r4
 80007ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80007be:	f080 8105 	bcs.w	80009cc <__udivmoddi4+0x28c>
 80007c2:	45a6      	cmp	lr, r4
 80007c4:	f240 8102 	bls.w	80009cc <__udivmoddi4+0x28c>
 80007c8:	3802      	subs	r0, #2
 80007ca:	443c      	add	r4, r7
 80007cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d0:	eba4 040e 	sub.w	r4, r4, lr
 80007d4:	2600      	movs	r6, #0
 80007d6:	b11d      	cbz	r5, 80007e0 <__udivmoddi4+0xa0>
 80007d8:	40d4      	lsrs	r4, r2
 80007da:	2300      	movs	r3, #0
 80007dc:	e9c5 4300 	strd	r4, r3, [r5]
 80007e0:	4631      	mov	r1, r6
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e6:	b902      	cbnz	r2, 80007ea <__udivmoddi4+0xaa>
 80007e8:	deff      	udf	#255	; 0xff
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d150      	bne.n	8000894 <__udivmoddi4+0x154>
 80007f2:	1bcb      	subs	r3, r1, r7
 80007f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f8:	fa1f f887 	uxth.w	r8, r7
 80007fc:	2601      	movs	r6, #1
 80007fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000802:	0c21      	lsrs	r1, r4, #16
 8000804:	fb0e 331c 	mls	r3, lr, ip, r3
 8000808:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800080c:	fb08 f30c 	mul.w	r3, r8, ip
 8000810:	428b      	cmp	r3, r1
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0xe4>
 8000814:	1879      	adds	r1, r7, r1
 8000816:	f10c 30ff 	add.w	r0, ip, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0xe2>
 800081c:	428b      	cmp	r3, r1
 800081e:	f200 80e9 	bhi.w	80009f4 <__udivmoddi4+0x2b4>
 8000822:	4684      	mov	ip, r0
 8000824:	1ac9      	subs	r1, r1, r3
 8000826:	b2a3      	uxth	r3, r4
 8000828:	fbb1 f0fe 	udiv	r0, r1, lr
 800082c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000830:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000834:	fb08 f800 	mul.w	r8, r8, r0
 8000838:	45a0      	cmp	r8, r4
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x10c>
 800083c:	193c      	adds	r4, r7, r4
 800083e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x10a>
 8000844:	45a0      	cmp	r8, r4
 8000846:	f200 80d9 	bhi.w	80009fc <__udivmoddi4+0x2bc>
 800084a:	4618      	mov	r0, r3
 800084c:	eba4 0408 	sub.w	r4, r4, r8
 8000850:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000854:	e7bf      	b.n	80007d6 <__udivmoddi4+0x96>
 8000856:	428b      	cmp	r3, r1
 8000858:	d909      	bls.n	800086e <__udivmoddi4+0x12e>
 800085a:	2d00      	cmp	r5, #0
 800085c:	f000 80b1 	beq.w	80009c2 <__udivmoddi4+0x282>
 8000860:	2600      	movs	r6, #0
 8000862:	e9c5 0100 	strd	r0, r1, [r5]
 8000866:	4630      	mov	r0, r6
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	fab3 f683 	clz	r6, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d14a      	bne.n	800090c <__udivmoddi4+0x1cc>
 8000876:	428b      	cmp	r3, r1
 8000878:	d302      	bcc.n	8000880 <__udivmoddi4+0x140>
 800087a:	4282      	cmp	r2, r0
 800087c:	f200 80b8 	bhi.w	80009f0 <__udivmoddi4+0x2b0>
 8000880:	1a84      	subs	r4, r0, r2
 8000882:	eb61 0103 	sbc.w	r1, r1, r3
 8000886:	2001      	movs	r0, #1
 8000888:	468c      	mov	ip, r1
 800088a:	2d00      	cmp	r5, #0
 800088c:	d0a8      	beq.n	80007e0 <__udivmoddi4+0xa0>
 800088e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000892:	e7a5      	b.n	80007e0 <__udivmoddi4+0xa0>
 8000894:	f1c2 0320 	rsb	r3, r2, #32
 8000898:	fa20 f603 	lsr.w	r6, r0, r3
 800089c:	4097      	lsls	r7, r2
 800089e:	fa01 f002 	lsl.w	r0, r1, r2
 80008a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a6:	40d9      	lsrs	r1, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	0c03      	lsrs	r3, r0, #16
 80008ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80008b0:	fa1f f887 	uxth.w	r8, r7
 80008b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008bc:	fb06 f108 	mul.w	r1, r6, r8
 80008c0:	4299      	cmp	r1, r3
 80008c2:	fa04 f402 	lsl.w	r4, r4, r2
 80008c6:	d909      	bls.n	80008dc <__udivmoddi4+0x19c>
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80008ce:	f080 808d 	bcs.w	80009ec <__udivmoddi4+0x2ac>
 80008d2:	4299      	cmp	r1, r3
 80008d4:	f240 808a 	bls.w	80009ec <__udivmoddi4+0x2ac>
 80008d8:	3e02      	subs	r6, #2
 80008da:	443b      	add	r3, r7
 80008dc:	1a5b      	subs	r3, r3, r1
 80008de:	b281      	uxth	r1, r0
 80008e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ec:	fb00 f308 	mul.w	r3, r0, r8
 80008f0:	428b      	cmp	r3, r1
 80008f2:	d907      	bls.n	8000904 <__udivmoddi4+0x1c4>
 80008f4:	1879      	adds	r1, r7, r1
 80008f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fa:	d273      	bcs.n	80009e4 <__udivmoddi4+0x2a4>
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d971      	bls.n	80009e4 <__udivmoddi4+0x2a4>
 8000900:	3802      	subs	r0, #2
 8000902:	4439      	add	r1, r7
 8000904:	1acb      	subs	r3, r1, r3
 8000906:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800090a:	e778      	b.n	80007fe <__udivmoddi4+0xbe>
 800090c:	f1c6 0c20 	rsb	ip, r6, #32
 8000910:	fa03 f406 	lsl.w	r4, r3, r6
 8000914:	fa22 f30c 	lsr.w	r3, r2, ip
 8000918:	431c      	orrs	r4, r3
 800091a:	fa20 f70c 	lsr.w	r7, r0, ip
 800091e:	fa01 f306 	lsl.w	r3, r1, r6
 8000922:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000926:	fa21 f10c 	lsr.w	r1, r1, ip
 800092a:	431f      	orrs	r7, r3
 800092c:	0c3b      	lsrs	r3, r7, #16
 800092e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000932:	fa1f f884 	uxth.w	r8, r4
 8000936:	fb0e 1119 	mls	r1, lr, r9, r1
 800093a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800093e:	fb09 fa08 	mul.w	sl, r9, r8
 8000942:	458a      	cmp	sl, r1
 8000944:	fa02 f206 	lsl.w	r2, r2, r6
 8000948:	fa00 f306 	lsl.w	r3, r0, r6
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x220>
 800094e:	1861      	adds	r1, r4, r1
 8000950:	f109 30ff 	add.w	r0, r9, #4294967295
 8000954:	d248      	bcs.n	80009e8 <__udivmoddi4+0x2a8>
 8000956:	458a      	cmp	sl, r1
 8000958:	d946      	bls.n	80009e8 <__udivmoddi4+0x2a8>
 800095a:	f1a9 0902 	sub.w	r9, r9, #2
 800095e:	4421      	add	r1, r4
 8000960:	eba1 010a 	sub.w	r1, r1, sl
 8000964:	b2bf      	uxth	r7, r7
 8000966:	fbb1 f0fe 	udiv	r0, r1, lr
 800096a:	fb0e 1110 	mls	r1, lr, r0, r1
 800096e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000972:	fb00 f808 	mul.w	r8, r0, r8
 8000976:	45b8      	cmp	r8, r7
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x24a>
 800097a:	19e7      	adds	r7, r4, r7
 800097c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000980:	d22e      	bcs.n	80009e0 <__udivmoddi4+0x2a0>
 8000982:	45b8      	cmp	r8, r7
 8000984:	d92c      	bls.n	80009e0 <__udivmoddi4+0x2a0>
 8000986:	3802      	subs	r0, #2
 8000988:	4427      	add	r7, r4
 800098a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800098e:	eba7 0708 	sub.w	r7, r7, r8
 8000992:	fba0 8902 	umull	r8, r9, r0, r2
 8000996:	454f      	cmp	r7, r9
 8000998:	46c6      	mov	lr, r8
 800099a:	4649      	mov	r1, r9
 800099c:	d31a      	bcc.n	80009d4 <__udivmoddi4+0x294>
 800099e:	d017      	beq.n	80009d0 <__udivmoddi4+0x290>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x27a>
 80009a2:	ebb3 020e 	subs.w	r2, r3, lr
 80009a6:	eb67 0701 	sbc.w	r7, r7, r1
 80009aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009ae:	40f2      	lsrs	r2, r6
 80009b0:	ea4c 0202 	orr.w	r2, ip, r2
 80009b4:	40f7      	lsrs	r7, r6
 80009b6:	e9c5 2700 	strd	r2, r7, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	462e      	mov	r6, r5
 80009c4:	4628      	mov	r0, r5
 80009c6:	e70b      	b.n	80007e0 <__udivmoddi4+0xa0>
 80009c8:	4606      	mov	r6, r0
 80009ca:	e6e9      	b.n	80007a0 <__udivmoddi4+0x60>
 80009cc:	4618      	mov	r0, r3
 80009ce:	e6fd      	b.n	80007cc <__udivmoddi4+0x8c>
 80009d0:	4543      	cmp	r3, r8
 80009d2:	d2e5      	bcs.n	80009a0 <__udivmoddi4+0x260>
 80009d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d8:	eb69 0104 	sbc.w	r1, r9, r4
 80009dc:	3801      	subs	r0, #1
 80009de:	e7df      	b.n	80009a0 <__udivmoddi4+0x260>
 80009e0:	4608      	mov	r0, r1
 80009e2:	e7d2      	b.n	800098a <__udivmoddi4+0x24a>
 80009e4:	4660      	mov	r0, ip
 80009e6:	e78d      	b.n	8000904 <__udivmoddi4+0x1c4>
 80009e8:	4681      	mov	r9, r0
 80009ea:	e7b9      	b.n	8000960 <__udivmoddi4+0x220>
 80009ec:	4666      	mov	r6, ip
 80009ee:	e775      	b.n	80008dc <__udivmoddi4+0x19c>
 80009f0:	4630      	mov	r0, r6
 80009f2:	e74a      	b.n	800088a <__udivmoddi4+0x14a>
 80009f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f8:	4439      	add	r1, r7
 80009fa:	e713      	b.n	8000824 <__udivmoddi4+0xe4>
 80009fc:	3802      	subs	r0, #2
 80009fe:	443c      	add	r4, r7
 8000a00:	e724      	b.n	800084c <__udivmoddi4+0x10c>
 8000a02:	bf00      	nop

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a0c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f001 fa63 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 fd8d 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 ff37 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1e:	f000 ff15 	bl	800184c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a22:	f000 fee9 	bl	80017f8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000a26:	f000 fe3f 	bl	80016a8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000a2a:	f000 fdeb 	bl	8001604 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a2e:	f000 fe73 	bl	8001718 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000a32:	f000 febd 	bl	80017b0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000a36:	48be      	ldr	r0, [pc, #760]	; (8000d30 <main+0x328>)
 8000a38:	f003 feda 	bl	80047f0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000a3c:	48bd      	ldr	r0, [pc, #756]	; (8000d34 <main+0x32c>)
 8000a3e:	f003 ff31 	bl	80048a4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	49bc      	ldr	r1, [pc, #752]	; (8000d38 <main+0x330>)
 8000a46:	48bd      	ldr	r0, [pc, #756]	; (8000d3c <main+0x334>)
 8000a48:	f001 fc3e 	bl	80022c8 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	48bb      	ldr	r0, [pc, #748]	; (8000d40 <main+0x338>)
 8000a54:	f002 fe4a 	bl	80036ec <HAL_GPIO_WritePin>

	char Menu[]="1 : Sawtooth wave\r\n2 : Sine wave\r\n3 : Square wave\r\n";
 8000a58:	4bba      	ldr	r3, [pc, #744]	; (8000d44 <main+0x33c>)
 8000a5a:	f507 74ea 	add.w	r4, r7, #468	; 0x1d4
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	6023      	str	r3, [r4, #0]
	char SawtoothMenu[]=
 8000a70:	4ab5      	ldr	r2, [pc, #724]	; (8000d48 <main+0x340>)
 8000a72:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000a76:	4611      	mov	r1, r2
 8000a78:	22bd      	movs	r2, #189	; 0xbd
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fd40 	bl	8005500 <memcpy>
		"SawtoothMenu\r\n press a:+frequency\r\n press s:-frequency\r\n "
		"press q: +V high\r\n press w: -V high\r\n press e: +V low \r\n press r: -V low\r\n "
		"press d: slop Up\r\n press f: slope down\r\n press x: back\r\n";
	char SineMenu[]="SawtoothMenu\r\n press a:+frequency\r\n press s:-frequency\r\n "
 8000a80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a84:	4ab1      	ldr	r2, [pc, #708]	; (8000d4c <main+0x344>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2385      	movs	r3, #133	; 0x85
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f004 fd37 	bl	8005500 <memcpy>
			"press q: +V high\r\n press w: -V high\r\n press e: +V low \r\n press r: -V low\r\n ";
	char SquareMenu[]="SawtoothMenu\r\n press a:+frequency\r\n press s:-frequency\r\n "
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4aad      	ldr	r2, [pc, #692]	; (8000d4c <main+0x344>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2385      	movs	r3, #133	; 0x85
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f004 fd2f 	bl	8005500 <memcpy>
//							== GPIO_PIN_SET)
//			{
//				MCP4922SetOutput(DACConfig, dataOut);
//			}
//		}
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 10);
 8000aa2:	220a      	movs	r2, #10
 8000aa4:	49aa      	ldr	r1, [pc, #680]	; (8000d50 <main+0x348>)
 8000aa6:	48ab      	ldr	r0, [pc, #684]	; (8000d54 <main+0x34c>)
 8000aa8:	f004 fa89 	bl	8004fbe <HAL_UART_Receive_IT>
		inputchar = UARTRecieveIT();
 8000aac:	f000 ffe4 	bl	8001a78 <UARTRecieveIT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4ba8      	ldr	r3, [pc, #672]	; (8000d58 <main+0x350>)
 8000ab6:	801a      	strh	r2, [r3, #0]
		switch (state)
 8000ab8:	4ba8      	ldr	r3, [pc, #672]	; (8000d5c <main+0x354>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2b1e      	cmp	r3, #30
 8000abe:	f300 808d 	bgt.w	8000bdc <main+0x1d4>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da46      	bge.n	8000b54 <main+0x14c>
 8000ac6:	f000 bcdc 	b.w	8001482 <main+0xa7a>
 8000aca:	3b28      	subs	r3, #40	; 0x28
 8000acc:	2b1e      	cmp	r3, #30
 8000ace:	f200 84d8 	bhi.w	8001482 <main+0xa7a>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <main+0xd0>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	0800117b 	.word	0x0800117b
 8000adc:	08001483 	.word	0x08001483
 8000ae0:	08001483 	.word	0x08001483
 8000ae4:	08001483 	.word	0x08001483
 8000ae8:	08001483 	.word	0x08001483
 8000aec:	08001483 	.word	0x08001483
 8000af0:	08001483 	.word	0x08001483
 8000af4:	08001483 	.word	0x08001483
 8000af8:	08001483 	.word	0x08001483
 8000afc:	08001483 	.word	0x08001483
 8000b00:	08000c7b 	.word	0x08000c7b
 8000b04:	08001483 	.word	0x08001483
 8000b08:	08001483 	.word	0x08001483
 8000b0c:	08001483 	.word	0x08001483
 8000b10:	08001483 	.word	0x08001483
 8000b14:	08001483 	.word	0x08001483
 8000b18:	08001483 	.word	0x08001483
 8000b1c:	08001483 	.word	0x08001483
 8000b20:	08001483 	.word	0x08001483
 8000b24:	08001483 	.word	0x08001483
 8000b28:	08000f2b 	.word	0x08000f2b
 8000b2c:	08001483 	.word	0x08001483
 8000b30:	08001483 	.word	0x08001483
 8000b34:	08001483 	.word	0x08001483
 8000b38:	08001483 	.word	0x08001483
 8000b3c:	08001483 	.word	0x08001483
 8000b40:	08001483 	.word	0x08001483
 8000b44:	08001483 	.word	0x08001483
 8000b48:	08001483 	.word	0x08001483
 8000b4c:	08001483 	.word	0x08001483
 8000b50:	08001199 	.word	0x08001199
 8000b54:	2b1e      	cmp	r3, #30
 8000b56:	f200 8494 	bhi.w	8001482 <main+0xa7a>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <main+0x158>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bed 	.word	0x08000bed
 8000b64:	08001483 	.word	0x08001483
 8000b68:	08001483 	.word	0x08001483
 8000b6c:	08001483 	.word	0x08001483
 8000b70:	08001483 	.word	0x08001483
 8000b74:	08001483 	.word	0x08001483
 8000b78:	08001483 	.word	0x08001483
 8000b7c:	08001483 	.word	0x08001483
 8000b80:	08001483 	.word	0x08001483
 8000b84:	08001483 	.word	0x08001483
 8000b88:	08000c11 	.word	0x08000c11
 8000b8c:	08001483 	.word	0x08001483
 8000b90:	08001483 	.word	0x08001483
 8000b94:	08001483 	.word	0x08001483
 8000b98:	08001483 	.word	0x08001483
 8000b9c:	08001483 	.word	0x08001483
 8000ba0:	08001483 	.word	0x08001483
 8000ba4:	08001483 	.word	0x08001483
 8000ba8:	08001483 	.word	0x08001483
 8000bac:	08001483 	.word	0x08001483
 8000bb0:	08000c57 	.word	0x08000c57
 8000bb4:	08001483 	.word	0x08001483
 8000bb8:	08001483 	.word	0x08001483
 8000bbc:	08001483 	.word	0x08001483
 8000bc0:	08001483 	.word	0x08001483
 8000bc4:	08001483 	.word	0x08001483
 8000bc8:	08001483 	.word	0x08001483
 8000bcc:	08001483 	.word	0x08001483
 8000bd0:	08001483 	.word	0x08001483
 8000bd4:	08001483 	.word	0x08001483
 8000bd8:	08000f09 	.word	0x08000f09
 8000bdc:	2b46      	cmp	r3, #70	; 0x46
 8000bde:	f300 8450 	bgt.w	8001482 <main+0xa7a>
 8000be2:	2b28      	cmp	r3, #40	; 0x28
 8000be4:	f6bf af71 	bge.w	8000aca <main+0xc2>
 8000be8:	f000 bc4b 	b.w	8001482 <main+0xa7a>
		{
			case state_start:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),10);
 8000bec:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faf1 	bl	80001d8 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8000bfe:	230a      	movs	r3, #10
 8000c00:	4854      	ldr	r0, [pc, #336]	; (8000d54 <main+0x34c>)
 8000c02:	f004 f94a 	bl	8004e9a <HAL_UART_Transmit>
				state = state_Menu;
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <main+0x354>)
 8000c08:	220a      	movs	r2, #10
 8000c0a:	801a      	strh	r2, [r3, #0]
				break;
 8000c0c:	f000 bc39 	b.w	8001482 <main+0xa7a>
			case state_Menu:
				if (inputchar == '1')
 8000c10:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <main+0x350>)
 8000c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c16:	2b31      	cmp	r3, #49	; 0x31
 8000c18:	d104      	bne.n	8000c24 <main+0x21c>
				{
					state = state_Sawtooth;
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <main+0x354>)
 8000c1c:	2214      	movs	r2, #20
 8000c1e:	801a      	strh	r2, [r3, #0]
				}
				else
				{
					state = state_Menu;
				}
				break;
 8000c20:	f000 bc2f 	b.w	8001482 <main+0xa7a>
				else if (inputchar == '2')
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <main+0x350>)
 8000c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2a:	2b32      	cmp	r3, #50	; 0x32
 8000c2c:	d104      	bne.n	8000c38 <main+0x230>
					state = state_Sine;
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <main+0x354>)
 8000c30:	221e      	movs	r2, #30
 8000c32:	801a      	strh	r2, [r3, #0]
				break;
 8000c34:	f000 bc25 	b.w	8001482 <main+0xa7a>
				else if (inputchar == '3')
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <main+0x350>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	2b33      	cmp	r3, #51	; 0x33
 8000c40:	d104      	bne.n	8000c4c <main+0x244>
					state = state_Square;
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <main+0x354>)
 8000c44:	2228      	movs	r2, #40	; 0x28
 8000c46:	801a      	strh	r2, [r3, #0]
				break;
 8000c48:	f000 bc1b 	b.w	8001482 <main+0xa7a>
					state = state_Menu;
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <main+0x354>)
 8000c4e:	220a      	movs	r2, #10
 8000c50:	801a      	strh	r2, [r3, #0]
				break;
 8000c52:	f000 bc16 	b.w	8001482 <main+0xa7a>
			case state_Sawtooth:
				HAL_UART_Transmit(&huart2, (uint8_t*)SawtoothMenu, strlen(SawtoothMenu),10);
 8000c56:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fabc 	bl	80001d8 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8000c68:	230a      	movs	r3, #10
 8000c6a:	483a      	ldr	r0, [pc, #232]	; (8000d54 <main+0x34c>)
 8000c6c:	f004 f915 	bl	8004e9a <HAL_UART_Transmit>
				state = state_functionSawtooth;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <main+0x354>)
 8000c72:	2232      	movs	r2, #50	; 0x32
 8000c74:	801a      	strh	r2, [r3, #0]
				break;
 8000c76:	f000 bc04 	b.w	8001482 <main+0xa7a>
			case state_functionSawtooth:
				wave = 1;
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <main+0x358>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
				if (inputchar == 'a') //เพิ่มความถี่
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <main+0x350>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	2b61      	cmp	r3, #97	; 0x61
 8000c88:	d123      	bne.n	8000cd2 <main+0x2ca>
				{
					f = f + 0.1;
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <main+0x35c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fc0e 	bl	80004b0 <__aeabi_f2d>
 8000c94:	a324      	add	r3, pc, #144	; (adr r3, 8000d28 <main+0x320>)
 8000c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9a:	f7ff faab 	bl	80001f4 <__adddf3>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff fce3 	bl	8000670 <__aeabi_d2f>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <main+0x35c>)
 8000cae:	6013      	str	r3, [r2, #0]
					if(f>10)
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <main+0x35c>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	dd02      	ble.n	8000cca <main+0x2c2>
					{
						f = 10;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <main+0x35c>)
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <main+0x360>)
 8000cc8:	601a      	str	r2, [r3, #0]
					}
					state = state_functionSawtooth;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <main+0x354>)
 8000ccc:	2232      	movs	r2, #50	; 0x32
 8000cce:	801a      	strh	r2, [r3, #0]
				}
				else
				{
					state = state_Sawtooth;
				}
				break;
 8000cd0:	e3d7      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 's')  //ลดความถี่
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <main+0x350>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	2b73      	cmp	r3, #115	; 0x73
 8000cda:	d147      	bne.n	8000d6c <main+0x364>
					f = f - 0.1;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <main+0x35c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbe5 	bl	80004b0 <__aeabi_f2d>
 8000ce6:	a310      	add	r3, pc, #64	; (adr r3, 8000d28 <main+0x320>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fa80 	bl	80001f0 <__aeabi_dsub>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fcba 	bl	8000670 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <main+0x35c>)
 8000d00:	6013      	str	r3, [r2, #0]
					if(f>0)
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <main+0x35c>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	dd03      	ble.n	8000d1a <main+0x312>
						f = 0;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <main+0x35c>)
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <main+0x354>)
 8000d1c:	2232      	movs	r2, #50	; 0x32
 8000d1e:	801a      	strh	r2, [r3, #0]
				break;
 8000d20:	e3af      	b.n	8001482 <main+0xa7a>
 8000d22:	bf00      	nop
 8000d24:	f3af 8000 	nop.w
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fb99999 	.word	0x3fb99999
 8000d30:	2000008c 	.word	0x2000008c
 8000d34:	20000174 	.word	0x20000174
 8000d38:	2000006c 	.word	0x2000006c
 8000d3c:	2000012c 	.word	0x2000012c
 8000d40:	40020000 	.word	0x40020000
 8000d44:	08005544 	.word	0x08005544
 8000d48:	08005578 	.word	0x08005578
 8000d4c:	08005638 	.word	0x08005638
 8000d50:	20000034 	.word	0x20000034
 8000d54:	2000021c 	.word	0x2000021c
 8000d58:	20000054 	.word	0x20000054
 8000d5c:	20000056 	.word	0x20000056
 8000d60:	20000068 	.word	0x20000068
 8000d64:	20000058 	.word	0x20000058
 8000d68:	41200000 	.word	0x41200000
				else if(inputchar == 'q')  //เพิ่ม V high
 8000d6c:	4b9e      	ldr	r3, [pc, #632]	; (8000fe8 <main+0x5e0>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	2b71      	cmp	r3, #113	; 0x71
 8000d74:	d126      	bne.n	8000dc4 <main+0x3bc>
					Vhigh = Vhigh + 0.1 ;
 8000d76:	4b9d      	ldr	r3, [pc, #628]	; (8000fec <main+0x5e4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb98 	bl	80004b0 <__aeabi_f2d>
 8000d80:	a395      	add	r3, pc, #596	; (adr r3, 8000fd8 <main+0x5d0>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fa35 	bl	80001f4 <__adddf3>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fc6d 	bl	8000670 <__aeabi_d2f>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a94      	ldr	r2, [pc, #592]	; (8000fec <main+0x5e4>)
 8000d9a:	6013      	str	r3, [r2, #0]
					if(Vhigh>3.3)
 8000d9c:	4b93      	ldr	r3, [pc, #588]	; (8000fec <main+0x5e4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb85 	bl	80004b0 <__aeabi_f2d>
 8000da6:	a38e      	add	r3, pc, #568	; (adr r3, 8000fe0 <main+0x5d8>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fc56 	bl	800065c <__aeabi_dcmpgt>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <main+0x3b4>
						Vhigh = 3.3;
 8000db6:	4b8d      	ldr	r3, [pc, #564]	; (8000fec <main+0x5e4>)
 8000db8:	4a8d      	ldr	r2, [pc, #564]	; (8000ff0 <main+0x5e8>)
 8000dba:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000dbc:	4b8d      	ldr	r3, [pc, #564]	; (8000ff4 <main+0x5ec>)
 8000dbe:	2232      	movs	r2, #50	; 0x32
 8000dc0:	801a      	strh	r2, [r3, #0]
				break;
 8000dc2:	e35e      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'w')  //ลด V high
 8000dc4:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <main+0x5e0>)
 8000dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dca:	2b77      	cmp	r3, #119	; 0x77
 8000dcc:	d122      	bne.n	8000e14 <main+0x40c>
					Vhigh = Vhigh - 0.1 ;
 8000dce:	4b87      	ldr	r3, [pc, #540]	; (8000fec <main+0x5e4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb6c 	bl	80004b0 <__aeabi_f2d>
 8000dd8:	a37f      	add	r3, pc, #508	; (adr r3, 8000fd8 <main+0x5d0>)
 8000dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dde:	f7ff fa07 	bl	80001f0 <__aeabi_dsub>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff fc41 	bl	8000670 <__aeabi_d2f>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a7e      	ldr	r2, [pc, #504]	; (8000fec <main+0x5e4>)
 8000df2:	6013      	str	r3, [r2, #0]
					if(Vhigh<0)
 8000df4:	4b7d      	ldr	r3, [pc, #500]	; (8000fec <main+0x5e4>)
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d503      	bpl.n	8000e0c <main+0x404>
						Vhigh = 0;
 8000e04:	4b79      	ldr	r3, [pc, #484]	; (8000fec <main+0x5e4>)
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000e0c:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <main+0x5ec>)
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	801a      	strh	r2, [r3, #0]
				break;
 8000e12:	e336      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'e')  //เพิ่ม V low
 8000e14:	4b74      	ldr	r3, [pc, #464]	; (8000fe8 <main+0x5e0>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	2b65      	cmp	r3, #101	; 0x65
 8000e1c:	d126      	bne.n	8000e6c <main+0x464>
					Vlow = Vlow + 0.1 ;
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <main+0x5f0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb44 	bl	80004b0 <__aeabi_f2d>
 8000e28:	a36b      	add	r3, pc, #428	; (adr r3, 8000fd8 <main+0x5d0>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff f9e1 	bl	80001f4 <__adddf3>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fc19 	bl	8000670 <__aeabi_d2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a6d      	ldr	r2, [pc, #436]	; (8000ff8 <main+0x5f0>)
 8000e42:	6013      	str	r3, [r2, #0]
					if(Vlow>3.3)
 8000e44:	4b6c      	ldr	r3, [pc, #432]	; (8000ff8 <main+0x5f0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb31 	bl	80004b0 <__aeabi_f2d>
 8000e4e:	a364      	add	r3, pc, #400	; (adr r3, 8000fe0 <main+0x5d8>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fc02 	bl	800065c <__aeabi_dcmpgt>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <main+0x45c>
						Vlow = 3.3;
 8000e5e:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <main+0x5f0>)
 8000e60:	4a63      	ldr	r2, [pc, #396]	; (8000ff0 <main+0x5e8>)
 8000e62:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <main+0x5ec>)
 8000e66:	2232      	movs	r2, #50	; 0x32
 8000e68:	801a      	strh	r2, [r3, #0]
				break;
 8000e6a:	e30a      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'r')  //ลด V low
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <main+0x5e0>)
 8000e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e72:	2b72      	cmp	r3, #114	; 0x72
 8000e74:	d122      	bne.n	8000ebc <main+0x4b4>
					Vlow = Vlow - 0.1 ;
 8000e76:	4b60      	ldr	r3, [pc, #384]	; (8000ff8 <main+0x5f0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb18 	bl	80004b0 <__aeabi_f2d>
 8000e80:	a355      	add	r3, pc, #340	; (adr r3, 8000fd8 <main+0x5d0>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff f9b3 	bl	80001f0 <__aeabi_dsub>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fbed 	bl	8000670 <__aeabi_d2f>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <main+0x5f0>)
 8000e9a:	6013      	str	r3, [r2, #0]
					if(Vlow<0)
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <main+0x5f0>)
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d503      	bpl.n	8000eb4 <main+0x4ac>
						Vlow = 0;
 8000eac:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <main+0x5f0>)
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <main+0x5ec>)
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	801a      	strh	r2, [r3, #0]
				break;
 8000eba:	e2e2      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'd')  //slope up
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <main+0x5e0>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d106      	bne.n	8000ed4 <main+0x4cc>
					slope = 1;
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <main+0x5f4>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000ecc:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <main+0x5ec>)
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	801a      	strh	r2, [r3, #0]
				break;
 8000ed2:	e2d6      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'f')  //slope down
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <main+0x5e0>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	2b66      	cmp	r3, #102	; 0x66
 8000edc:	d107      	bne.n	8000eee <main+0x4e6>
					slope = -1;
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <main+0x5f4>)
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	601a      	str	r2, [r3, #0]
					state = state_functionSawtooth;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <main+0x5ec>)
 8000ee8:	2232      	movs	r2, #50	; 0x32
 8000eea:	801a      	strh	r2, [r3, #0]
				break;
 8000eec:	e2c9      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'x')
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <main+0x5e0>)
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	2b78      	cmp	r3, #120	; 0x78
 8000ef6:	d103      	bne.n	8000f00 <main+0x4f8>
					state = state_start;
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <main+0x5ec>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	801a      	strh	r2, [r3, #0]
				break;
 8000efe:	e2c0      	b.n	8001482 <main+0xa7a>
					state = state_Sawtooth;
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <main+0x5ec>)
 8000f02:	2214      	movs	r2, #20
 8000f04:	801a      	strh	r2, [r3, #0]
				break;
 8000f06:	e2bc      	b.n	8001482 <main+0xa7a>
			case state_Sine:
				HAL_UART_Transmit(&huart2, (uint8_t*)SineMenu, strlen(SineMenu),10);
 8000f08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f963 	bl	80001d8 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	4838      	ldr	r0, [pc, #224]	; (8001000 <main+0x5f8>)
 8000f1e:	f003 ffbc 	bl	8004e9a <HAL_UART_Transmit>
				state = state_functionSine;
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <main+0x5ec>)
 8000f24:	223c      	movs	r2, #60	; 0x3c
 8000f26:	801a      	strh	r2, [r3, #0]
				break;
 8000f28:	e2ab      	b.n	8001482 <main+0xa7a>
			case state_functionSine:
				wave = 2;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <main+0x5fc>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]
				if (inputchar == 'a') //เพิ่มความถี่
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <main+0x5e0>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	2b61      	cmp	r3, #97	; 0x61
 8000f38:	d123      	bne.n	8000f82 <main+0x57a>
				{
					f = f + 0.1;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <main+0x600>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fab6 	bl	80004b0 <__aeabi_f2d>
 8000f44:	a324      	add	r3, pc, #144	; (adr r3, 8000fd8 <main+0x5d0>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff f953 	bl	80001f4 <__adddf3>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fb8b 	bl	8000670 <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <main+0x600>)
 8000f5e:	6013      	str	r3, [r2, #0]
					if(f>10)
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <main+0x600>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd02      	ble.n	8000f7a <main+0x572>
					{
						f = 10;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <main+0x600>)
 8000f76:	4a25      	ldr	r2, [pc, #148]	; (800100c <main+0x604>)
 8000f78:	601a      	str	r2, [r3, #0]
					}
					state = state_functionSine;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <main+0x5ec>)
 8000f7c:	223c      	movs	r2, #60	; 0x3c
 8000f7e:	801a      	strh	r2, [r3, #0]
				}
				else
				{
					state = state_Sine;
				}
				break;
 8000f80:	e27f      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 's')  //ลดความถี่
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <main+0x5e0>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	2b73      	cmp	r3, #115	; 0x73
 8000f8a:	d141      	bne.n	8001010 <main+0x608>
					f = f - 0.1;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <main+0x600>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fa8d 	bl	80004b0 <__aeabi_f2d>
 8000f96:	a310      	add	r3, pc, #64	; (adr r3, 8000fd8 <main+0x5d0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff f928 	bl	80001f0 <__aeabi_dsub>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fb62 	bl	8000670 <__aeabi_d2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <main+0x600>)
 8000fb0:	6013      	str	r3, [r2, #0]
					if(f>0)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <main+0x600>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	dd03      	ble.n	8000fca <main+0x5c2>
						f = 0;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <main+0x600>)
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
					state = state_functionSine;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <main+0x5ec>)
 8000fcc:	223c      	movs	r2, #60	; 0x3c
 8000fce:	801a      	strh	r2, [r3, #0]
				break;
 8000fd0:	e257      	b.n	8001482 <main+0xa7a>
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	9999999a 	.word	0x9999999a
 8000fdc:	3fb99999 	.word	0x3fb99999
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	20000054 	.word	0x20000054
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	40533333 	.word	0x40533333
 8000ff4:	20000056 	.word	0x20000056
 8000ff8:	2000005c 	.word	0x2000005c
 8000ffc:	20000060 	.word	0x20000060
 8001000:	2000021c 	.word	0x2000021c
 8001004:	20000068 	.word	0x20000068
 8001008:	20000058 	.word	0x20000058
 800100c:	41200000 	.word	0x41200000
				else if(inputchar == 'q')  //เพิ่ม V high
 8001010:	4ba5      	ldr	r3, [pc, #660]	; (80012a8 <main+0x8a0>)
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	2b71      	cmp	r3, #113	; 0x71
 8001018:	d126      	bne.n	8001068 <main+0x660>
					Vhigh = Vhigh + 0.1 ;
 800101a:	4ba4      	ldr	r3, [pc, #656]	; (80012ac <main+0x8a4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa46 	bl	80004b0 <__aeabi_f2d>
 8001024:	a39c      	add	r3, pc, #624	; (adr r3, 8001298 <main+0x890>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f8e3 	bl	80001f4 <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fb1b 	bl	8000670 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	4a9b      	ldr	r2, [pc, #620]	; (80012ac <main+0x8a4>)
 800103e:	6013      	str	r3, [r2, #0]
					if(Vhigh>3.3)
 8001040:	4b9a      	ldr	r3, [pc, #616]	; (80012ac <main+0x8a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa33 	bl	80004b0 <__aeabi_f2d>
 800104a:	a395      	add	r3, pc, #596	; (adr r3, 80012a0 <main+0x898>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fb04 	bl	800065c <__aeabi_dcmpgt>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <main+0x658>
						Vhigh = 3.3;
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <main+0x8a4>)
 800105c:	4a94      	ldr	r2, [pc, #592]	; (80012b0 <main+0x8a8>)
 800105e:	601a      	str	r2, [r3, #0]
					state = state_functionSine;
 8001060:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <main+0x8ac>)
 8001062:	223c      	movs	r2, #60	; 0x3c
 8001064:	801a      	strh	r2, [r3, #0]
				break;
 8001066:	e20c      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'w')  //ลด V high
 8001068:	4b8f      	ldr	r3, [pc, #572]	; (80012a8 <main+0x8a0>)
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	2b77      	cmp	r3, #119	; 0x77
 8001070:	d122      	bne.n	80010b8 <main+0x6b0>
					Vhigh = Vhigh - 0.1 ;
 8001072:	4b8e      	ldr	r3, [pc, #568]	; (80012ac <main+0x8a4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa1a 	bl	80004b0 <__aeabi_f2d>
 800107c:	a386      	add	r3, pc, #536	; (adr r3, 8001298 <main+0x890>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff f8b5 	bl	80001f0 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff faef 	bl	8000670 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4a85      	ldr	r2, [pc, #532]	; (80012ac <main+0x8a4>)
 8001096:	6013      	str	r3, [r2, #0]
					if(Vhigh<0)
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <main+0x8a4>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	d503      	bpl.n	80010b0 <main+0x6a8>
						Vhigh = 0;
 80010a8:	4b80      	ldr	r3, [pc, #512]	; (80012ac <main+0x8a4>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
					state = state_functionSine;
 80010b0:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <main+0x8ac>)
 80010b2:	223c      	movs	r2, #60	; 0x3c
 80010b4:	801a      	strh	r2, [r3, #0]
				break;
 80010b6:	e1e4      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'e')  //เพิ่ม V low
 80010b8:	4b7b      	ldr	r3, [pc, #492]	; (80012a8 <main+0x8a0>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	2b65      	cmp	r3, #101	; 0x65
 80010c0:	d126      	bne.n	8001110 <main+0x708>
					Vlow = Vlow + 0.1 ;
 80010c2:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <main+0x8b0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9f2 	bl	80004b0 <__aeabi_f2d>
 80010cc:	a372      	add	r3, pc, #456	; (adr r3, 8001298 <main+0x890>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff f88f 	bl	80001f4 <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fac7 	bl	8000670 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a74      	ldr	r2, [pc, #464]	; (80012b8 <main+0x8b0>)
 80010e6:	6013      	str	r3, [r2, #0]
					if(Vlow>3.3)
 80010e8:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <main+0x8b0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9df 	bl	80004b0 <__aeabi_f2d>
 80010f2:	a36b      	add	r3, pc, #428	; (adr r3, 80012a0 <main+0x898>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fab0 	bl	800065c <__aeabi_dcmpgt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <main+0x700>
						Vlow = 3.3;
 8001102:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <main+0x8b0>)
 8001104:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <main+0x8a8>)
 8001106:	601a      	str	r2, [r3, #0]
					state = state_functionSine;
 8001108:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <main+0x8ac>)
 800110a:	223c      	movs	r2, #60	; 0x3c
 800110c:	801a      	strh	r2, [r3, #0]
				break;
 800110e:	e1b8      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'r')  //ลด V low
 8001110:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <main+0x8a0>)
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	2b72      	cmp	r3, #114	; 0x72
 8001118:	d122      	bne.n	8001160 <main+0x758>
					Vlow = Vlow - 0.1 ;
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <main+0x8b0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9c6 	bl	80004b0 <__aeabi_f2d>
 8001124:	a35c      	add	r3, pc, #368	; (adr r3, 8001298 <main+0x890>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f861 	bl	80001f0 <__aeabi_dsub>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fa9b 	bl	8000670 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a5e      	ldr	r2, [pc, #376]	; (80012b8 <main+0x8b0>)
 800113e:	6013      	str	r3, [r2, #0]
					if(Vlow<0)
 8001140:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <main+0x8b0>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d503      	bpl.n	8001158 <main+0x750>
						Vlow = 0;
 8001150:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <main+0x8b0>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
					state = state_functionSine;
 8001158:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <main+0x8ac>)
 800115a:	223c      	movs	r2, #60	; 0x3c
 800115c:	801a      	strh	r2, [r3, #0]
				break;
 800115e:	e190      	b.n	8001482 <main+0xa7a>
				else if(inputchar == 'x')  //ย้อนกลับไป menu
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <main+0x8a0>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	2b78      	cmp	r3, #120	; 0x78
 8001168:	d103      	bne.n	8001172 <main+0x76a>
					state = state_start;
 800116a:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <main+0x8ac>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
				break;
 8001170:	e187      	b.n	8001482 <main+0xa7a>
					state = state_Sine;
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <main+0x8ac>)
 8001174:	221e      	movs	r2, #30
 8001176:	801a      	strh	r2, [r3, #0]
				break;
 8001178:	e183      	b.n	8001482 <main+0xa7a>
			case state_Square:
				HAL_UART_Transmit(&huart2, (uint8_t*)SquareMenu, strlen(SquareMenu),10);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f82b 	bl	80001d8 <strlen>
 8001182:	4603      	mov	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	1d39      	adds	r1, r7, #4
 8001188:	230a      	movs	r3, #10
 800118a:	484c      	ldr	r0, [pc, #304]	; (80012bc <main+0x8b4>)
 800118c:	f003 fe85 	bl	8004e9a <HAL_UART_Transmit>
				state = state_functionSquare;
 8001190:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <main+0x8ac>)
 8001192:	2246      	movs	r2, #70	; 0x46
 8001194:	801a      	strh	r2, [r3, #0]
				break;
 8001196:	e174      	b.n	8001482 <main+0xa7a>
			case state_functionSquare:
				wave = 3;
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <main+0x8b8>)
 800119a:	2203      	movs	r2, #3
 800119c:	601a      	str	r2, [r3, #0]
				if (inputchar == 'a')  //เพิ่มความถี่
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <main+0x8a0>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	2b61      	cmp	r3, #97	; 0x61
 80011a6:	d123      	bne.n	80011f0 <main+0x7e8>
				{
					f = f + 0.1;
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <main+0x8bc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f97f 	bl	80004b0 <__aeabi_f2d>
 80011b2:	a339      	add	r3, pc, #228	; (adr r3, 8001298 <main+0x890>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f81c 	bl	80001f4 <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fa54 	bl	8000670 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <main+0x8bc>)
 80011cc:	6013      	str	r3, [r2, #0]
					if(f>10)
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <main+0x8bc>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	dd02      	ble.n	80011e8 <main+0x7e0>
					{
						f = 10;
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <main+0x8bc>)
 80011e4:	4a38      	ldr	r2, [pc, #224]	; (80012c8 <main+0x8c0>)
 80011e6:	601a      	str	r2, [r3, #0]
					}
					state = state_functionSquare;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <main+0x8ac>)
 80011ea:	2246      	movs	r2, #70	; 0x46
 80011ec:	801a      	strh	r2, [r3, #0]
				}
				else
				{
					state = state_Square;
				}
				break;
 80011ee:	e147      	b.n	8001480 <main+0xa78>
				else if(inputchar == 's')  //ลดความถี่
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <main+0x8a0>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	2b73      	cmp	r3, #115	; 0x73
 80011f8:	d122      	bne.n	8001240 <main+0x838>
					f = f - 0.1;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <main+0x8bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f956 	bl	80004b0 <__aeabi_f2d>
 8001204:	a324      	add	r3, pc, #144	; (adr r3, 8001298 <main+0x890>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7fe fff1 	bl	80001f0 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fa2b 	bl	8000670 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <main+0x8bc>)
 800121e:	6013      	str	r3, [r2, #0]
					if(f>0)
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <main+0x8bc>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd03      	ble.n	8001238 <main+0x830>
						f = 0;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <main+0x8bc>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <main+0x8ac>)
 800123a:	2246      	movs	r2, #70	; 0x46
 800123c:	801a      	strh	r2, [r3, #0]
				break;
 800123e:	e11f      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'q')  //เพิ่ม V high
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <main+0x8a0>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	2b71      	cmp	r3, #113	; 0x71
 8001248:	d140      	bne.n	80012cc <main+0x8c4>
					Vhigh = Vhigh + 0.1 ;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <main+0x8a4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f92e 	bl	80004b0 <__aeabi_f2d>
 8001254:	a310      	add	r3, pc, #64	; (adr r3, 8001298 <main+0x890>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7fe ffcb 	bl	80001f4 <__adddf3>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fa03 	bl	8000670 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <main+0x8a4>)
 800126e:	6013      	str	r3, [r2, #0]
					if(Vhigh>3.3)
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <main+0x8a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f91b 	bl	80004b0 <__aeabi_f2d>
 800127a:	a309      	add	r3, pc, #36	; (adr r3, 80012a0 <main+0x898>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ec 	bl	800065c <__aeabi_dcmpgt>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <main+0x888>
						Vhigh = 3.3;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <main+0x8a4>)
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <main+0x8a8>)
 800128e:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <main+0x8ac>)
 8001292:	2246      	movs	r2, #70	; 0x46
 8001294:	801a      	strh	r2, [r3, #0]
				break;
 8001296:	e0f3      	b.n	8001480 <main+0xa78>
 8001298:	9999999a 	.word	0x9999999a
 800129c:	3fb99999 	.word	0x3fb99999
 80012a0:	66666666 	.word	0x66666666
 80012a4:	400a6666 	.word	0x400a6666
 80012a8:	20000054 	.word	0x20000054
 80012ac:	20000000 	.word	0x20000000
 80012b0:	40533333 	.word	0x40533333
 80012b4:	20000056 	.word	0x20000056
 80012b8:	2000005c 	.word	0x2000005c
 80012bc:	2000021c 	.word	0x2000021c
 80012c0:	20000068 	.word	0x20000068
 80012c4:	20000058 	.word	0x20000058
 80012c8:	41200000 	.word	0x41200000
				else if(inputchar == 'w')  //ลด V high
 80012cc:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <main+0xb00>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	2b77      	cmp	r3, #119	; 0x77
 80012d4:	d122      	bne.n	800131c <main+0x914>
					Vhigh = Vhigh - 0.1 ;
 80012d6:	4b8d      	ldr	r3, [pc, #564]	; (800150c <main+0xb04>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8e8 	bl	80004b0 <__aeabi_f2d>
 80012e0:	a385      	add	r3, pc, #532	; (adr r3, 80014f8 <main+0xaf0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff83 	bl	80001f0 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff f9bd 	bl	8000670 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a84      	ldr	r2, [pc, #528]	; (800150c <main+0xb04>)
 80012fa:	6013      	str	r3, [r2, #0]
					if(Vhigh<0)
 80012fc:	4b83      	ldr	r3, [pc, #524]	; (800150c <main+0xb04>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d503      	bpl.n	8001314 <main+0x90c>
						Vhigh = 0;
 800130c:	4b7f      	ldr	r3, [pc, #508]	; (800150c <main+0xb04>)
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <main+0xb08>)
 8001316:	2246      	movs	r2, #70	; 0x46
 8001318:	801a      	strh	r2, [r3, #0]
				break;
 800131a:	e0b1      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'e')  //เพิ่ม V low
 800131c:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <main+0xb00>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	2b65      	cmp	r3, #101	; 0x65
 8001324:	d126      	bne.n	8001374 <main+0x96c>
					Vlow = Vlow + 0.1 ;
 8001326:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <main+0xb0c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8c0 	bl	80004b0 <__aeabi_f2d>
 8001330:	a371      	add	r3, pc, #452	; (adr r3, 80014f8 <main+0xaf0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff5d 	bl	80001f4 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f995 	bl	8000670 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	4a72      	ldr	r2, [pc, #456]	; (8001514 <main+0xb0c>)
 800134a:	6013      	str	r3, [r2, #0]
					if(Vlow>3.3)
 800134c:	4b71      	ldr	r3, [pc, #452]	; (8001514 <main+0xb0c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8ad 	bl	80004b0 <__aeabi_f2d>
 8001356:	a36a      	add	r3, pc, #424	; (adr r3, 8001500 <main+0xaf8>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f97e 	bl	800065c <__aeabi_dcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <main+0x964>
						Vlow = 3.3;
 8001366:	4b6b      	ldr	r3, [pc, #428]	; (8001514 <main+0xb0c>)
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <main+0xb10>)
 800136a:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <main+0xb08>)
 800136e:	2246      	movs	r2, #70	; 0x46
 8001370:	801a      	strh	r2, [r3, #0]
				break;
 8001372:	e085      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'r')  //ลด V low
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <main+0xb00>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	2b72      	cmp	r3, #114	; 0x72
 800137c:	d122      	bne.n	80013c4 <main+0x9bc>
					Vlow = Vlow - 0.1 ;
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <main+0xb0c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f894 	bl	80004b0 <__aeabi_f2d>
 8001388:	a35b      	add	r3, pc, #364	; (adr r3, 80014f8 <main+0xaf0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff2f 	bl	80001f0 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff f969 	bl	8000670 <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <main+0xb0c>)
 80013a2:	6013      	str	r3, [r2, #0]
					if(Vlow<0)
 80013a4:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <main+0xb0c>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d503      	bpl.n	80013bc <main+0x9b4>
						Vlow = 0;
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <main+0xb0c>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 80013bc:	4b54      	ldr	r3, [pc, #336]	; (8001510 <main+0xb08>)
 80013be:	2246      	movs	r2, #70	; 0x46
 80013c0:	801a      	strh	r2, [r3, #0]
				break;
 80013c2:	e05d      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'd')  //เพิ่ม Duty cycle
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <main+0xb00>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d124      	bne.n	8001418 <main+0xa10>
					Duty_cycle = Duty_cycle + 0.1;
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <main+0xb14>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f86c 	bl	80004b0 <__aeabi_f2d>
 80013d8:	a347      	add	r3, pc, #284	; (adr r3, 80014f8 <main+0xaf0>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7fe ff09 	bl	80001f4 <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff f941 	bl	8000670 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a4a      	ldr	r2, [pc, #296]	; (800151c <main+0xb14>)
 80013f2:	6013      	str	r3, [r2, #0]
					if(Duty_cycle > 1)
 80013f4:	4b49      	ldr	r3, [pc, #292]	; (800151c <main+0xb14>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	dd03      	ble.n	8001410 <main+0xa08>
						Duty_cycle = 1;
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <main+0xb14>)
 800140a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800140e:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <main+0xb08>)
 8001412:	2246      	movs	r2, #70	; 0x46
 8001414:	801a      	strh	r2, [r3, #0]
				break;
 8001416:	e033      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'f')  //ลด Duty cycle
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <main+0xb00>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	2b66      	cmp	r3, #102	; 0x66
 8001420:	d122      	bne.n	8001468 <main+0xa60>
					Duty_cycle = Duty_cycle - 0.1;
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <main+0xb14>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f842 	bl	80004b0 <__aeabi_f2d>
 800142c:	a332      	add	r3, pc, #200	; (adr r3, 80014f8 <main+0xaf0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7fe fedd 	bl	80001f0 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff f917 	bl	8000670 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <main+0xb14>)
 8001446:	6013      	str	r3, [r2, #0]
					if(Duty_cycle < 0)
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <main+0xb14>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d503      	bpl.n	8001460 <main+0xa58>
						Duty_cycle = 0;
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <main+0xb14>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
					state = state_functionSquare;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <main+0xb08>)
 8001462:	2246      	movs	r2, #70	; 0x46
 8001464:	801a      	strh	r2, [r3, #0]
				break;
 8001466:	e00b      	b.n	8001480 <main+0xa78>
				else if(inputchar == 'x')  //กลับไปที่ menu
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <main+0xb00>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	2b78      	cmp	r3, #120	; 0x78
 8001470:	d103      	bne.n	800147a <main+0xa72>
					state = state_start;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <main+0xb08>)
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
				break;
 8001478:	e002      	b.n	8001480 <main+0xa78>
					state = state_Square;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <main+0xb08>)
 800147c:	2228      	movs	r2, #40	; 0x28
 800147e:	801a      	strh	r2, [r3, #0]
				break;
 8001480:	bf00      	nop
		}
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100)
 8001482:	f000 fadf 	bl	8001a44 <micros>
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <main+0xb18>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	ebb0 0802 	subs.w	r8, r0, r2
 8001490:	eb61 0903 	sbc.w	r9, r1, r3
 8001494:	f1b9 0f00 	cmp.w	r9, #0
 8001498:	bf08      	it	eq
 800149a:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 800149e:	f4ff ab00 	bcc.w	8000aa2 <main+0x9a>
		{
			timestamp = micros();
 80014a2:	f000 facf 	bl	8001a44 <micros>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	491d      	ldr	r1, [pc, #116]	; (8001520 <main+0xb18>)
 80014ac:	e9c1 2300 	strd	r2, r3, [r1]

			dataOut %= 4096;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <main+0xb1c>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <main+0xb1c>)
 80014bc:	801a      	strh	r2, [r3, #0]
			if (hspi3.State == HAL_SPI_STATE_READY
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <main+0xb20>)
 80014c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f47f aaeb 	bne.w	8000aa2 <main+0x9a>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <main+0xb24>)
 80014d2:	f002 f8f3 	bl	80036bc <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f47f aae2 	bne.w	8000aa2 <main+0x9a>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <main+0xb28>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4a10      	ldr	r2, [pc, #64]	; (8001524 <main+0xb1c>)
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fa6f 	bl	80019cc <MCP4922SetOutput>
	{
 80014ee:	f7ff bad8 	b.w	8000aa2 <main+0x9a>
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3fb99999 	.word	0x3fb99999
 8001500:	66666666 	.word	0x66666666
 8001504:	400a6666 	.word	0x400a6666
 8001508:	20000054 	.word	0x20000054
 800150c:	20000000 	.word	0x20000000
 8001510:	20000056 	.word	0x20000056
 8001514:	2000005c 	.word	0x2000005c
 8001518:	40533333 	.word	0x40533333
 800151c:	20000064 	.word	0x20000064
 8001520:	20000080 	.word	0x20000080
 8001524:	20000078 	.word	0x20000078
 8001528:	200000d4 	.word	0x200000d4
 800152c:	40020400 	.word	0x40020400
 8001530:	20000004 	.word	0x20000004

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	; 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2230      	movs	r2, #48	; 0x30
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ffea 	bl	800551c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <SystemClock_Config+0xc8>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <SystemClock_Config+0xc8>)
 8001562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <SystemClock_Config+0xc8>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <SystemClock_Config+0xcc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a20      	ldr	r2, [pc, #128]	; (8001600 <SystemClock_Config+0xcc>)
 800157e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <SystemClock_Config+0xcc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a4:	2308      	movs	r3, #8
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015a8:	2364      	movs	r3, #100	; 0x64
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 f8b1 	bl	8003720 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c4:	f000 fa88 	bl	8001ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2103      	movs	r1, #3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fb13 	bl	8003c10 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015f0:	f000 fa72 	bl	8001ad8 <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3750      	adds	r7, #80	; 0x50
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001618:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <MX_ADC1_Init+0xa0>)
 800161a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_ADC1_Init+0x9c>)
 800161e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_ADC1_Init+0x9c>)
 800162c:	2201      	movs	r2, #1
 800162e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001632:	2200      	movs	r2, #0
 8001634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001656:	2201      	movs	r2, #1
 8001658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_ADC1_Init+0x9c>)
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_ADC1_Init+0x9c>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_ADC1_Init+0x9c>)
 800166a:	f000 fca9 	bl	8001fc0 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001674:	f000 fa30 	bl	8001ad8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x9c>)
 800168a:	f000 ff35 	bl	80024f8 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 fa20 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000012c 	.word	0x2000012c
 80016a4:	40012000 	.word	0x40012000

080016a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_SPI3_Init+0x68>)
 80016ae:	4a19      	ldr	r2, [pc, #100]	; (8001714 <MX_SPI3_Init+0x6c>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_SPI3_Init+0x68>)
 80016b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_SPI3_Init+0x68>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_SPI3_Init+0x68>)
 80016c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI3_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_SPI3_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI3_Init+0x68>)
 80016d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI3_Init+0x68>)
 80016de:	2220      	movs	r2, #32
 80016e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_SPI3_Init+0x68>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI3_Init+0x68>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_SPI3_Init+0x68>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI3_Init+0x68>)
 80016f6:	220a      	movs	r2, #10
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_SPI3_Init+0x68>)
 80016fc:	f002 fc84 	bl	8004008 <HAL_SPI_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001706:	f000 f9e7 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000d4 	.word	0x200000d4
 8001714:	40003c00 	.word	0x40003c00

08001718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <MX_TIM3_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_TIM3_Init+0x90>)
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001748:	2264      	movs	r2, #100	; 0x64
 800174a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_TIM3_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <MX_TIM3_Init+0x90>)
 800175a:	f002 fff9 	bl	8004750 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001764:	f000 f9b8 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001776:	f003 f8f7 	bl	8004968 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001780:	f000 f9aa 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001784:	2320      	movs	r3, #32
 8001786:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_TIM3_Init+0x90>)
 8001792:	f003 fac7 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800179c:	f000 f99c 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000008c 	.word	0x2000008c
 80017ac:	40000400 	.word	0x40000400

080017b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017bc:	2263      	movs	r2, #99	; 0x63
 80017be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM11_Init+0x40>)
 80017dc:	f002 ffb8 	bl	8004750 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017e6:	f000 f977 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000174 	.word	0x20000174
 80017f4:	40014800 	.word	0x40014800

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_USART2_UART_Init+0x50>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001830:	f003 fae6 	bl	8004e00 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800183a:	f000 f94d 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000021c 	.word	0x2000021c
 8001848:	40004400 	.word	0x40004400

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_DMA_Init+0x3c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <MX_DMA_Init+0x3c>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_DMA_Init+0x3c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2038      	movs	r0, #56	; 0x38
 8001874:	f001 f9d5 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001878:	2038      	movs	r0, #56	; 0x38
 800187a:	f001 f9ee 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <MX_GPIO_Init+0x12c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <MX_GPIO_Init+0x12c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <MX_GPIO_Init+0x12c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2120      	movs	r1, #32
 8001916:	4829      	ldr	r0, [pc, #164]	; (80019bc <MX_GPIO_Init+0x130>)
 8001918:	f001 fee8 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001922:	4827      	ldr	r0, [pc, #156]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001924:	f001 fee2 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	4825      	ldr	r0, [pc, #148]	; (80019c4 <MX_GPIO_Init+0x138>)
 800192e:	f001 fedd 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <MX_GPIO_Init+0x130>)
 800193a:	f001 fed7 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <MX_GPIO_Init+0x138>)
 8001954:	f001 fd2e 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001958:	f44f 7308 	mov.w	r3, #544	; 0x220
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4812      	ldr	r0, [pc, #72]	; (80019bc <MX_GPIO_Init+0x130>)
 8001972:	f001 fd1f 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001990:	f001 fd10 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_GPIO_Init+0x138>)
 80019ac:	f001 fd02 	bl	80033b4 <HAL_GPIO_Init>

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	10210000 	.word	0x10210000

080019cc <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	460a      	mov	r2, r1
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	4613      	mov	r3, r2
 80019da:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	031b      	lsls	r3, r3, #12
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MCP4922SetOutput+0x44>)
 80019f4:	f001 fe7a 	bl	80036ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MCP4922SetOutput+0x48>)
 8001a02:	f002 fb8b 	bl	800411c <HAL_SPI_Transmit_IT>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020400 	.word	0x40020400
 8001a14:	200000d4 	.word	0x200000d4

08001a18 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_SPI_TxCpltCallback+0x24>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d105      	bne.n	8001a34 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <HAL_SPI_TxCpltCallback+0x28>)
 8001a30:	f001 fe5c 	bl	80036ec <HAL_GPIO_WritePin>
	}
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200000d4 	.word	0x200000d4
 8001a40:	40020400 	.word	0x40020400

08001a44 <micros>:
		_micro += 65535;
	}
}

inline uint64_t micros()
{
 8001a44:	b4b0      	push	{r4, r5, r7}
 8001a46:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <micros+0x2c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <micros+0x30>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	1884      	adds	r4, r0, r2
 8001a5c:	eb41 0503 	adc.w	r5, r1, r3
 8001a60:	4622      	mov	r2, r4
 8001a62:	462b      	mov	r3, r5
}
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bcb0      	pop	{r4, r5, r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000174 	.word	0x20000174
 8001a74:	20000070 	.word	0x20000070

08001a78 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a82:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <UARTRecieveIT+0x54>)
 8001a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <UARTRecieveIT+0x54>)
 8001a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <UARTRecieveIT+0x58>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d010      	beq.n	8001abc <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <UARTRecieveIT+0x58>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <UARTRecieveIT+0x5c>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <UARTRecieveIT+0x58>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <UARTRecieveIT+0x54>)
 8001aac:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ab2:	fb02 f201 	mul.w	r2, r2, r1
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <UARTRecieveIT+0x58>)
 8001aba:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	2000021c 	.word	0x2000021c
 8001ad0:	20000088 	.word	0x20000088
 8001ad4:	20000034 	.word	0x20000034

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <Error_Handler+0x8>
	...

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b22:	2007      	movs	r0, #7
 8001b24:	f001 f872 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_ADC_MspInit+0xec>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d15f      	bne.n	8001c16 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_ADC_MspInit+0xf0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <HAL_ADC_MspInit+0xf4>)
 8001ba2:	f001 fc07 	bl	80033b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <HAL_ADC_MspInit+0xfc>)
 8001baa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bec:	f001 f850 	bl	8002c90 <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bf6:	f7ff ff6f 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_ADC_MspInit+0xf8>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2012      	movs	r0, #18
 8001c0c:	f001 f809 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c10:	2012      	movs	r0, #18
 8001c12:	f001 f822 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40012000 	.word	0x40012000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	200001bc 	.word	0x200001bc
 8001c30:	40026410 	.word	0x40026410

08001c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_SPI_MspInit+0x94>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d133      	bne.n	8001cbe <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_SPI_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c8e:	2338      	movs	r3, #56	; 0x38
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_SPI_MspInit+0x9c>)
 8001caa:	f001 fb83 	bl	80033b4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2033      	movs	r0, #51	; 0x33
 8001cb4:	f000 ffb5 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001cb8:	2033      	movs	r0, #51	; 0x33
 8001cba:	f000 ffce 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40003c00 	.word	0x40003c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_TIM_Base_MspInit+0x64>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d02:	e012      	b.n	8001d2a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_TIM_Base_MspInit+0x6c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10d      	bne.n	8001d2a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_TIM_Base_MspInit+0x68>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40014800 	.word	0x40014800

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_UART_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12b      	bne.n	8001dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dae:	2307      	movs	r3, #7
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_UART_MspInit+0x8c>)
 8001dba:	f001 fafb 	bl	80033b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 f8ae 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <ADC_IRQHandler+0x10>)
 8001e2e:	f000 f90a 	bl	8002046 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000012c 	.word	0x2000012c

08001e3c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <SPI3_IRQHandler+0x10>)
 8001e42:	f002 f9f5 	bl	8004230 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200000d4 	.word	0x200000d4

08001e50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA2_Stream0_IRQHandler+0x10>)
 8001e56:	f001 f843 	bl	8002ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001bc 	.word	0x200001bc

08001e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea4:	4c0b      	ldr	r4, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb2:	f7ff ffd7 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f003 faff 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7fe fda5 	bl	8000a08 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ecc:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8001ed0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ed4:	20000264 	.word	0x20000264

08001ed8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <DMA1_Stream0_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fe81 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fde8 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fe99 	bl	8002c76 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 fe61 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000260 	.word	0x20000260

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000260 	.word	0x20000260

08001fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e033      	b.n	800203e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fda8 	bl	8001b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002006:	f023 0302 	bic.w	r3, r3, #2
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fba2 	bl	800275c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
 800202e:	e001      	b.n	8002034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b20      	cmp	r3, #32
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d049      	beq.n	800211c <HAL_ADC_IRQHandler+0xd6>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d046      	beq.n	800211c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12b      	bne.n	800210c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d119      	bne.n	800210c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0220 	bic.w	r2, r2, #32
 80020e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f9cb 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0212 	mvn.w	r2, #18
 800211a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d057      	beq.n	80021fe <HAL_ADC_IRQHandler+0x1b8>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d054      	beq.n	80021fe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d139      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12b      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d124      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11d      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fc32 	bl	8002a58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 020c 	mvn.w	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_ADC_IRQHandler+0x21a>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d014      	beq.n	8002260 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10d      	bne.n	8002260 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f93d 	bl	80024d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f06f 0201 	mvn.w	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x27a>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0220 	mvn.w	r2, #32
 80022ae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f917 	bl	80024e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f06f 0220 	mvn.w	r2, #32
 80022be:	601a      	str	r2, [r3, #0]
  }
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_Start_DMA+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e0ce      	b.n	8002484 <HAL_ADC_Start_DMA+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d018      	beq.n	800232e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800230c:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_ADC_Start_DMA+0x1c4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5f      	ldr	r2, [pc, #380]	; (8002490 <HAL_ADC_Start_DMA+0x1c8>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9a      	lsrs	r2, r3, #18
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002320:	e002      	b.n	8002328 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3b01      	subs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233c:	d107      	bne.n	800234e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	f040 8086 	bne.w	800246a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002388:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d106      	bne.n	80023ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f023 0206 	bic.w	r2, r3, #6
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ba:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_ADC_Start_DMA+0x1cc>)
 80023bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_ADC_Start_DMA+0x1d0>)
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_ADC_Start_DMA+0x1d4>)
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <HAL_ADC_Start_DMA+0x1d8>)
 80023d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	334c      	adds	r3, #76	; 0x4c
 800240a:	4619      	mov	r1, r3
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f000 fcec 	bl	8002dec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d129      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	e020      	b.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_ADC_Start_DMA+0x1dc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d11b      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d114      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e00b      	b.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000008 	.word	0x20000008
 8002490:	431bde83 	.word	0x431bde83
 8002494:	40012300 	.word	0x40012300
 8002498:	08002955 	.word	0x08002955
 800249c:	08002a0f 	.word	0x08002a0f
 80024a0:	08002a2b 	.word	0x08002a2b
 80024a4:	40012000 	.word	0x40012000

080024a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e113      	b.n	800273c <HAL_ADC_ConfigChannel+0x244>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d925      	bls.n	8002570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d9      	ldr	r1, [r3, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	3b1e      	subs	r3, #30
 800253a:	2207      	movs	r2, #7
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68d9      	ldr	r1, [r3, #12]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4403      	add	r3, r0
 8002562:	3b1e      	subs	r3, #30
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e022      	b.n	80025b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	2207      	movs	r2, #7
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4403      	add	r3, r0
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d824      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b05      	subs	r3, #5
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b05      	subs	r3, #5
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
 8002606:	e04c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d824      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b23      	subs	r3, #35	; 0x23
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b23      	subs	r3, #35	; 0x23
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
 8002658:	e023      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b41      	subs	r3, #65	; 0x41
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b41      	subs	r3, #65	; 0x41
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_ADC_ConfigChannel+0x250>)
 80026a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_ADC_ConfigChannel+0x254>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10f      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d8>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d10b      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_ADC_ConfigChannel+0x254>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x23a>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_ADC_ConfigChannel+0x258>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x1f4>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d122      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_ADC_ConfigChannel+0x258>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_ADC_ConfigChannel+0x25c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_ADC_ConfigChannel+0x260>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0c9a      	lsrs	r2, r3, #18
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002724:	e002      	b.n	800272c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3b01      	subs	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f9      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40012300 	.word	0x40012300
 800274c:	40012000 	.word	0x40012000
 8002750:	10000012 	.word	0x10000012
 8002754:	20000008 	.word	0x20000008
 8002758:	431bde83 	.word	0x431bde83

0800275c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002764:	4b79      	ldr	r3, [pc, #484]	; (800294c <ADC_Init+0x1f0>)
 8002766:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	4a58      	ldr	r2, [pc, #352]	; (8002950 <ADC_Init+0x1f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002802:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6899      	ldr	r1, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	e00f      	b.n	800285a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002858:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0202 	bic.w	r2, r2, #2
 8002868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6899      	ldr	r1, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7e1b      	ldrb	r3, [r3, #24]
 8002874:	005a      	lsls	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002896:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	3b01      	subs	r3, #1
 80028b4:	035a      	lsls	r2, r3, #13
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	e007      	b.n	80028d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	051a      	lsls	r2, r3, #20
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002912:	025a      	lsls	r2, r3, #9
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	029a      	lsls	r2, r3, #10
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40012300 	.word	0x40012300
 8002950:	0f000001 	.word	0x0f000001

08002954 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d13c      	bne.n	80029e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d12b      	bne.n	80029e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d127      	bne.n	80029e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d119      	bne.n	80029e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0220 	bic.w	r2, r2, #32
 80029ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fd61 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029e6:	e00e      	b.n	8002a06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fd75 	bl	80024e4 <HAL_ADC_ErrorCallback>
}
 80029fa:	e004      	b.n	8002a06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fd4d 	bl	80024bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff fd4a 	bl	80024e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff f984 	bl	8001fa8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e099      	b.n	8002de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	e00f      	b.n	8002cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cce:	f7ff f96b 	bl	8001fa8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d908      	bls.n	8002cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e078      	b.n	8002de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e8      	bne.n	8002cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_DMA_Init+0x158>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4313      	orrs	r3, r2
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d117      	bne.n	8002db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa91 	bl	80032bc <DMA_CheckFifoParam>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dae:	2301      	movs	r3, #1
 8002db0:	e016      	b.n	8002de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa48 	bl	8003250 <DMA_CalcBaseAndBitshift>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	223f      	movs	r2, #63	; 0x3f
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	f010803f 	.word	0xf010803f

08002dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Start_IT+0x26>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e040      	b.n	8002e94 <HAL_DMA_Start_IT+0xa8>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d12f      	bne.n	8002e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9da 	bl	80031f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0216 	orr.w	r2, r2, #22
 8002e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00c      	b.n	8002ed4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eec:	4b92      	ldr	r3, [pc, #584]	; (8003138 <HAL_DMA_IRQHandler+0x258>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a92      	ldr	r2, [pc, #584]	; (800313c <HAL_DMA_IRQHandler+0x25c>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	2208      	movs	r2, #8
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d012      	beq.n	8002f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	2201      	movs	r2, #1
 8002f70:	409a      	lsls	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0202 	orr.w	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0204 	orr.w	r2, r3, #4
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d043      	beq.n	8003050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03c      	beq.n	8003050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2210      	movs	r2, #16
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d024      	beq.n	8003050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
 800300e:	e01f      	b.n	8003050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01b      	beq.n	8003050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
 8003020:	e016      	b.n	8003050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0208 	bic.w	r2, r2, #8
 800303e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	2220      	movs	r2, #32
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 808e 	beq.w	800317e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8086 	beq.w	800317e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2220      	movs	r2, #32
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b05      	cmp	r3, #5
 8003088:	d136      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0216 	bic.w	r2, r2, #22
 8003098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_DMA_IRQHandler+0x1da>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0208 	bic.w	r2, r2, #8
 80030c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	223f      	movs	r2, #63	; 0x3f
 80030d0:	409a      	lsls	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d07d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
        }
        return;
 80030f6:	e078      	b.n	80031ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	2b00      	cmp	r3, #0
 800311a:	d030      	beq.n	800317e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	e02b      	b.n	800317e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d027      	beq.n	800317e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
 8003136:	e022      	b.n	800317e <HAL_DMA_IRQHandler+0x29e>
 8003138:	20000008 	.word	0x20000008
 800313c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0210 	bic.w	r2, r2, #16
 800315c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	2b00      	cmp	r3, #0
 8003184:	d032      	beq.n	80031ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2205      	movs	r2, #5
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d307      	bcc.n	80031c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f2      	bne.n	80031aa <HAL_DMA_IRQHandler+0x2ca>
 80031c4:	e000      	b.n	80031c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e000      	b.n	80031ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ea:	bf00      	nop
    }
  }
}
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003210:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d108      	bne.n	8003234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003232:	e007      	b.n	8003244 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3b10      	subs	r3, #16
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <DMA_CalcBaseAndBitshift+0x68>)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d909      	bls.n	8003292 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	659a      	str	r2, [r3, #88]	; 0x58
 8003290:	e007      	b.n	80032a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	aaaaaaab 	.word	0xaaaaaaab
 80032b8:	080056d8 	.word	0x080056d8

080032bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11f      	bne.n	8003316 <DMA_CheckFifoParam+0x5a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d856      	bhi.n	800338a <DMA_CheckFifoParam+0xce>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <DMA_CheckFifoParam+0x28>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003307 	.word	0x08003307
 80032ec:	080032f5 	.word	0x080032f5
 80032f0:	0800338b 	.word	0x0800338b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d046      	beq.n	800338e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e043      	b.n	800338e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800330e:	d140      	bne.n	8003392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003314:	e03d      	b.n	8003392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	d121      	bne.n	8003364 <DMA_CheckFifoParam+0xa8>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d837      	bhi.n	8003396 <DMA_CheckFifoParam+0xda>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <DMA_CheckFifoParam+0x70>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003343 	.word	0x08003343
 8003334:	0800333d 	.word	0x0800333d
 8003338:	08003355 	.word	0x08003355
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e030      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d025      	beq.n	800339a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003352:	e022      	b.n	800339a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800335c:	d11f      	bne.n	800339e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003362:	e01c      	b.n	800339e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d903      	bls.n	8003372 <DMA_CheckFifoParam+0xb6>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d003      	beq.n	8003378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003370:	e018      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      break;
 8003376:	e015      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      break;
 8003388:	e00b      	b.n	80033a2 <DMA_CheckFifoParam+0xe6>
      break;
 800338a:	bf00      	nop
 800338c:	e00a      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;
 800338e:	bf00      	nop
 8003390:	e008      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e006      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e004      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
      break;
 80033a2:	bf00      	nop
    }
  } 
  
  return status; 
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e159      	b.n	8003684 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8148 	bne.w	800367e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003402:	2b02      	cmp	r3, #2
 8003404:	d130      	bne.n	8003468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0201 	and.w	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d017      	beq.n	80034a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a2 	beq.w	800367e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b57      	ldr	r3, [pc, #348]	; (800369c <HAL_GPIO_Init+0x2e8>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_GPIO_Init+0x2e8>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b54      	ldr	r3, [pc, #336]	; (800369c <HAL_GPIO_Init+0x2e8>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_GPIO_Init+0x2ec>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a49      	ldr	r2, [pc, #292]	; (80036a4 <HAL_GPIO_Init+0x2f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x202>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <HAL_GPIO_Init+0x2f4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x1fe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_GPIO_Init+0x2f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x1fa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <HAL_GPIO_Init+0x2fc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x1f6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a45      	ldr	r2, [pc, #276]	; (80036b4 <HAL_GPIO_Init+0x300>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x1f2>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x204>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	; (80036a0 <HAL_GPIO_Init+0x2ec>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_GPIO_Init+0x304>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035fa:	4a2f      	ldr	r2, [pc, #188]	; (80036b8 <HAL_GPIO_Init+0x304>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_GPIO_Init+0x304>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_GPIO_Init+0x304>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003678:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <HAL_GPIO_Init+0x304>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f aea2 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40013c00 	.word	0x40013c00

080036bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e001      	b.n	80036de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003708:	e003      	b.n	8003712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	619a      	str	r2, [r3, #24]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e264      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4ba0      	ldr	r3, [pc, #640]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b9d      	ldr	r3, [pc, #628]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b99      	ldr	r3, [pc, #612]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e23f      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b91      	ldr	r3, [pc, #580]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a90      	ldr	r2, [pc, #576]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a8a      	ldr	r2, [pc, #552]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a87      	ldr	r2, [pc, #540]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b84      	ldr	r3, [pc, #528]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a83      	ldr	r2, [pc, #524]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fbe6 	bl	8001fa8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe fbe2 	bl	8001fa8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e204      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fbd2 	bl	8001fa8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fbce 	bl	8001fa8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f0      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b62      	ldr	r3, [pc, #392]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1c4      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4952      	ldr	r1, [pc, #328]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <HAL_RCC_OscConfig+0x2b0>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe fb87 	bl	8001fa8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389e:	f7fe fb83 	bl	8001fa8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1a5      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4940      	ldr	r1, [pc, #256]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_OscConfig+0x2b0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fb66 	bl	8001fa8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe fb62 	bl	8001fa8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e184      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d030      	beq.n	800396c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCC_OscConfig+0x2b4>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fb46 	bl	8001fa8 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fb42 	bl	8001fa8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e164      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
 800393e:	e015      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x2b4>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe fb2f 	bl	8001fa8 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394e:	f7fe fb2b 	bl	8001fa8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e14d      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a0 	beq.w	8003aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d121      	bne.n	80039fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fe faf1 	bl	8001fa8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e011      	b.n	80039ee <HAL_RCC_OscConfig+0x2ce>
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
 80039d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039dc:	f7fe fae4 	bl	8001fa8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e106      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <HAL_RCC_OscConfig+0x4e4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
 8003a02:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a80      	ldr	r2, [pc, #512]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	e01c      	b.n	8003a4a <HAL_RCC_OscConfig+0x32a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x312>
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	4b78      	ldr	r3, [pc, #480]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0x32a>
 8003a32:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a74      	ldr	r2, [pc, #464]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a71      	ldr	r2, [pc, #452]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe faa9 	bl	8001fa8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe faa5 	bl	8001fa8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0c5      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ee      	beq.n	8003a5a <HAL_RCC_OscConfig+0x33a>
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fa93 	bl	8001fa8 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fa8f 	bl	8001fa8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0af      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a55      	ldr	r2, [pc, #340]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 809b 	beq.w	8003bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d05c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d141      	bne.n	8003b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fa63 	bl	8001fa8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe fa5f 	bl	8001fa8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e081      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	019b      	lsls	r3, r3, #6
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	4937      	ldr	r1, [pc, #220]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fa38 	bl	8001fa8 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe fa34 	bl	8001fa8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e056      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x41c>
 8003b5a:	e04e      	b.n	8003bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe fa21 	bl	8001fa8 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fa1d 	bl	8001fa8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03f      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x44a>
 8003b88:	e037      	b.n	8003bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e032      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d028      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d121      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d11a      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	3b01      	subs	r3, #1
 8003be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40007000 	.word	0x40007000
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	42470060 	.word	0x42470060

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0cc      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e067      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe f952 	bl	8001fa8 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe f94e 	bl	8001fa8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe f8b2 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	080056c0 	.word	0x080056c0
 8003dd4:	20000008 	.word	0x20000008
 8003dd8:	2000000c 	.word	0x2000000c

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	2300      	movs	r3, #0
 8003dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80bd 	bhi.w	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e0b7      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e12:	60bb      	str	r3, [r7, #8]
       break;
 8003e14:	e0b7      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e18:	60bb      	str	r3, [r7, #8]
      break;
 8003e1a:	e0b4      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04d      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	ea02 0800 	and.w	r8, r2, r0
 8003e4a:	ea03 0901 	and.w	r9, r3, r1
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	014b      	lsls	r3, r1, #5
 8003e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e60:	0142      	lsls	r2, r0, #5
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	ebb0 0008 	subs.w	r0, r0, r8
 8003e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e7c:	0182      	lsls	r2, r0, #6
 8003e7e:	1a12      	subs	r2, r2, r0
 8003e80:	eb63 0301 	sbc.w	r3, r3, r1
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	00d9      	lsls	r1, r3, #3
 8003e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e92:	00d0      	lsls	r0, r2, #3
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	eb12 0208 	adds.w	r2, r2, r8
 8003e9c:	eb43 0309 	adc.w	r3, r3, r9
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0259      	lsls	r1, r3, #9
 8003eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003eae:	0250      	lsls	r0, r2, #9
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f7fc fc26 	bl	8000710 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e04a      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	ea02 0400 	and.w	r4, r2, r0
 8003ee6:	ea03 0501 	and.w	r5, r3, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	014b      	lsls	r3, r1, #5
 8003ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003efc:	0142      	lsls	r2, r0, #5
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	1b00      	subs	r0, r0, r4
 8003f04:	eb61 0105 	sbc.w	r1, r1, r5
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	018b      	lsls	r3, r1, #6
 8003f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f16:	0182      	lsls	r2, r0, #6
 8003f18:	1a12      	subs	r2, r2, r0
 8003f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	00d9      	lsls	r1, r3, #3
 8003f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2c:	00d0      	lsls	r0, r2, #3
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	1912      	adds	r2, r2, r4
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0299      	lsls	r1, r3, #10
 8003f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f46:	0290      	lsls	r0, r2, #10
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc fbda 	bl	8000710 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f82:	60bb      	str	r3, [r7, #8]
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	68bb      	ldr	r3, [r7, #8]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000008 	.word	0x20000008

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	080056d0 	.word	0x080056d0

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff ffdc 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	080056d0 	.word	0x080056d0

08004008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07b      	b.n	8004112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d009      	beq.n	8004040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
 8004032:	e005      	b.n	8004040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fdea 	bl	8001c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	ea42 0103 	orr.w	r1, r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0104 	and.w	r1, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0210 	and.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_SPI_Transmit_IT+0x20>
 8004138:	2302      	movs	r3, #2
 800413a:	e06f      	b.n	800421c <HAL_SPI_Transmit_IT+0x100>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit_IT+0x34>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004154:	e05d      	b.n	8004212 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004166:	e054      	b.n	8004212 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2203      	movs	r2, #3
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_SPI_Transmit_IT+0x10c>)
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
 80041ae:	e002      	b.n	80041b6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_SPI_Transmit_IT+0x110>)
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041be:	d10f      	bne.n	80041e0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80041ee:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d008      	beq.n	8004210 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e000      	b.n	8004212 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004210:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	080044b3 	.word	0x080044b3
 800422c:	0800446d 	.word	0x0800446d

08004230 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10f      	bne.n	8004274 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
    return;
 8004272:	e0d7      	b.n	8004424 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_SPI_IRQHandler+0x66>
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	09db      	lsrs	r3, r3, #7
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
    return;
 8004294:	e0c6      	b.n	8004424 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <HAL_SPI_IRQHandler+0x8c>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80b4 	beq.w	8004424 <HAL_SPI_IRQHandler+0x1f4>
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80ad 	beq.w	8004424 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d023      	beq.n	800431e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d011      	beq.n	8004306 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	e00b      	b.n	800431e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
        return;
 800431c:	e082      	b.n	8004424 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d014      	beq.n	8004354 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00c      	beq.n	800437a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0208 	orr.w	r2, r3, #8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04f      	beq.n	8004422 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004390:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_SPI_IRQHandler+0x17e>
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d034      	beq.n	8004418 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0203 	bic.w	r2, r2, #3
 80043bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_SPI_IRQHandler+0x1fc>)
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fd62 	bl	8002e9c <HAL_DMA_Abort_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	4a0d      	ldr	r2, [pc, #52]	; (800442c <HAL_SPI_IRQHandler+0x1fc>)
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fd4c 	bl	8002e9c <HAL_DMA_Abort_IT>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004416:	e003      	b.n	8004420 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f809 	bl	8004430 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800441e:	e000      	b.n	8004422 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004420:	bf00      	nop
    return;
 8004422:	bf00      	nop
  }
}
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	08004445 	.word	0x08004445

08004430 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ffe6 	bl	8004430 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8f1 	bl	800468c <SPI_CloseTx_ISR>
  }
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8cf 	bl	800468c <SPI_CloseTx_ISR>
  }
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004508:	f7fd fd4e 	bl	8001fa8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004518:	f7fd fd46 	bl	8001fa8 <HAL_GetTick>
 800451c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800451e:	4b39      	ldr	r3, [pc, #228]	; (8004604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	015b      	lsls	r3, r3, #5
 8004524:	0d1b      	lsrs	r3, r3, #20
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452e:	e054      	b.n	80045da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d050      	beq.n	80045da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004538:	f7fd fd36 	bl	8001fa8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	429a      	cmp	r2, r3
 8004546:	d902      	bls.n	800454e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d13d      	bne.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800455c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d111      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004570:	d004      	beq.n	800457c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457a:	d107      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	d10f      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e017      	b.n	80045fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d19b      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000008 	.word	0x20000008

08004608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <SPI_EndRxTxTransaction+0x7c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <SPI_EndRxTxTransaction+0x80>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	0d5b      	lsrs	r3, r3, #21
 8004620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004632:	d112      	bne.n	800465a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ff5a 	bl	80044f8 <SPI_WaitFlagStateUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d016      	beq.n	8004678 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00f      	b.n	800467a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3b01      	subs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d0f2      	beq.n	800465a <SPI_EndRxTxTransaction+0x52>
 8004674:	e000      	b.n	8004678 <SPI_EndRxTxTransaction+0x70>
        break;
 8004676:	bf00      	nop
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000008 	.word	0x20000008
 8004688:	165e9f81 	.word	0x165e9f81

0800468c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <SPI_CloseTx_ISR+0xbc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <SPI_CloseTx_ISR+0xc0>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0a5b      	lsrs	r3, r3, #9
 80046a0:	2264      	movs	r2, #100	; 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a8:	f7fd fc7e 	bl	8001fa8 <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046c0:	e009      	b.n	80046d6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0eb      	beq.n	80046ae <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	2164      	movs	r1, #100	; 0x64
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ff8c 	bl	8004608 <SPI_EndRxTxTransaction>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fe7d 	bl	8004430 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004736:	e002      	b.n	800473e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fd f96d 	bl	8001a18 <HAL_SPI_TxCpltCallback>
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000008 	.word	0x20000008
 800474c:	057619f1 	.word	0x057619f1

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e041      	b.n	80047e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd faac 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 f9ae 	bl	8004af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e03c      	b.n	8004882 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_TIM_Base_Start+0xa0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_TIM_Base_Start+0x5c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d013      	beq.n	800484c <HAL_TIM_Base_Start+0x5c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <HAL_TIM_Base_Start+0xa4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_TIM_Base_Start+0x5c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_TIM_Base_Start+0xa8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_TIM_Base_Start+0x5c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_TIM_Base_Start+0xac>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_Base_Start+0x5c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <HAL_TIM_Base_Start+0xb0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d010      	beq.n	8004880 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	e007      	b.n	8004880 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40014000 	.word	0x40014000

080048a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d001      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e044      	b.n	8004946 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_TIM_Base_Start_IT+0xb0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x6c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x6c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x6c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_TIM_Base_Start_IT+0xb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x6c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_TIM_Base_Start_IT+0xbc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x6c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_TIM_Base_Start_IT+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d111      	bne.n	8004934 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d010      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e007      	b.n	8004944 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40014000 	.word	0x40014000

08004968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIM_ConfigClockSource+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e0b3      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x180>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800499e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d03e      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0xd0>
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049be:	f200 8087 	bhi.w	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c6:	f000 8085 	beq.w	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d87f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d01a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xa2>
 80049d4:	2b70      	cmp	r3, #112	; 0x70
 80049d6:	d87b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049d8:	2b60      	cmp	r3, #96	; 0x60
 80049da:	d050      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x116>
 80049dc:	2b60      	cmp	r3, #96	; 0x60
 80049de:	d877      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d03c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xf6>
 80049e4:	2b50      	cmp	r3, #80	; 0x50
 80049e6:	d873      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d058      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x136>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d86f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d064      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x156>
 80049f4:	2b30      	cmp	r3, #48	; 0x30
 80049f6:	d86b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d060      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x156>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d867      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05c      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x156>
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d05a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a08:	e062      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f000 f963 	bl	8004ce4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	609a      	str	r2, [r3, #8]
      break;
 8004a36:	e04e      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6899      	ldr	r1, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f000 f94c 	bl	8004ce4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5a:	609a      	str	r2, [r3, #8]
      break;
 8004a5c:	e03b      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 f8c0 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2150      	movs	r1, #80	; 0x50
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f919 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e02b      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 f8df 	bl	8004c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2160      	movs	r1, #96	; 0x60
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f909 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e01b      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f000 f8a0 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2140      	movs	r1, #64	; 0x40
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f8f9 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004abc:	e00b      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f000 f8f0 	bl	8004cae <TIM_ITRx_SetConfig>
        break;
 8004ace:	e002      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a34      	ldr	r2, [pc, #208]	; (8004bd4 <TIM_Base_SetConfig+0xe4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0x38>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a31      	ldr	r2, [pc, #196]	; (8004bd8 <TIM_Base_SetConfig+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a30      	ldr	r2, [pc, #192]	; (8004bdc <TIM_Base_SetConfig+0xec>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <TIM_Base_SetConfig+0xf0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d108      	bne.n	8004b3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <TIM_Base_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01b      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d017      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <TIM_Base_SetConfig+0xe8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <TIM_Base_SetConfig+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <TIM_Base_SetConfig+0xf0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <TIM_Base_SetConfig+0xf4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <TIM_Base_SetConfig+0xf8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_Base_SetConfig+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <TIM_Base_SetConfig+0xfc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <TIM_Base_SetConfig+0xe4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d103      	bne.n	8004bc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800

08004bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 030a 	bic.w	r3, r3, #10
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	031b      	lsls	r3, r3, #12
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f043 0307 	orr.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e050      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d013      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03f      	b.n	8004e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc ff8c 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f96f 	bl	8005128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b08a      	sub	sp, #40	; 0x28
 8004e9e:	af02      	add	r7, sp, #8
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d17c      	bne.n	8004fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_UART_Transmit+0x2c>
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e075      	b.n	8004fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Transmit+0x3e>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e06e      	b.n	8004fb6 <HAL_UART_Transmit+0x11c>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2221      	movs	r2, #33	; 0x21
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eee:	f7fd f85b 	bl	8001fa8 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d108      	bne.n	8004f1c <HAL_UART_Transmit+0x82>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e003      	b.n	8004f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f2c:	e02a      	b.n	8004f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f870 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e036      	b.n	8004fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	3302      	adds	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e007      	b.n	8004f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1cf      	bne.n	8004f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2140      	movs	r1, #64	; 0x40
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f840 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e006      	b.n	8004fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d11d      	bne.n	8005014 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Receive_IT+0x26>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e016      	b.n	8005016 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Receive_IT+0x38>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e00f      	b.n	8005016 <HAL_UART_Receive_IT+0x58>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	461a      	mov	r2, r3
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f851 	bl	80050b2 <UART_Start_Receive_IT>
 8005010:	4603      	mov	r3, r0
 8005012:	e000      	b.n	8005016 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e02c      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d028      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x30>
 800503e:	f7fc ffb3 	bl	8001fa8 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d21d      	bcs.n	800508a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e00f      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d0c3      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2222      	movs	r2, #34	; 0x22
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0220 	orr.w	r2, r2, #32
 8005116:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	b09f      	sub	sp, #124	; 0x7c
 800512e:	af00      	add	r7, sp, #0
 8005130:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800513c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513e:	68d9      	ldr	r1, [r3, #12]
 8005140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	ea40 0301 	orr.w	r3, r0, r1
 8005148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	431a      	orrs	r2, r3
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	431a      	orrs	r2, r3
 800515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4313      	orrs	r3, r2
 8005160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800516c:	f021 010c 	bic.w	r1, r1, #12
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005176:	430b      	orrs	r3, r1
 8005178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800517a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	6999      	ldr	r1, [r3, #24]
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	ea40 0301 	orr.w	r3, r0, r1
 8005190:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4bc5      	ldr	r3, [pc, #788]	; (80054ac <UART_SetConfig+0x384>)
 8005198:	429a      	cmp	r2, r3
 800519a:	d004      	beq.n	80051a6 <UART_SetConfig+0x7e>
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4bc3      	ldr	r3, [pc, #780]	; (80054b0 <UART_SetConfig+0x388>)
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d103      	bne.n	80051ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051a6:	f7fe ff1b 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 80051aa:	6778      	str	r0, [r7, #116]	; 0x74
 80051ac:	e002      	b.n	80051b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ae:	f7fe ff03 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 80051b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051bc:	f040 80b6 	bne.w	800532c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c2:	461c      	mov	r4, r3
 80051c4:	f04f 0500 	mov.w	r5, #0
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	6439      	str	r1, [r7, #64]	; 0x40
 80051d0:	415b      	adcs	r3, r3
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051d8:	1912      	adds	r2, r2, r4
 80051da:	eb45 0303 	adc.w	r3, r5, r3
 80051de:	f04f 0000 	mov.w	r0, #0
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	00d9      	lsls	r1, r3, #3
 80051e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ec:	00d0      	lsls	r0, r2, #3
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	1911      	adds	r1, r2, r4
 80051f4:	6639      	str	r1, [r7, #96]	; 0x60
 80051f6:	416b      	adcs	r3, r5
 80051f8:	667b      	str	r3, [r7, #100]	; 0x64
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	461a      	mov	r2, r3
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	1891      	adds	r1, r2, r2
 8005206:	63b9      	str	r1, [r7, #56]	; 0x38
 8005208:	415b      	adcs	r3, r3
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005214:	f7fb fa7c 	bl	8000710 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4ba5      	ldr	r3, [pc, #660]	; (80054b4 <UART_SetConfig+0x38c>)
 800521e:	fba3 2302 	umull	r2, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	011e      	lsls	r6, r3, #4
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	461c      	mov	r4, r3
 800522a:	f04f 0500 	mov.w	r5, #0
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	1891      	adds	r1, r2, r2
 8005234:	6339      	str	r1, [r7, #48]	; 0x30
 8005236:	415b      	adcs	r3, r3
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
 800523a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800523e:	1912      	adds	r2, r2, r4
 8005240:	eb45 0303 	adc.w	r3, r5, r3
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	00d9      	lsls	r1, r3, #3
 800524e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005252:	00d0      	lsls	r0, r2, #3
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	1911      	adds	r1, r2, r4
 800525a:	65b9      	str	r1, [r7, #88]	; 0x58
 800525c:	416b      	adcs	r3, r5
 800525e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	1891      	adds	r1, r2, r2
 800526c:	62b9      	str	r1, [r7, #40]	; 0x28
 800526e:	415b      	adcs	r3, r3
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800527a:	f7fb fa49 	bl	8000710 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b8c      	ldr	r3, [pc, #560]	; (80054b4 <UART_SetConfig+0x38c>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	; 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3332      	adds	r3, #50	; 0x32
 8005296:	4a87      	ldr	r2, [pc, #540]	; (80054b4 <UART_SetConfig+0x38c>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052a4:	441e      	add	r6, r3
 80052a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a8:	4618      	mov	r0, r3
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	1894      	adds	r4, r2, r2
 80052b4:	623c      	str	r4, [r7, #32]
 80052b6:	415b      	adcs	r3, r3
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052be:	1812      	adds	r2, r2, r0
 80052c0:	eb41 0303 	adc.w	r3, r1, r3
 80052c4:	f04f 0400 	mov.w	r4, #0
 80052c8:	f04f 0500 	mov.w	r5, #0
 80052cc:	00dd      	lsls	r5, r3, #3
 80052ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052d2:	00d4      	lsls	r4, r2, #3
 80052d4:	4622      	mov	r2, r4
 80052d6:	462b      	mov	r3, r5
 80052d8:	1814      	adds	r4, r2, r0
 80052da:	653c      	str	r4, [r7, #80]	; 0x50
 80052dc:	414b      	adcs	r3, r1
 80052de:	657b      	str	r3, [r7, #84]	; 0x54
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	61b9      	str	r1, [r7, #24]
 80052ee:	415b      	adcs	r3, r3
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052fa:	f7fb fa09 	bl	8000710 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4b6c      	ldr	r3, [pc, #432]	; (80054b4 <UART_SetConfig+0x38c>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	; 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3332      	adds	r3, #50	; 0x32
 8005316:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <UART_SetConfig+0x38c>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 0207 	and.w	r2, r3, #7
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4432      	add	r2, r6
 8005328:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800532a:	e0b9      	b.n	80054a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800532c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532e:	461c      	mov	r4, r3
 8005330:	f04f 0500 	mov.w	r5, #0
 8005334:	4622      	mov	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	1891      	adds	r1, r2, r2
 800533a:	6139      	str	r1, [r7, #16]
 800533c:	415b      	adcs	r3, r3
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005344:	1912      	adds	r2, r2, r4
 8005346:	eb45 0303 	adc.w	r3, r5, r3
 800534a:	f04f 0000 	mov.w	r0, #0
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	00d9      	lsls	r1, r3, #3
 8005354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005358:	00d0      	lsls	r0, r2, #3
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	eb12 0804 	adds.w	r8, r2, r4
 8005362:	eb43 0905 	adc.w	r9, r3, r5
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	008b      	lsls	r3, r1, #2
 800537a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800537e:	0082      	lsls	r2, r0, #2
 8005380:	4640      	mov	r0, r8
 8005382:	4649      	mov	r1, r9
 8005384:	f7fb f9c4 	bl	8000710 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <UART_SetConfig+0x38c>)
 800538e:	fba3 2302 	umull	r2, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	011e      	lsls	r6, r3, #4
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	4618      	mov	r0, r3
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	1894      	adds	r4, r2, r2
 80053a4:	60bc      	str	r4, [r7, #8]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ae:	1812      	adds	r2, r2, r0
 80053b0:	eb41 0303 	adc.w	r3, r1, r3
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	f04f 0500 	mov.w	r5, #0
 80053bc:	00dd      	lsls	r5, r3, #3
 80053be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053c2:	00d4      	lsls	r4, r2, #3
 80053c4:	4622      	mov	r2, r4
 80053c6:	462b      	mov	r3, r5
 80053c8:	1814      	adds	r4, r2, r0
 80053ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80053cc:	414b      	adcs	r3, r1
 80053ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f04f 0100 	mov.w	r1, #0
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	008b      	lsls	r3, r1, #2
 80053e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053e8:	0082      	lsls	r2, r0, #2
 80053ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053ee:	f7fb f98f 	bl	8000710 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <UART_SetConfig+0x38c>)
 80053f8:	fba3 1302 	umull	r1, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	3332      	adds	r3, #50	; 0x32
 800540a:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <UART_SetConfig+0x38c>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005416:	441e      	add	r6, r3
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	4618      	mov	r0, r3
 800541c:	f04f 0100 	mov.w	r1, #0
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	1894      	adds	r4, r2, r2
 8005426:	603c      	str	r4, [r7, #0]
 8005428:	415b      	adcs	r3, r3
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005430:	1812      	adds	r2, r2, r0
 8005432:	eb41 0303 	adc.w	r3, r1, r3
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	f04f 0500 	mov.w	r5, #0
 800543e:	00dd      	lsls	r5, r3, #3
 8005440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005444:	00d4      	lsls	r4, r2, #3
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	eb12 0a00 	adds.w	sl, r2, r0
 800544e:	eb43 0b01 	adc.w	fp, r3, r1
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800546a:	0082      	lsls	r2, r0, #2
 800546c:	4650      	mov	r0, sl
 800546e:	4659      	mov	r1, fp
 8005470:	f7fb f94e 	bl	8000710 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <UART_SetConfig+0x38c>)
 800547a:	fba3 1302 	umull	r1, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2164      	movs	r1, #100	; 0x64
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	3332      	adds	r3, #50	; 0x32
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <UART_SetConfig+0x38c>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4432      	add	r2, r6
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	377c      	adds	r7, #124	; 0x7c
 80054a4:	46bd      	mov	sp, r7
 80054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	40011000 	.word	0x40011000
 80054b0:	40011400 	.word	0x40011400
 80054b4:	51eb851f 	.word	0x51eb851f

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f000 f82e 	bl	800552c <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	080056e8 	.word	0x080056e8
 80054f4:	080056e8 	.word	0x080056e8
 80054f8:	080056e8 	.word	0x080056e8
 80054fc:	080056ec 	.word	0x080056ec

08005500 <memcpy>:
 8005500:	440a      	add	r2, r1
 8005502:	4291      	cmp	r1, r2
 8005504:	f100 33ff 	add.w	r3, r0, #4294967295
 8005508:	d100      	bne.n	800550c <memcpy+0xc>
 800550a:	4770      	bx	lr
 800550c:	b510      	push	{r4, lr}
 800550e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005516:	4291      	cmp	r1, r2
 8005518:	d1f9      	bne.n	800550e <memcpy+0xe>
 800551a:	bd10      	pop	{r4, pc}

0800551c <memset>:
 800551c:	4402      	add	r2, r0
 800551e:	4603      	mov	r3, r0
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	f803 1b01 	strb.w	r1, [r3], #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
